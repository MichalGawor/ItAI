b'' b'archive-name: cryptography-faq/part05' b'last-modified: b'' b'' b'faq for sci.crypt, part product ciphers' b'' b'this is the fifth of ten parts of the sci.crypt faq. the parts are' b'mostly independent, but you should read the first part before the rest.' b"we don't have the time to send out missing parts by mail, so don't ask." b"notes such as ``[kah67]'' refer to the reference list in the last part." b'' b'the sections of this faq are available via anonymous ftp to rtfm.mit.edu' b'as /pub/usenet/news.answers/cryptography-faq/part[xx]. the cryptography' b'faq is posted to the newsgroups sci.crypt, sci.answers, and news.answers' b'every days.' b'' b'' b'contents:' b'' b'* what is a product cipher?' b'* what makes a product cipher secure?' b'* what are some group-theoretic properties of product ciphers?' b'* what can be proven about the security of a product cipher?' b'* how are block ciphers used to encrypt data longer than the block size?' b'* can symmetric block ciphers be used for message authentication?' b'* what exactly is des?' b'* what is triple des?' b'* what is differential cryptanalysis?' b'* how was nsa involved in the design of des?' b'* is des available in software?' b'* is des available in hardware?' b'* can des be used to protect classified information?' b'* what are "ecb", "cbc", "cfb", and "ofb" encryption?' b'' b'' b'* what is a product cipher?' b'' b'a product cipher is a block cipher that iterates several weak' b'operations such as substitution, transposition, modular' b'addition/multiplication, and linear transformation. (a ``block' b"cipher'' just means a cipher that encrypts a block of data---8 bytes," b'say---all at once, then goes on to the next block.) the notion of' b'product ciphers is due to shannon [sha49]. examples of modern' b'product ciphers include lucifer [sor84], des [nbs77], sp-networks' b'[kam78], loki [bro90], feal [shi84], pes [lai90], khufu and khafre' b'[me91a]. the so-called feistel ciphers are a class of product' b'ciphers which operate on one half of the ciphertext at each round,' b'and then swap the ciphertext halves after each round. lucifer,' b'des, loki, and feal are examples of feistel ciphers.' b'' b'the following table compares the main parameters of several product' b'ciphers:' b'' b'cipher block length key bits number of rounds' b'lucifer b'des b'loki b'feal 2^x, x b'pes b'' b'* what makes a product cipher secure?' b'' b'nobody knows how to prove mathematically that a product cipher is' b'completely secure. so in practice one begins by demonstrating that the' b"cipher ``looks highly random''. for example, the cipher must be" b'nonlinear, and it must produce ciphertext which functionally depends' b'on every bit of the plaintext and the key. meyer [mey78] has shown' b'that at least rounds of des are required to guarantee such a' b"dependence. in this sense a product cipher should act as a ``mixing''" b'function which combines the plaintext, key, and ciphertext in a' b'complex nonlinear fashion.' b'' b'the fixed per-round substitutions of the product cipher are' b'referred to as s-boxes. for example, lucifer has s-boxes, and des' b'has s-boxes. the nonlinearity of a product cipher reduces to a' b'careful design of these s-boxes. a list of partial design criteria' b'for the s-boxes of des, which apply to s-boxes in general, may be' b'found in brown [bro89] and brickell et al. [bri86].' b'' b'* what are some group-theoretic properties of product ciphers?' b'' b'let e be a product cipher that maps n-bit blocks to n-bit blocks.' b'let e_k(x) be the encryption of x under key k. then, for any fixed k,' b'the map sending x to e_k(x) is a permutation of the set of n-bit' b'blocks. denote this permutation by p_k. the set of all n-bit' b'permutations is called the symmetric group and is written s_{2^n}.' b'the collection of all these permutations p_k, where k ranges over all' b'possible keys, is denoted e(s_{2^n}). if e were a random mapping from' b'plaintexts to ciphertexts then we would expect e(s_{2^n}) to generate' b'a large subset of s_{2^n}.' b'' b'coppersmith and grossman [cop74] have shown that a very simple' b'product cipher can generate the alternating group a_{2^n} given a' b'sufficient number of rounds. (the alternating group is half of the' b"symmetric group: it consists of all ``even'' permutations, i.e., all" b'permutations which can be written as an even number of swaps.)' b'even and goldreich [eve83] were able to extend these results to show' b'that feistel ciphers can generate a_{2^n}, given a sufficient number' b'of rounds.' b'' b'the security of multiple encipherment also depends on the' b'group-theoretic properties of a cipher. multiple encipherment is an' b'extension over single encipherment if for keys k1, k2 there does' b'not exist a third key k3 such that' b'' b'e_k2(e_k1(x)) e_(k3)(x) b'' b'which indicates that encrypting twice with two independent keys' b'k1, k2 is equal to a single encryption under the third key k3. if' b'for every k1, k2 there exists a k3 such that eq. is true then' b'we say that e is a group.' b'' b'this question of whether des is a group under this definition was' b'extensively studied by sherman, kaliski, and rivest [she88]. in their' b'paper they give strong evidence for the hypothesis that des is not a' b'group. in fact des is not a group [cam93].' b'' b'* what can be proven about the security of a product cipher?' b'' b'recall from above that p_k is a permutation produced by e under' b'some key k. the goal of the designer of e is to ensure that p_k' b'appears to be a random element of s_{2^n}, the symmetric group.' b'let r be an element of s_{2^n} selected randomly. we will say that p_k' b'and r are indistinguishable if an observer given p_k and r in some' b'order cannot distinguish between these two permutations in polynomial' b'time. that is, with time bounded resources, the observer cannot' b'determine which of the permutations is produced by e: the optimal' b'decision is no better than simply guessing.' b'' b'luby and rackoff [lub88] have shown that a class of feistel ciphers' b'are secure in this sense when the round mapping is replaced by' b'random boolean functions.' b'' b'* how are block ciphers used to encrypt data longer than the block size?' b'' b'there are four standard "modes of operation" (and numerous non-standard' b'ones as well). the standard modes of operation are defined in the u.s.' b'department of commerce federal information processing standard (fips) b'published in see the question about "ecb" below for more details.' b'' b'although they are defined for the des block cipher, the "modes of' b'operation" can be used with any block cipher.' b'' b'* can symmetric block ciphers be used for message authentication?' b'' b'one may use a symmetric cryptosystem block cipher to prove to himself' b'that he did or did not generate a message, and to prove to himself' b'whether his message was altered or unaltered since generation. but one' b'cannot prove these things to another without revealing the key, and' b'thereafter that key cannot be used to prove anything about any messages' b'that were authenticated using that key.' b'' b'see ansi x3.106-1983 and fips for a standard method of message' b'authentication using des.' b'' b'* what exactly is des?' b'' b"des is the u.s. government's data encryption standard a product" b'cipher that operates on 64-bit blocks of data, using a 56-bit key.' b'' b'it is defined in fips [which supersedes fips b'fips are federal information processing standards published by ntis.' b'des is identical to the ansi standard data encryption algorithm (dea)' b'defined in ansi x3.92-1981.' b'' b'* what is triple des?' b'' b'triple des is a product cipher which, like des, operates on 64-bit' b'data blocks. there are several forms, each of which uses the des' b'cipher times. some forms use two 56-bit keys, some use three.' b'the "des modes of operation" may also be used with triple-des.' b'' b'some people refer to e(k1,d(k2,e(k1,x))) as triple-des.' b'' b'this method is defined in chapter of the ansi standard x9.17-1985' b'"financial institution key management" and is intended for use in' b'encrypting des keys and ivs for "automated key distribution". its' b'formal name is "encryption and decryption of a single key by a key' b'pair", but it is referenced in other standards documents as ede.' b'' b'that standard says (section "key encrypting keys may be a single' b'dea key or a dea key pair. key pairs shoud be used where additional' b'security is needed (e.g., the data protected by the key(s) has a long' b'security life). a key pair shall not be encrypted or decrypted using a' b'single key."' b'' b'others use the term "triple-des" for e(k1,d(k2,e(k3,x))) or' b'e(k1,e(k2,e(k3,x))).' b'' b'one of us (carl ellison) keeps advocating des triple use in the form' b'e(k1, tran( e(k2, tran( e(k3, compress( x where each des instance' b'has its own key and iv (for cbc mode) and tran has been posted on' b'sci.crypt. (it is a large-block transposition program taking its key' b'from the data stream itself, so that it is not an encryption program on' b'its own part.)' b'' b'* what is differential cryptanalysis?' b'' b'differential cryptanalysis is a statistical attack that can be' b'applied to any iterated mapping (ie. any mapping which is based on' b'a repeated round function). the method was recently popularized by' b'biham and shamir [bih91], but coppersmith has remarked that the' b's-boxes of des were optimized against this attack some years ago.' b'this method has proved effective against several product ciphers,' b'notably feal [bi91a].' b'' b'differential cryptanalysis is based on observing a large number of' b"ciphertexts y, y' whose corresponding plaintexts x, x' satisfy a" b"known difference d x+x', where is componentwise xor. in the" b'basic biham-shamir attack, such plaintext pairs are required' b'to determine the key for des. substantially fewer pairs are required' b'if des is truncated to or rounds. in these cases, the actual key' b'can be recovered in a matter of minutes using a few thousand pairs.' b'for full des this attack is impractical because it requires so many' b'known plaintexts.' b'' b'the work of biham and shamir on des revealed several startling' b'observations on the algorithm. most importantly, if the key' b'schedule was removed from des and a 768-bit key was used,' b'the key could be recovered in less than steps. thus' b'independent subkeys do not add substantial security to des.' b'further, the s-boxes of des are extremely sensitive in that' b'changing even single entries in these tables yields significant' b'improvement in the differential attack.' b'' b'adi shamir is quoted to say (nytimes oct ``i would say' b'that, contrary to what some people believe, there is no evidence' b"of tampering with the des so that the basic design was weakened.''" b'' b'* how was nsa involved in the design of des?' b'' b'according to kinnucan [kin78], tuchman, a member of the group that' b'developed des at ibm is quoted as saying, ``we developed the des' b'algorithm entirely within ibm using ibmers. the nsa did not' b"dictate a single wire!'' tuchman and meyer (another developer of" b'des) spent a year breaking ciphers and finding weaknesses in' b'lucifer. they then spent two years strengthening lucifer. ``their' b'basic approach was to look for strong substitution, permutation,' b'and key scheduling functions ibm has classified the notes' b'containing the selection criteria at the request of the nsa....' b'`the nsa told us we had inadvertently reinvented some of the deep' b"secrets it uses to make its own algorithms,' explains tuchman.''" b'' b'on the other hand, a document called ``involvement of the nsa in' b'the development of des: unclassified summary of the united states' b"select committee on intelligence'', printed in the ieee" b'communications magazine, p53-55, states: ``in the development' b'of des, nsa convinced ibm that a reduced keysize was sufficient;' b'indirectly assisted in the development of the s-box structures; and' b'certified that the final des algorithm was, to the best of their' b"knowledge, free from any statistical or mathematical weakness.''" b'' b'clearly the key size was reduced at the insistence of the nsa.' b'the article further states that the nsa did not tamper with the' b'algorithm itself, just the parameters, which in some sense' b'resolves the apparent conflict in the remarks of meyer and tuchman' b'presented above.' b'' b'* is des available in software?' b'' b'several people have made des code available via ftp (see part for' b'pathnames): stig ostholm [ftpso]; bsd [ftpbk]; eric young [ftpey];' b'dennis furguson [ftpdf]; mark riordan [ftpmr]; phil karn [ftppk].' b'a pascal listing of des is also given in patterson [pat87].' b'' b'fips says "the algorithm specified in this standard is to be' b'implemented using hardware (not software) technology. b'software implementations in general purpose computers are not in' b'compliance with this standard." despite this, software' b'implementations abound, and are used by government agencies.' b'' b'* is des available in hardware?' b'' b'the following paragraphs are quoted from messages sent to the editors.' b"we don't vouch for the quality or even existence of the products." b'' b'chip rosenthal says: ``dallas semiconductor makes a des' b'encryption/decryption device for use on standard, digital 64kbps pcm' b'telecom data streams. it is capable of processing data in real time,' b'e.g. one sample/frame. it is the ds2160. their phone number is' b'214-450-0400. you would probably need to talk with dewight in telecom' b"marketing.''" b'' b'cryptech cry12c102: 22.5mbit/s according to data sheet, with bit' b'interface. we use this one, because it was the only one available when' b'we started the project. no problems pijnenburg pcc100: 20mbit/s' b'according to data sheet. address: pijnenburg b.v., boxtelswweg b'nl-5261 ne vught, the netherlands. infosys des chip (germany):' b's-boxes must be loaded by software. so you can modify the algorithm.' b"sorry, i don't have the data sheet handy. please e-mail me if you need" b"further information.''" b'' b'des and proprietary storage for 56-bit keys key stream generator' b'integrated hardware des3 procedure extended mode with bit keys;' b'computer elektronik infosys; 512-a herndon parkway,; herndon, va' b'22070; b'' b'an am9568 compatible des chip that operates at 25mhz, performs a' b'round of encryption in clocks, has a three-stage pipeline,' b'supports ecb, cbc, cfb-8 and cfb-1 further it is very' b'reasonable priced as opposed to other high-end des chips. call' b'newbridge microsystems, ottawa, there are no' b'import/export issues with canada and the us). if you require custom' b'des or public key ics then timestep engineering developed' b"newbridge's crypto chips and ics for other commercial and" b'educational establishments. they can be reached at b'' b'* can des be used to protect classified information?' b'' b'des is not intended to protect classified data. fips says:' b'"this standard will be used by federal departments and agencies for' b'the cryptographic protection of computer data when the following' b'conditions apply: cryptographic protection is required; and' b'2. the data is not classified according to the national security act' b'of as amended, or the atomic energy act of as amended."' b'' b'* what are "ecb", "cbc", "cfb", and "ofb" encryption?' b'' b'these are methods for using block ciphers, such as des, to encrypt' b'messages, files, and blocks of data, known as "modes of operation."' b'four "modes of operation" are defined in fips december b'and also in ansi x3.106-1983.' b'' b'fips specifies that when 7-bit ascii data is sent in octets, the' b'unused most-significant bit is to be set to b'fips also specifies the padding for short blocks.' b'' b'the four des modes of operation are:' b'electronic code book (ecb),' b'cipher block chaining (cbc),' b'k-bit cipher feedback (cfb), and' b'k-bit output feedback (ofb).' b'' b'these methods are explained below in a c-language-like notation.' b'' b'some symbols:' b'' b"p[n]\tthe n'th block of plaintext, input to encryption, output from" b'decryption. size of block determined by the mode.' b'' b"c[n]\tthe n'th block of ciphertext, output from encryption, input to" b'decryption. size of block determined by the mode.' b'' b'e(m)\tthe des encryption function, performed on 64-bit block m, using' b'the 16-key schedule derived from some 56-bit key.' b'' b'd(m)\tthe des decryption function, performed on 64-bit block m, using' b'the same key schedule as in e(m), except that the keys' b'in the schedule are used in the opposite order as in e(m).' b'' b'iv\ta 64-bit "initialization vector", a secret value which, along with' b'the key, is shared by both encryptor and decryptor.' b'' b"i[n]\tthe n'th value of a 64-bit variable, used in some modes." b"r[n]\tthe n'th value of a 64-bit variable, used in some modes." b'' b'lsb(m,k) the k least significant (right-most) bits of m.' b'e.g. m k) b'' b'msb(m,k) the k most significant (left-most) bits of m.' b'e.g. (m (64-k)) k) b'' b'= operators as defined in the c langage.' b'' b'' b'electronic code book (ecb):' b'' b'p[n] and c[n] are each 64-bits long.' b'' b'encryption:\t\t\tdecryption:' b'c[n] e(p[n])\t\tp[n] d(c[n])' b'' b'' b'cipher block chaining (cbc):' b'' b'p[n] and c[n] are each 64-bits long.' b'' b'encryption:\t\t\tdecryption:' b'c[0] e(p[0]^iv)\t\tp[0] d(c[0])^iv' b'(n0)\t c[n] e(p[n]^c[n-1])\t\tp[n] d(c[n])^c[n-1]' b'' b'' b'k-bit cipher feedback (cfb):' b'' b'p[n] and c[n] are each k bits long, k b'' b'encryption:\t\t\tdecryption:' b'i[0] iv\t\t\ti[0] iv' b'(n0)\t i[n] i[n-1]<<k c[n-1]\ti[n] i[n-1]<<k c[n-1]' b'(all n) r[n] msb(e(i[n]),k)\t\tr[n] msb(e(i[n]),k)' b'(all n) c[n] p[n]^r[n]\t\tp[n] c[n]^r[n]' b'' b'note that for k==64, this reduces to:' b'' b'i[0] iv\t\t\ti[0] iv' b'(n0)\t i[n] c[n-1]\t\t\ti[n] c[n-1]' b'(all n) r[n] e(i[n])\t\tr[n] e(i[n])' b'(all n) c[n] p[n]^r[n]\t\tp[n] c[n]^r[n]' b'' b'cfb notes: since i[n] depends only on the plain or cipher text from the' b'previous operation, the e() function can be performed in parallel with' b'the reception of the text with which it is used.' b'' b'' b'k-bit output feedback (ofb):' b'' b'p[n] and c[n] are each k bits long, k b'' b'encryption:\t\t\tdecryption:' b'i[0] iv\t\t\ti[0] iv' b'(n0)\t i[n] i[n-1]<<k r[n-1]\ti[n] i[n-1]<<k r[n-1]' b'(all n) r[n] msb(e(i[n]),k)\t\tr[n] msb(e(i[n]),k)' b'(all n) c[n] p[n]^r[n]\t\tp[n] c[n]^r[n]' b'' b'note that for k==64, this reduces to:' b'' b'i[0] iv\t\t\ti[0] iv' b'(n0)\t i[n] r[n-1]\t\t\ti[n] r[n-1]' b'(all n) r[n] e(i[n])\t\tr[n] e(i[n])' b'(all n) c[n] p[n]^r[n]\t\tp[n] c[n]^r[n]' b'' b'ofb notes: encryption and decryption are identical. since i[n] is' b'independent of p and c, the e() function can be performed in advance of' b'the receipt of the plain/cipher text with which it is to be used.' b'' b'' b'additional notes on des "modes of operation":' b'' b'ecb and cbc use e() to encrypt and d() to decrypt, but the feedback modes' b'use e() to both encrypt and decrypt. this disproves the erroneous claim' b'that systems which feature e() but not d() cannot be used for data' b'confidentiality, and therefore are not subject to export controls.' 