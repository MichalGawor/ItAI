b'' b'archive-name: ripem/attacks' b'last-update: mar b'' b'some possible attacks on ripem' b'------------------------------' b'' b'this is a living list of potential weaknesses to keep your eyes open' b'for when using ripem for secure electronic mail. it does not go into' b'great detail, and is almost certainly not exhaustive. obviously, many' b'of the weaknesses are weaknesses of cryptographically secured mail in' b'general, and will pertain to secure mail programs other than ripem.' b'is posted monthly to a variety of news groups; followups pertaining' b'specifically to ripem should go to alt.security.ripem.' b'' b'cryptanalysis attacks' b'---------------------' b'' b'- breaking rsa would allow an attacker to find out your private key,' b'in which case he could read any mail encrypted to you and sign' b'messages with your private key.' b'' b'rsa is generally believed to be resistant to all standard' b'cryptanalytic techniques. even a standard key (about bits with' b'ripem) is long enough to render this impractical, barring a' b'huge investment in hardware or a breakthrough in factoring.' b'' b'- breaking des would allow an attacker to read any given message,' b'since the message itself is encrypted with des. it would not allow' b'an attacker to claim to be you.' b'' b'des has only bits in its key, and thus could conceivably be' b'compromised by brute force with sufficient hardware, but few agencies' b'have such money to devote to simply read one message. since each' b'message has a different des key, the work for each message would' b'remain high.' b'' b'key management attacks' b'----------------------' b'' b'- stealing your private key would allow the same benefits as breaking' b'rsa. to safeguard it, it is encrypted with a des key which is derived' b'from a passphrase you type in. however, if an attacker can get a copy' b'of your private keyfile and your passphrase (by snooping network' b'packets, tapping lines, or whatever) he could break the whole scheme.' b'' b'the main risk is that of transferring either the passphrase or the' b"private key file across an untrusted link. so don't do that. run" b'ripem on a trusted machine, preferably one sitting right in front of' b'you. ideally, your own machine in your own home (or maybe office)' b'which nobody else has physical access to.' b'' b'- fooling you into accepting a bogus public key for someone else could' b'allow an opponent to deceive you into sending secret messages to him' b'rather than to the real recipient. if the enemy can fool your' b'intended recipient as well, he could re-encrypt the messages with' b'the other bogus public key and pass them along.' b'' b'it is important to get the proper public keys of other people.' b'the most common mechanism for this is finger; assuming the opponent' b'has not compromised routers or daemons or such, finger can be' b'given a fair amount of trust. the strongest method of key' b'authentication is to exchange keys in person; however, this is' b'not always practical. having other people "vouch for you" by' b'signing a statement containing your key is possible, although' b"ripem doesn't have features for doing this as automatically as" b'pgp. ripem does generate and check md5 fingerprints of public keys' b'in the key files; they may be exchanged via a separate channel for' b'authentication.' b'' b'playback attacks' b'----------------' b'' b'- even if an opponent cannot break the cryptography, an opponent could' b'still cause difficulties. for example, suppose you send a message' b'with mic-only (a pem mode which does not provide disclosure protection)' b'to alice which says "ok, let\'s do that." your opponent intercepts' b'it, and now resends it to bob, who now has a message which is' b'authenticated as from you telling him to do that. of course, he may' b'interpret it in an entirely different context. or your opponent' b'could transmit the same message to the same recipient much later,' b'figuring it would be seen differently at a later time. or the' b'opponent could change the originator-name: to himself, register' b'your public key as his, and send a message hoping the recipient' b'will send him return mail indicating (perhaps even quoting!) the' b'unknown message.' b'' b'to defeat playback attacks, the plaintext of each message should' b'include some indication of the sender and recipient, and a unique' b'identifier (typically the date). a good front-end script for ripem' b'should do this automatically (imho). as a recipient, you should be' b'sure that the originator-name: header and the sender indicated within' b'the plaintext are the same, that you really are a recipient, and that' b'the message is not an old one. some this also can and should be' b'automated. the author of this faq has made a modest attempt at' b'automating the process of generating and checking encapsulated' b'headers; the programs are included in the standard distribution in' b'the utils directory.' b'' b'local attacks' b'-------------' b'' b'- clearly, the security of ripem cannot be greater than the security of' b'the machine where the encryption is performed. for example, under' b'unix, a super-user could manage to get at your encrypted mail,' b'although it would take some planning and effort to do something like' b'replace the ripem executable with a trojan horse or to get a copy of' b"the plaintext, depending how it's stored." b'' b'in addition, the link between you and the machine running ripem is' b'an extension of that. if you decrypt with ripem on a remote machine' b'which you are connected to via network (or, worse yet, modem), an' b'eavesdropper could see the plaintext (and probably also your' b'passphrase.)' b'' b'ripem should only be executed on systems you trust, obviously. in' b'the extreme case, ripem should only be used on your own machine,' b'which you have total control over and which nobody else has access' b'to, which has only carefully examined software known to be free of' b"viruses, and so on. however, there's a very real trade-off between" b'convenience and security here.' b'' b'a more moderately cautious user might use ripem on a unix workstation' b'where other people have access (even root access), but increase' b'security by keeping private keys and the (statically linked, of' b'course) executable on a floppy disk.' b'' b'some people will keep ripem on a multi-user system, but when dialing' b'in over an insecure line, they will download the message to their' b'own system and perform the ripem decryption there. however, the' b'security provided by such a mechanism is somewhat illusory; since' b"you presumably type your cleartext password to log in, you've just" b'given away the store, since the attacker can now log in as you and' b'install traps in your account to steal your private key next time' b'you use it from a less insecure line. this will likely remain the' b'situation as long as most systems use the rather quaint mechanism of' b'cleartext password authentication.' b'' b'i find it nice to put a brief statement of how carefully i manage my' b'security arrangement in my .plan next to my public key, so that' b'potential correspondents can be aware what level of precautions are' b'in place. some people use two keys, a short one which is not' b'carefully managed for ordinary use and a longer one which is treated' b'with greater care for critical correspondence.' b'' b'untrusted partner attacks' b'-------------------------' b'' b"- ripem's encryption will ensure that only a person with the private key" b'corresponding to the public key used to encrypt the data may read the' b'traffic. however, once someone with that key gets the message, she' b'may always make whatever kind of transformations she wishes. there' b'exist no cryptographic barriers to a recipient, say, taking an' b'encrypted message and converting it to a mic-only message, signed by' b'you and readable by anyone, although ripem does not provide this' b'functionality. indeed, the latest pem draft i have seen specifically' b'states that such transformations should be possible to allow' b'forwarding functions to work.' b'' b'including the recipients in the plaintext, as mentioned above, will' b'make it possible for recipients of a redistributed message to be aware' b'of its original nature. naturally, the security of the cryptography' b'can never be greater than the security of the people using it.' 