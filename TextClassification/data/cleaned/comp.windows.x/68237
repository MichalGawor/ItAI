b'' b'' b'i can also live with a utility that converts postscript to plain' b'text, perferably retaining page counts so that i know how many pages' b'the original document contains.' b'' b'' b'well, i know of one hack to sort of do this conversion. first' b'get ghostscript and check out the gs_2asc.ps file that comes with it.' b'it prints out some information about where each text string goes on the' b"page, and maintains page counts. i've written a little c program to" b'massage the output of gs -dnodisplay gs_2asc.ps somewhat, so that you' b'can get all the ascii strings in the document. no guarantees that it' b"won't break up words/sentences, though i've used it with varying" b'degrees of success. anyways, try this out, it may do what you want.' b'' b'/*' b'* massager: a filter for use with gs; does crude postscript-ascii conversion' b'*' b'* usage:' b'*\tcat file.ps gs -dnodisplay gs_2asc.ps massager' b'*' b'* i print a <ctrl-l after each new page.' b'*' b'* put the following source into massager.c and compile it:' b'*/' b'' b'#include <stdio.h' b'#include <string.h' b'' b'main()' b'{' b'char\tline[1000], *p;' b'' b'while (fgets(line, sizeof(line), stdin) null)' b"if (line[0] 'p')" b'printf("\\f\\n");' b"else if (line[0] 's' line[1] b"if ((p strrchr(line, null)" b'continue;' b"*p b"if ((p strchr(line, null)" b'continue;' b'for (p++; *p; p++)' b"if (*p (p[1] p[1] b'putchar(*p);' b"putchar('\\n');" b'}' b'' b'return(0);' b'}' b'' b'--------------------------------------------------------------------------------' 