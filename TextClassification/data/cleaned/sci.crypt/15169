b'' b'this came up because i decided to configure up mit-magic-cookie-1 security' b'for x11r5. for this to work you need to stick some bits that an intruder' b"can't guess in a file (readable only by you) which x client applications" b'read. they pass the bits back to the server when they want to establish a' b'connection.' b'' b'...' b'what i settled on was grabbing a bunch of traffic off the network.' b'basically, i ran' b'' b'\tetherfind -u -x greater 0|compress' b'' b'and skipped over 10k of output, then grabbed my bits. as best i can tell,' b'these are bits that can be expected to be reasonably uniformly distributed,' b'and quite unguessable by an intruder.' b'' b'for your application, what you can do is to encrypt the real-time clock' b'value with a secret key.' b'' b'for a good discussion of cryptographically "good" random number' b'generators, check out the draft-ietf-security-randomness-00.txt' b'internet draft, available at your local friendly internet drafts' b'repository.' b'' b'a reasonably source of randomness is the output of a cryptographic' b'hash function (e.g., md5), when fed with a large amount of' b'more-or-less random data. for example, running md5 on /dev/mem is a' b'slow, but random enough, source of random bits; there are bound to be' b'128 bits of entropy in the tens (or hundreds) of megabytes of data in' b"a modern workstation's memory, as a fair amount of them are system" b'timers, i/o buffers, etc.' b'' b'/ji' 