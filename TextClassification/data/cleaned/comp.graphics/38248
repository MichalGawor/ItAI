b'' b'' b'i am looking for an algorithm to determine if a given point is bound by a' b'polygon. does anyone have any such code or a reference to book containing' b'information on the subject b'' b"well, it's been a while since this was discussed so i take the liberty of" b'reprinting (without permission, so sue me) eric haines reprint of the very' b'interesting discussion of this topic...' b'' b'/jonas' b'' b'o o' b'------------------------- x snip snip x b'o o' b'' b'"give a man a fish, and he\'ll eat one day.' b'give a man a fishing rod, and he\'ll laze around fishing and never do anything."' b'' b'with that in mind, i reprint (without permission, so sue me) relevant' b'information posted some years ago on this very problem. note the early use of' b"postscript technology, predating many of this year's papers listed in the" b'april 1st siggraph program announcement posted here a few days ago.' b'' b'-- eric' b'' b'' b'intersection between a line and a polygon (undecidable??),' b'by dave baraff, tom duff' b'' b'newsgroups: comp.graphics' b'keywords: p, np, jordan curve separation, ursyhon metrization theorem' b'organization: program of computer graphics' b'' b'' b' i need to find a formula/algorithm to determine if a line intersects' b' a polygon. i would prefer a method that would do this in as little' b' time as possible. i need this for use in a forward raytracing' b' program.' b'' b'i think that this is a very difficult problem. to start with, lines and' b'polygons are semi-algebraic sets which both contain uncountable number of' b'points. here are a few off-the-cuff ideas.' b'' b'first, we need to check if the line and the polygon are separated. now, the' b'jordan curve separation theorem says that the polygon divides the plane into' b'exactly two open (and thus non-compact) regions. thus, the line lies' b'completely inside the polygon, the line lies completely outside the polygon,' b'or possibly (but this will rarely happen) the line intersects the polyon.' b'' b'now, the phrasing of this question says "if a line intersects a polygon", so' b'this is a decision problem. one possibility (the decision model approach) is' b'to reduce the question to some other (well known) problem q, and then try to' b'solve q. an answer to q gives an answer to the original decision problem.' b'' b'in recent years, many geometric problems have been successfully modeled in a' b'new language called postscript. (see "postscript language", by adobe systems' b'incorporated, isbn co. b'' b'so, given a line l and a polygon p, we can write a postscript program that' b'draws the line l and the polygon p, and then "outputs" the answer. by' b'"output", we mean the program executes a command called "showpage", which' b'actually prints a page of paper containing the line and the polygon. a quick' b'examination of the paper provides an answer to the reduced problem q, and thus' b'the original problem.' b'' b'there are two small problems with this approach.' b'' b'(1) there is an infinite number of ways to encode l and p into the' b'reduced problem q. so, we will be forced to invoke the axiom of' b"choice (or equivalently, zorn's lemma). but the use of the axiom of" b'choice is not regarded in a very serious light these days.' b'' b'(2) more importantly, the question arises as to whether or not the' b'postscript program q will actually output a piece of paper; or in' b'other words, will it halt?' b'' b'now, postscript is expressive enough to encode everything that a' b'turing machine might do; thus the halting problem (for postscript) is' b'undecidable. it is quite possible that the original problem will turn' b'out to be undecidable.' b'' b'' b"i won't even begin to go into other difficulties, such as aliasing, finite" b'precision and running out of ink, paper or both.' b'' b'a couple of references might be:' b'' b'1. principia mathematica. newton, i. cambridge university press, cambridge,' b"england. (sorry, i don't have an isbn# for this)." b'' b'2. an introduction to automata theory, languages, and computation. hopcroft, j' b'and ulman, j.' b'' b'3. the c programming language. kernighan, b and ritchie, d.' b'' b'4. a tale of two cities. dickens, c.' b'' b'--------' b'' b'summary: overkill.' b'organization: at&t bell laboratories, murray hill nj' b'' b'the situation is not nearly as bleak as baraff suggests (he should know' b"better, he's hung around the labs for long enough). by the well known" b'dobbin-dullman reduction (see j. dullman d. dobbin, j. comp. obfusc.' b'37,ii: pp. lemma 17(a)) line-polygon intersection can be reduced to' b'hamiltonian circuit, without(!) the use of grobner bases, so lpi (to coin an' b'acronym) is probably only np-complete. besides, turing-completeness will no' b'longer be a problem once our cray-3 is delivered, since it will be able to' b'complete an infinite loop in milliseconds (with scatter-gather.)' b'' b'--------' b'' b'' b"well, sure its no worse than np-complete, but that's only if you restrict" b'yourself to the case where the line satisfies a lipschitz condition on its' b"second derivative. (i think there's an siggraph paper from caltech that" b'deals with this).' b'' b'--' b'------------------------------------------------------------------------------' b'dept. of electrical engineering\t voice: b'university of linkoping, sweden fax 