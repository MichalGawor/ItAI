b'' b'i got a number of requests for code.' b'so, here it is.' b'its written in 80x86 asm.' b'borland tasm will do.' b'' b'tasm lga.asm' b'tlink /t lga.asm' b'' b'' b'the code:' b'' b';----------------------------------------------------------------------' b'; lga ncryption' b'; (c) by nick nassuphis' b';----------------------------------------------------------------------' b'' b'code\tsegment' b'assume\tcs:code, ds:code' b'' b'org\t100h' b'' b'start:' b'jmp\tbegin' b'' b';----------------------------------------------------------------------' b';' b'; gas particle assigment:' b';' b'; bit particle moving east' b'; bit particle moving west' b'; bit particle moving north' b'; bit particle moving south' b';' b'; bit particle moving east' b'; bit particle moving west' b'; bit particle moving north' b'; bit particle moving south' b';' b';' b'; collisiong rules:' b';' b'; gas rules' b';' b'; if (e w) and !(n s) then (e,w)-(n,s)' b'; if (n s) and !(e w) then (n,s)-(e,w)' b';' b'; for nibbles:' b';' b'; b'; b';' b'; and for bytes:' b';' b'; b'; b'; b'; b'; b'; b'; b'; b';' b';' b'; reflection rules' b';' b'; just swap bits along directions' b';' b';----------------------------------------------------------------------' b'' b';' b'; this look-up table implements two particle collisions' b'; for the hpp lattice gas' b';' b'hpprule:' b'db 00000000b b'db 00000001b b'db 00000010b b'db 00001100b b'db 00000100b b'db 00000101b b'db 00000110b b'db 00000111b b'db 00001000b b'db 00001001b b'db 00001010b b'db 00001011b b'db 00000011b b'db 00001101b b'db 00001110b b'db 00001111b b'db 00010000b b'db 00010001b b'db 00010010b b'db 00011100b b'db 00010100b b'db 00010101b b'db 00010110b b'db 00010111b b'db 00011000b b'db 00011001b b'db 00011010b b'db 00011011b b'db 00010011b b'db 00011101b b'db 00011110b b'db 00011111b b'db 00100000b b'db 00100001b b'db 00100010b b'db 00101100b b'db 00100100b b'db 00100101b b'db 00100110b b'db 00100111b b'db 00101000b b'db 00101001b b'db 00101010b b'db 00101011b b'db 00100011b b'db 00101101b b'db 00101110b b'db 00101111b b'db 11000000b b'db 11000001b b'db 11000010b b'db 11001100b b'db 11000100b b'db 11000101b b'db 11000110b b'db 11000111b b'db 11001000b b'db 11001001b b'db 11001010b b'db 11001011b b'db 11000011b b'db 11001101b b'db 11001110b b'db 11001111b b'db 01000000b b'db 01000001b b'db 01000010b b'db 01001100b b'db 01000100b b'db 01000101b b'db 01000110b b'db 01000111b b'db 01001000b b'db 01001001b b'db 01001010b b'db 01001011b b'db 01000011b b'db 01001101b b'db 01001110b b'db 01001111b b'db 01010000b b'db 01010001b b'db 01010010b b'db 01011100b b'db 01010100b b'db 01010101b b'db 01010110b b'db 01010111b b'db 01011000b b'db 01011001b b'db 01011010b b'db 01011011b b'db 01010011b b'db 01011101b b'db 01011110b b'db 01011111b b'db 01100000b b'db 01100001b b'db 01100010b b'db 01101100b b'db 01100100b b'db 01100101b b'db 01100110b b'db 01100111b b'db 01101000b b'db 01101001b b'db 01101010b b'db 01101011b b'db 01100011b b'db 01101101b b'db 01101110b b'db 01101111b b'db 01110000b b'db 01110001b b'db 01110010b b'db 01111100b b'db 01110100b b'db 01110101b b'db 01110110b b'db 01110111b b'db 01111000b b'db 01111001b b'db 01111010b b'db 01111011b b'db 01110011b b'db 01111101b b'db 01111110b b'db 01111111b b'db 10000000b b'db 10000001b b'db 10000010b b'db 10001100b b'db 10000100b b'db 10000101b b'db 10000110b b'db 10000111b b'db 10001000b b'db 10001001b b'db 10001010b b'db 10001011b b'db 10000011b b'db 10001101b b'db 10001110b b'db 10001111b b'db 10010000b b'db 10010001b b'db 10010010b b'db 10011100b b'db 10010100b b'db 10010101b b'db 10010110b b'db 10010111b b'db 10011000b b'db 10011001b b'db 10011010b b'db 10011011b b'db 10010011b b'db 10011101b b'db 10011110b b'db 10011111b b'db 10100000b b'db 10100001b b'db 10100010b b'db 10101100b b'db 10100100b b'db 10100101b b'db 10100110b b'db 10100111b b'db 10101000b b'db 10101001b b'db 10101010b b'db 10101011b b'db 10100011b b'db 10101101b b'db 10101110b b'db 10101111b b'db 10110000b b'db 10110001b b'db 10110010b b'db 10111100b b'db 10110100b b'db 10110101b b'db 10110110b b'db 10110111b b'db 10111000b b'db 10111001b b'db 10111010b b'db 10111011b b'db 10110011b b'db 10111101b b'db 10111110b b'db 10111111b b'db 00110000b b'db 00110001b b'db 00110010b b'db 00111100b b'db 00110100b b'db 00110101b b'db 00110110b b'db 00110111b b'db 00111000b b'db 00111001b b'db 00111010b b'db 00111011b b'db 00110011b b'db 00111101b b'db 00111110b b'db 00111111b b'db 11010000b b'db 11010001b b'db 11010010b b'db 11011100b b'db 11010100b b'db 11010101b b'db 11010110b b'db 11010111b b'db 11011000b b'db 11011001b b'db 11011010b b'db 11011011b b'db 11010011b b'db 11011101b b'db 11011110b b'db 11011111b b'db 11100000b b'db 11100001b b'db 11100010b b'db 11101100b b'db 11100100b b'db 11100101b b'db 11100110b b'db 11100111b b'db 11101000b b'db 11101001b b'db 11101010b b'db 11101011b b'db 11100011b b'db 11101101b b'db 11101110b b'db 11101111b b'db 11110000b b'db 11110001b b'db 11110010b b'db 11111100b b'db 11110100b b'db 11110101b b'db 11110110b b'db 11110111b b'db 11111000b b'db 11111001b b'db 11111010b b'db 11111011b b'db 11110011b b'db 11111101b b'db 11111110b b'db 11111111b b'' b';' b'; this rule implements the velocity-reversal needed to' b'; run the gas evolution in reverse. its called a wallrule' b'; because its the same as is all particles hit a wall' b'; head on.' b';' b'wallrule:' b'db 00000000b b'db 00000010b b'db 00000001b b'db 00001100b b'db 00001000b b'db 00001010b b'db 00001001b b'db 00001011b b'db 00000100b b'db 00000110b b'db 00000101b b'db 00000111b b'db 00000011b b'db 00001110b b'db 00001101b b'db 00001111b b'db 00100000b b'db 00100010b b'db 00100001b b'db 00101100b b'db 00101000b b'db 00101010b b'db 00101001b b'db 00101011b b'db 00100100b b'db 00100110b b'db 00100101b b'db 00100111b b'db 00100011b b'db 00101110b b'db 00101101b b'db 00101111b b'db 00010000b b'db 00010010b b'db 00010001b b'db 00011100b b'db 00011000b b'db 00011010b b'db 00011001b b'db 00011011b b'db 00010100b b'db 00010110b b'db 00010101b b'db 00010111b b'db 00010011b b'db 00011110b b'db 00011101b b'db 00011111b b'db 11000000b b'db 11000010b b'db 11000001b b'db 11001100b b'db 11001000b b'db 11001010b b'db 11001001b b'db 11001011b b'db 11000100b b'db 11000110b b'db 11000101b b'db 11000111b b'db 11000011b b'db 11001110b b'db 11001101b b'db 11001111b b'db 10000000b b'db 10000010b b'db 10000001b b'db 10001100b b'db 10001000b b'db 10001010b b'db 10001001b b'db 10001011b b'db 10000100b b'db 10000110b b'db 10000101b b'db 10000111b b'db 10000011b b'db 10001110b b'db 10001101b b'db 10001111b b'db 10100000b b'db 10100010b b'db 10100001b b'db 10101100b b'db 10101000b b'db 10101010b b'db 10101001b b'db 10101011b b'db 10100100b b'db 10100110b b'db 10100101b b'db 10100111b b'db 10100011b b'db 10101110b b'db 10101101b b'db 10101111b b'db 10010000b b'db 10010010b b'db 10010001b b'db 10011100b b'db 10011000b b'db 10011010b b'db 10011001b b'db 10011011b b'db 10010100b b'db 10010110b b'db 10010101b b'db 10010111b b'db 10010011b b'db 10011110b b'db 10011101b b'db 10011111b b'db 10110000b b'db 10110010b b'db 10110001b b'db 10111100b b'db 10111000b b'db 10111010b b'db 10111001b b'db 10111011b b'db 10110100b b'db 10110110b b'db 10110101b b'db 10110111b b'db 10110011b b'db 10111110b b'db 10111101b b'db 10111111b b'db 01000000b b'db 01000010b b'db 01000001b b'db 01001100b b'db 01001000b b'db 01001010b b'db 01001001b b'db 01001011b b'db 01000100b b'db 01000110b b'db 01000101b b'db 01000111b b'db 01000011b b'db 01001110b b'db 01001101b b'db 01001111b b'db 01100000b b'db 01100010b b'db 01100001b b'db 01101100b b'db 01101000b b'db 01101010b b'db 01101001b b'db 01101011b b'db 01100100b b'db 01100110b b'db 01100101b b'db 01100111b b'db 01100011b b'db 01101110b b'db 01101101b b'db 01101111b b'db 01010000b b'db 01010010b b'db 01010001b b'db 01011100b b'db 01011000b b'db 01011010b b'db 01011001b b'db 01011011b b'db 01010100b b'db 01010110b b'db 01010101b b'db 01010111b b'db 01010011b b'db 01011110b b'db 01011101b b'db 01011111b b'db 01110000b b'db 01110010b b'db 01110001b b'db 01111100b b'db 01111000b b'db 01111010b b'db 01111001b b'db 01111011b b'db 01110100b b'db 01110110b b'db 01110101b b'db 01110111b b'db 01110011b b'db 01111110b b'db 01111101b b'db 01111111b b'db 00110000b b'db 00110010b b'db 00110001b b'db 00111100b b'db 00111000b b'db 00111010b b'db 00111001b b'db 00111011b b'db 00110100b b'db 00110110b b'db 00110101b b'db 00110111b b'db 00110011b b'db 00111110b b'db 00111101b b'db 00111111b b'db 11100000b b'db 11100010b b'db 11100001b b'db 11101100b b'db 11101000b b'db 11101010b b'db 11101001b b'db 11101011b b'db 11100100b b'db 11100110b b'db 11100101b b'db 11100111b b'db 11100011b b'db 11101110b b'db 11101101b b'db 11101111b b'db 11010000b b'db 11010010b b'db 11010001b b'db 11011100b b'db 11011000b b'db 11011010b b'db 11011001b b'db 11011011b b'db 11010100b b'db 11010110b b'db 11010101b b'db 11010111b b'db 11010011b b'db 11011110b b'db 11011101b b'db 11011111b b'db 11110000b b'db 11110010b b'db 11110001b b'db 11111100b b'db 11111000b b'db 11111010b b'db 11111001b b'db 11111011b b'db 11110100b b'db 11110110b b'db 11110101b b'db 11110111b b'db 11110011b b'db 11111110b b'db 11111101b b'db 11111111b b'' b'' b'maxbyte\tequ\t55' b'lineno\tequ\t23' b'' b'srcptr\tdw\toffset buffer1' b'desptr\tdw\toffset buffer2' b'' b'savebuff:' b'db\tmaxbyte*(lineno+1) dup(0)' b'' b'buffer1:' b'db\tmaxbyte*(lineno+1) dup(0)' b'db\t256 dup(0)' b'' b'buffer2:' b'db\tmaxbyte*(lineno+1) dup(0)' b'db\t256 dup(0)' b'' b';----------------------------------------------------------------------' b';' b';' b';' b';----------------------------------------------------------------------' b'' b'data:' b'db\t" b'db\t" b'db\t" b'db\t" this is a test for a lattice gas based encryption b'db\t" algorithm. the data is encoded as particles of a b'db\t" digital gas, whose time evolution is then simulated b'db\t" with a cellular-automaton type algorithm. decryption b'db\t" can be achieved by running the simulation in reverse. b'db\t" a thermodynamic argument ensures that even if a single"' b'db\t" bit is flipped, no decryption of the data is possible b'db\t" b'db\t" after the gas is let to evolve for timesteps, b'db\t" one can either run the reverse evolution by pressing b'db\t" space, or flip a bit and then run by pressing b'db\t" b'db\t" for a cryptographic application, the key would consist"' b'db\t" of the number of time steps and the time and location b'db\t" of specific bit inversions. b'db\t" b'db\t" b'db\t" b'db\t" b'db\t" b'' b';' b'; fill the gas with a piece of code' b';' b'initgas:' b'mov\tdi,cs:srcptr' b'mov\tsi,offset data' b'' b'mov\tcx,lineno' b'ig0:' b'push\tdi' b'push\tcx' b'mov\tcx,maxbyte' b'ig1:' b'mov\tal,cs:[si]' b'mov\tcs:[di],al' b'inc\tsi' b'inc\tdi' b'loop\tig1' b'pop\tcx' b'pop\tdi' b'add\tdi,maxbyte' b'loop\tig0' b'mov\tsi,cs:srcptr' b'mov\tdi,offset initgas' b'mov\tcx,maxbyte*3' b'mov\tal,0' b'lg2:' b'mov\tbyte ptr cs:[si],al' b'not\tal' b'inc\tsi' b'loop\tlg2' b'ret' b'' b';----------------------------------------------------------------------' b';' b'; display gas molecules bouncing around' b';' b'showgas:' b'push\tes' b'push\tsi' b'push\tdi' b'push\tcx' b'push\tbx' b'' b'mov\tax,0b800h' b'mov\tes,ax' b'mov\tsi,cs:srcptr' b'mov\tdi,160*2+10*2' b'mov\tcx,lineno-3' b'add\tsi,maxbyte*3' b'sg1:' b'push\tcx' b'push\tdi' b'' b'mov\tcx,maxbyte' b'sg2:' b'mov\tal,cs:[si]' b'mov\tbyte ptr es:[di],al' b'inc\tsi' b'add\tdi,2' b'dec\tcx' b'jnz\tsg2' b'' b'pop\tdi' b'pop\tcx' b'add\tdi,160' b'loop\tsg1' b'' b'pop\tbx' b'pop\tcx' b'pop\tdi' b'pop\tsi' b'pop\tes' b'ret' b'' b';----------------------------------------------------------------------' b';' b'; cs:si \t-\tsourse of data' b'; cs:di\t\t-\tdestination of data' b';' b'scanonemiddleline:' b';' b'; first byte is a special case because of warparound' b';' b'mov\tbl,0\t\t\t; al is the "assembled" byte.' b'mov\tbh,cs:[si-maxbyte]\t; north is one line "up" (lower)' b'and\tbh,10001000b\t\t; and at bits and b'or\tbl,bh\t\t\t; or them into the assembled byte' b'mov\tbh,cs:[si+maxbyte]\t; south is one line "down" (higher)' b'and\tbh,01000100b\t\t; and at bits and b'or\tbl,bh\t\t\t; place the stuff into al' b'mov\tbh,cs:[si+(maxbyte-1)]\t; west is one byte "left" (lower)' b'and\tbh,00100010b\t\t; and at bits and b'or\tbl,bh' b'mov\tbh,cs:[si+1]\t\t; east is one byte "right" (higher)' b'and\tbh,00010001b\t\t; and at bits and b'or\tbl,bh' b'mov\tbh,0' b'mov\tal,byte ptr cs:[bx offset hpprule]' b'mov\tcs:[di],al' b'inc\tsi' b'inc\tdi' b';' b'; middle bytes can be handled in a loop' b';' b'mov\tcx,maxbyte-2' b'sol1:' b'mov\tbl,0\t\t\t; al is the "assembled" byte.' b'mov\tbh,cs:[si-maxbyte]\t; north is one line "up" (lower)' b'and\tbh,10001000b\t\t; and at bits and b'or\tbl,bh\t\t\t; or them into the assembled byte' b'mov\tbh,cs:[si+maxbyte]\t; south is one line "down" (higher)' b'and\tbh,01000100b\t\t; and at bits and b'or\tbl,bh\t\t\t; place the stuff into al' b'mov\tbh,cs:[si-1]\t\t; west is one byte "left" (lower)' b'and\tbh,00100010b\t\t; and at bits and b'or\tbl,bh' b'mov\tbh,cs:[si+1]\t\t; east is one byte "right" (higher)' b'and\tbh,00010001b\t\t; and at bits and b'or\tbl,bh' b'mov\tbh,0' b'mov\tal,byte ptr cs:[bx offset hpprule]' b'mov\tcs:[di],al' b'inc\tsi' b'inc\tdi' b'loop\tsol1' b';' b'; last byte is also special' b';' b'mov\tbl,0\t\t\t; al is the "assembled" byte.' b'mov\tbh,cs:[si-maxbyte]\t; north is one line "up" (lower)' b'and\tbh,10001000b\t\t; and at bits and b'or\tbl,bh\t\t\t; or them into the assembled byte' b'mov\tbh,cs:[si+maxbyte]\t; south is one line "down" (higher)' b'and\tbh,01000100b\t\t; and at bits and b'or\tbl,bh\t\t\t; place the stuff into al' b'mov\tbh,cs:[si-1]\t\t; west is one byte "left" (lower)' b'and\tbh,00100010b\t\t; and at bits and b'or\tbl,bh' b'mov\tbh,cs:[si-(maxbyte-1)]\t; east is one byte "right" (higher)' b'and\tbh,00010001b\t\t; and at bits and b'or\tbl,bh' b'mov\tbh,0' b'mov\tal,byte ptr cs:[bx offset hpprule]' b'mov\tcs:[di],al' b'inc\tsi' b'inc\tdi' b'ret' b'' b'' b';----------------------------------------------------------------------' b';' b'; cs:si \t-\tsourse of data' b'; cs:di\t\t-\tdestination of data' b';' b'scanfirstline:' b';' b'; first byte is a special case because of warparound' b';' b'mov\tbl,0' b'mov\tbh,cs:[si+maxbyte*(lineno-1)]' b'and\tbh,10001000b\t\t; and at bits and b'or\tbl,bh\t\t\t; or them into the assembled byte' b'mov\tbh,cs:[si+maxbyte]' b'and\tbh,01000100b\t\t; and at bits and b'or\tbl,bh\t\t\t; place the stuff into al' b'mov\tbh,cs:[si+maxbyte-1]\t; west is one byte "left" (lower)' b'and\tbh,00100010b\t\t; and at bits and b'or\tbl,bh' b'mov\tbh,cs:[si+1]\t\t; east is one byte "right" (higher)' b'and\tbh,00010001b\t\t; and at bits and b'or\tbl,bh' b'mov\tbh,0' b'mov\tal,byte ptr cs:[bx offset hpprule]' b'mov\tcs:[di],al' b'inc\tsi' b'inc\tdi' b';' b'; middle bytes can be handled in a loop' b';' b'mov\tcx,maxbyte-2' b'sfl1:' b'mov\tbl,0\t\t\t; al is the "assembled" byte.' b'mov\tbh,cs:[si+maxbyte*(lineno-1)]' b'and\tbh,10001000b\t\t; and at bits and b'or\tbl,bh\t\t\t; or them into the assembled byte' b'mov\tbh,cs:[si+maxbyte]' b'and\tbh,01000100b\t\t; and at bits and b'or\tbl,bh\t\t\t; place the stuff into al' b'mov\tbh,cs:[si-1]\t\t; west is one byte "left" (lower)' b'and\tbh,00100010b\t\t; and at bits and b'or\tbl,bh' b'mov\tbh,cs:[si+1]\t\t; east is one byte "right" (higher)' b'and\tbh,00010001b\t\t; and at bits and b'or\tbl,bh' b'mov\tbh,0' b'mov\tal,byte ptr cs:[bx offset hpprule]' b'mov\tcs:[di],al' b'inc\tsi' b'inc\tdi' b'loop\tsfl1' b';' b'; last byte is also special' b';' b'mov\tbl,0\t\t\t; al is the "assembled" byte.' b'mov\tbh,cs:[si+maxbyte*(lineno-1)]' b'and\tbh,10001000b\t\t; and at bits and b'or\tbl,bh\t\t\t; or them into the assembled byte' b'mov\tbh,cs:[si+maxbyte]' b'and\tbh,01000100b\t\t; and at bits and b'or\tbl,bh\t\t\t; place the stuff into al' b'mov\tbh,cs:[si-1]\t\t; west is one byte "left" (lower)' b'and\tbh,00100010b\t\t; and at bits and b'or\tbl,bh' b'mov\tbh,cs:[si-(maxbyte-1)]\t; east is one byte "right" (higher)' b'and\tbh,00010001b\t\t; and at bits and b'or\tbl,bh' b'mov\tbh,0' b'mov\tal,byte ptr cs:[bx offset hpprule]' b'mov\tcs:[di],al' b'ret' b'' b'' b';----------------------------------------------------------------------' b';' b'; cs:si \t-\tsourse of data' b'; cs:di\t\t-\tdestination of data' b';' b'scanlastline:' b';' b'; first byte is a special case because of warparound' b';' b'mov\tbl,0\t\t\t; al is the "assembled" byte.' b'mov\tbh,cs:[si-maxbyte]' b'and\tbh,10001000b\t\t; and at bits and b'or\tbl,bh\t\t\t; or them into the assembled byte' b'mov\tbh,cs:[si-maxbyte*(lineno-1)]' b'and\tbh,01000100b\t\t; and at bits and b'or\tbl,bh\t\t\t; place the stuff into al' b'mov\tbh,cs:[si+(maxbyte-1)]\t; west is one byte "left" (lower)' b'and\tbh,00100010b\t\t; and at bits and b'or\tbl,bh' b'mov\tbh,cs:[si+1]\t\t; east is one byte "right" (higher)' b'and\tbh,00010001b\t\t; and at bits and b'or\tbl,bh' b'mov\tbh,0' b'mov\tal,byte ptr cs:[bx offset hpprule]' b'mov\tcs:[di],al' b'inc\tsi' b'inc\tdi' b';' b'; middle bytes can be handled in a loop' b';' b'mov\tcx,maxbyte-2' b'sll1:' b'mov\tbl,0\t\t\t; al is the "assembled" byte.' b'mov\tbh,cs:[si-maxbyte]' b'and\tbh,10001000b\t\t; and at bits and b'or\tbl,bh\t\t\t; or them into the assembled byte' b'mov\tbh,cs:[si-maxbyte*(lineno-1)]' b'and\tbh,01000100b\t\t; and at bits and b'or\tbl,bh\t\t\t; place the stuff into al' b'mov\tbh,cs:[si-1]\t\t; west is one byte "left" (lower)' b'and\tbh,00100010b\t\t; and at bits and b'or\tbl,bh' b'mov\tbh,cs:[si+1]\t\t; east is one byte "right" (higher)' b'and\tbh,00010001b\t\t; and at bits and b'or\tbl,bh' b'mov\tbh,0' b'mov\tal,byte ptr cs:[bx offset hpprule]' b'mov\tcs:[di],al' b'inc\tsi' b'inc\tdi' b'loop\tsll1' b';' b'; last byte is also special' b';' b'mov\tbl,0\t\t\t; al is the "assembled" byte.' b'mov\tbh,cs:[si-maxbyte]' b'and\tbh,10001000b\t\t; and at bits and b'or\tbl,bh\t\t\t; or them into the assembled byte' b'mov\tbh,cs:[si-maxbyte*(lineno-1)]' b'and\tbh,01000100b\t\t; and at bits and b'or\tbl,bh\t\t\t; place the stuff into al' b'mov\tbh,cs:[si-1]\t\t; west is one byte "left" (lower)' b'and\tbh,00100010b\t\t; and at bits and b'or\tbl,bh' b'mov\tbh,cs:[si-(maxbyte-1)]\t; east is one byte "right" (higher)' b'and\tbh,00010001b\t\t; and at bits and b'or\tbl,bh' b'mov\tbh,0' b'mov\tal,byte ptr cs:[bx offset hpprule]' b'mov\tcs:[di],al' b'inc\tsi' b'inc\tdi' b'ret' b'' b'' b'' b';----------------------------------------------------------------------' b';' b'; invert all velocities in the gas' b';' b'invertall:' b'push\tbx' b'push\tcx' b'push\tsi' b'mov\tsi,cs:srcptr' b'mov\tbx,0' b'mov\tcx,lineno' b'ia1:' b'push\tcx' b'mov\tcx,maxbyte' b'ia2:' b'mov\tbl,cs:[si]' b'mov\tal,byte ptr cs:[bx (offset wallrule)]' b'mov\tcs:[si],al' b'inc\tsi' b'loop\tia2' b'pop\tcx' b'loop\tia1' b'pop\tsi' b'pop\tcx' b'pop\tbx' b'ret' b'' b';----------------------------------------------------------------------' b';' b';' b'iterateonce:' b'mov\tsi,cs:srcptr' b'mov\tdi,cs:desptr' b'mov\tcs:srcptr,di' b'mov\tcs:desptr,si' b'' b'push\tsi' b'push\tdi' b'call\tscanfirstline' b'pop\tdi' b'pop\tsi' b'add\tsi,maxbyte' b'add\tdi,maxbyte' b'mov\tcx,lineno-2\t\t; dont scan first and last' b'l1:' b'push\tsi' b'push\tdi' b'push\tcx' b'call\tscanonemiddleline' b'pop\tcx' b'pop\tdi' b'pop\tsi' b'add\tsi,maxbyte' b'add\tdi,maxbyte' b'loop\tl1' b'' b'push\tsi' b'push\tdi' b'call\tscanlastline' b'pop\tsi' b'pop\tdi' b'l3:' b'ret' b'' b';----------------------------------------------------------------------' b';' b'; iterate hpp rule cx times' b';' b'iterate:' b'push\tcx' b'call\titerateonce' b'pop\tcx' b'call\tshowgas' b'loop\titerate' b'ret' b'' b';----------------------------------------------------------------------' b';' b'; iterate hpp rule cx times' b';' b'iterateuntil:' b'mov\tsi,0' b'mov\tcx,offset iu4 offset iu3' b'iu00:' b'mov\tal,byte ptr cs:[si offset iu3]' b'xor\tbyte ptr cs:[si offset iu4],al' b'inc\tsi' b'loop\tiu00' b'iu0:' b'call\titerateonce' b'call\tshowgas' b'mov\tsi,cs:srcptr' b'mov\tcx,maxbyte*3' b'mov\tbx,0' b'mov\tah,0' b'mov\tal,255' b'iu1:' b'mov\tbl,byte ptr cs:[si]' b'mov\tdl,byte ptr cs:[bx+wallrule]' b'not\tah' b'xor\tdl,ah' b'and\tal,dl' b'inc\tsi' b'loop\tiu1' b'mov\tsi,0' b'mov\tcx,offset iu4 offset iu3' b'iu2:' b'mov\tah,byte ptr cs:[si+offset iu4]' b'and\tah,al' b'xor\tbyte ptr cs:[si+offset iu3],ah' b'inc\tsi' b'loop\tiu2' b'jmp\tiu3' b'iu3:' b'mov\tax,offset iu0' b'push\tax' b'ret' b'db\t256 dup(90h)' b'iu4:' b'push\tax' b'push\tbx' b'push\tcx' b'push\tdx' b'push\tds' b'' b'mov\tah,9' b'mov\tdx,cs:msgptr' b'int\t21h' b'' b'pop\tds' b'pop\tdx' b'pop\tcx' b'pop\tbx' b'pop\tax' b'ret' b'' b'db\t512 dup(90h)' b'' b'msgptr\tdw\toffset msg' b'msg\tdb\t"this message is printed out by",10,13' b'db\t"code decrypted using data from the lattice",10,13' b'db\t"which was applied to the decoding routine",10,13' b'db\t"after every time step",10,13' b'db\t"the decoding function left the code unchanged",10,13' b'db\t"except after the gas evolution had completelly",10,13' b'db\t"reversed the thermalization",10,13,"$"' b'' b'' b'times\tequ\t16\t\t; repetitions are enough to' b'; "equilibrate" the gas' b'' b'begin:' b'mov\tax,0600h' b'mov\tbh,7' b'mov\tdh,25' b'mov\tdl,80' b'mov\tcx,0' b'int\t10h' b'' b'mov\tah,2' b'mov\tbh,0' b'mov\tdh,24' b'mov\tdl,0' b'int\t10h' b'' b'call\tinitgas' b'call\tshowgas' b'mov\tah,0' b'int\t16h' b'push\tcx' b'mov\tcx,times' b'call\titerate' b'call\tinvertall' b'call\tshowgas' b'mov\tah,0' b'int\t16h' b'cmp\tal,"0"' b'jne\tbegin0' b'mov\tsi,cs:srcptr' b'xor\tbyte ptr cs:[si],10000001b' b'begin0:' b'mov\tcx,times' b'call\titerateuntil' b'call\tinvertall' b'call\tshowgas' b'mov\tax,4c00h' b'int\t21h' b'' b'' b'code\tends' b'end\tstart' b'' 