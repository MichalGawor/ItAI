b'' b'archive-name: xt-faq' b'version: $id: faq-xt,v ware exp b'' b'the x toolkit intrinsics f.a.q' b'a monthly posting' b'' b'' b'this article contains the answers to some frequently asked questions' b'(faq) from comp.windows.x about the x toolkit intrinsics. to submit' b'' b'many faqs, including this one, are available on the archive site' b'rtfm.mit.edu in the directory pub/usenet/news.answers. the name' b'under which a faq is archived appears in the archive-name' b'line at the top of the article. this faq is archived as xt-faq.' b'' b'all code fragments are public domain.' b'' b'contents' b'0. xt glossary' b'1. software versions' b"2. related faq's" b'3. why does my application core dump when i use signals/alarms/cthreads?' b'4. how do i use a different visual than the default?' b'5. which visual should an application use?' b'6. why do only shell widgets have a visual?' b'7. which visual, depth and colormap do shells inherit?' b"8. i've done all the above and i still get a badmatch error. why?" b"9. why doesn't my widget get destroyed when i call xtdestroywidget()?" b'10. how do i exit but still execute the destroycallbacks?' b'11. how do i resize a shell widget?' b"12. why can't xtappaddinput() handle files?" b'13. what good books and magazines are there on xt?' b'14. what widgets are available?' b'15. what alternatives to the intrinsics are there?' b'16. how do i pass a float value to xtsetvalues?' b'17. how do i write a resource converter?' b'18. how do i open multiple displays?' b'19. what changed from r3 to r4 to r5?' b'20. where are the resources loaded from?' b'21. what order are callbacks executed in?' b'22. how do i know if a widget is visible?' b'23. how do i reparent a widget in xt, i.e. xtreparentwidget()?' b'24. why use xtmalloc, xtfree, etc?' b'25. how to debug an xt application?' b"26. why don't xtaddinput(), xtaddtimeout() and xtaddworkproc() work?" b'27. what is and how can i implement drag and drop?' b'' b'----------------------------------------------------------------------' b'0. xt glossary' b'----------------------------------------------------------------------' b'' b'o the xt intrinsics implement an object oriented interface to c code' b'to allow useful graphical components to be created. included with' b'this are classes that provide the base functionality: object,' b'rectobj, core, composite, constraint, shell, overrideshell, wmshell,' b'etc. the terms "xt" and "intrinsics" are used interchangeably,' b'however, they are used very precisely to mean a specific library of the x' b'window system. in particular, it does not include the athena,' b'motif, olit or any other widget set. without further widgets the' b'intrinsics are not especially useful.' b'' b'o a widget refers to a user interface abstraction created via xt. the' b'precise use, is any object that is a subclass of the core class. it' b'is used loosely to refer to anything that is a subclass of the' b'object class although these are more accurately called windowless' b'widgets or gadgets.' b'' b'o xlib is the c interface to the x11 protocol. it is one layer below' b'the xt intrinsics. typically a widget uses relatively few xlib' b'functions because xt provides most such services although an' b'understanding of xlib helps with problems.' b'' b'----------------------------------------------------------------------' b'1. software versions' b'----------------------------------------------------------------------' b'' b'the following are the latest versions of xt based software:' b'_____________________________________________________________' b'software\tversion\t\treleased\tnext expected' b'_____________________________________________________________' b'x11r4\t\tpatch 18\t\t\t(none)' b'x11r5\t\tpatch 21\t12/18/92\t??' b'athena widgets\t(see x11r5)' b'motif\t\t1.2.1\t\t9/92\t\t??' b'olit\t\t??\t\t??\t\t??' b'xtra\t\t2.5\t\t6/15/92\t\t??' b'xw\t\tx11r4\t\t\t\t(none)' b'xcu\t\tx11r5\t\t\t\t(none)' b'fwf\t\t3.4\t\t1/11/92\t\t4/93' b'_____________________________________________________________' b'' b'----------------------------------------------------------------------' b"2. related faq's" b'----------------------------------------------------------------------' b'david b. lewis (uunet!craft!faq) maintains the faq on x. it' b'is posted monthly on comp.windows.x and located on export in contrib/faq.' b'' b'comp.windows.x.' b'' b'to comp.windows.x.motif.' b'' b'comp.windows.x.intrinsics; it is on export in contrib/faq-xt.' b'' b'----------------------------------------------------------------------' b'3. why does my application core dump when i use signals/alarms/cthreads?' b'----------------------------------------------------------------------' b'' b'in brief, xlib, xt and most widget sets have no mutual exclusion for' b'critical sections. any interrupt handler is likely to leave one of' b'the above libraries in an inconsistent state such as all the' b'appropriate flags not yet set, dangling pointers, in the middle of a' b'list traversal, etc. note that the ansi c standard points out that' b'behavior of a signal handler is undefined if the signal handler calls' b'any function other than signal() itself, so this is not a problem' b'specific to xlib and xt; the posix specification mentions other' b'functions which may be called safely but it may not be assumed that' b'these functions are called by xlib or xt functions.' b'' b'the only safe way to deal with signals is to set a flag in the' b'interrupt handler. this flag later needs to be checked either by a' b'work procedure or a timeout callback. it is incorrect to add either' b'of these in the interrupt handler. as another note, it is dangerous' b'to add a work procedure that never finishes. this effectively' b'preempts any work procedures previously added and so they will never' b'be called. another option is to open a pipe, tell the event loop' b'about the read end using xtappaddinput() and then the signal handler' b'can write a byte to the write end of the pipe for each signal.' b'however, this could deadlock your process if the pipe fills up.' b'' b"why don't the intrinsics deal with this problem? primarily because it" b'is supposed to be a portable layer to any hardware and operating' b"system. is that a good enough reason i don't think so." b'' b"note: the article in the x journal and the example in o'reilly" b'volume are in error.' b'' b'----------------------------------------------------------------------' b'4. how do i use a different visual than the default?' b'----------------------------------------------------------------------' b'' b'this requires a more complicated answer than it should. a window has' b'three things that are visual specific the visual, colormap and' b'border pixmap. all widgets have their own colormap and borderpixmap' b'resource; only shell widgets have visual resources (another questions' b'deals with why shells have a visual). the default value of these' b'resources is copyfromparent which does exactly what it says. in the' b'shell widget copyfromparent gets evalulated as defaultvisualofscreen' b'and defaultcolormapofscreen. when any one of the three resources is' b'not properly set, a badmatch error occurs when the window is' b'created. they are not properly set because each of the values depends' b'on the visual being used.' b'' b'how to get this to work? there are two parts to the answer. the' b'first is if you want an application to start with a particular visual' b'and the second is if you want a particular shell within an application' b'to start with a different visual. the second is actually easier' b'because the basic information you need is available. the first is a' b"little harder because you'll need to initialize much of the toolkit" b'yourself in order to determine the needed information.' b'' b'/*' b'* some sample code to start up an application using something other' b'* than the default visual.' b'*' b'* to compile:' b'*\tcc -g visual.c -o visual -lxaw -lxmu -lxt -lxext -lx11 -lm' b'*' b'* to run:' b'*\t./visual -geometry 300x300 -depth -visual staticcolor -fg blue -bg yellow' b'*' b'* you need to move the mouse to get the particular visuals colormap' b'* to install.' b'*/' b'' b'#include <x11/intrinsic.h' b'#include <x11/stringdefs.h' b'#include <x11/shell.h' b'' b'typedef struct' b'{' b'visual\t*visual;' b'int\tdepth;' b'} optionsrec;' b'' b'optionsrec\toptions;' b'' b'xtresource resources[] b'{' b'{"visual", "visual", xtrvisual, sizeof (visual b'xtoffsetof (optionsrec, visual), xtrimmediate, null},' b'{"depth", "depth", xtrint, sizeof (int),' b'xtoffsetof (optionsrec, depth), xtrimmediate, null},' b'};' b'' b'xrmoptiondescrec desc[] b'{' b'{"-visual", "*visual", xrmoptionseparg, null},' b'{"-depth", "*depth", xrmoptionseparg, null}' b'};' b'' b'' b'' b'int' b'main (argc, argv)' b'int\t\targc;' b'char\t\t**argv;' b'{' b'xtappcontext\tapp;\t\t/* the application context b'widget\t\ttop;\t\t/* toplevel widget b'display\t\t*dpy;\t\t/* display b'char\t\t**xargv;\t/* saved argument vector b'int\t\txargc;\t\t/* saved argument count b'colormap\tcolormap;\t/* created colormap b'xvisualinfo\tvinfo;\t\t/* template for find visual b'xvisualinfo\t*vinfo_list;\t/* returned list of visuals b'int\t\tcount;\t\t/* number of matchs (only b'arg\t\targs[10];' b'cardinal\tcnt;' b'char\t\t*name "test";' b'char\t\t*class "test";' b'' b'/*' b'* save the command line arguments' b'*/' b'' b'xargc argc;' b'xargv (char xtmalloc (argc sizeof (char b'bcopy ((char argv, (char xargv, argc sizeof (char b'' b'/*' b'* the following creates a _dummy_ toplevel widget so we can' b'* retrieve the appropriate visual resource.' b'*/' b'cnt b'top xtappinitialize (&app, class, desc, xtnumber (desc), &argc, argv,' b'(string null, args, cnt);' b'dpy xtdisplay (top);' b'cnt b'xtgetapplicationresources (top, &options, resources,' b'xtnumber (resources),' b'args, cnt);' b'cnt b'if (options.visual options.visual defaultvisualofscreen (xtscreen (top)))' b'{' b'xtsetarg (args[cnt], xtnvisual, options.visual); ++cnt;' b'/*' b'* now we create an appropriate colormap. we could' b'* use a default colormap based on the class of the' b'* visual; we could examine some property on the' b'* rootwindow to find the right colormap; we could' b'* do all sorts of things...' b'*/' b'colormap xcreatecolormap (dpy,' b'rootwindowofscreen (xtscreen (top)),' b'options.visual,' b'allocnone);' b'xtsetarg (args[cnt], xtncolormap, colormap); ++cnt;' b'' b'/*' b'* now find some information about the visual.' b'*/' b'vinfo.visualid xvisualidfromvisual (options.visual);' b'vinfo_list xgetvisualinfo (dpy, visualidmask, &vinfo, &count);' b'if (vinfo_list count b'{' b'xtsetarg (args[cnt], xtndepth, vinfo_list[0].depth);' b'++cnt;' b'xfree ((xpointer) vinfo_list);' b'}' b'}' b'xtdestroywidget (top);' b'' b'' b'/*' b'* now create the real toplevel widget.' b'*/' b'xtsetarg (args[cnt], xtnargv, xargv); ++cnt;' b'xtsetarg (args[cnt], xtnargc, xargc); ++cnt;' b'top xtappcreateshell ((char null, class,' b'applicationshellwidgetclass,' b'dpy, args, cnt);' b'' b'/*' b'* display the application and loop handling all events.' b'*/' b'xtrealizewidget (top);' b'xtappmainloop (app);' b'return b'}' b'' b'----------------------------------------------------------------------' b'5. which visual should an application use?' b'----------------------------------------------------------------------' b'' b'this is a point that can be argued about but one opinion is there is' b'no way for an application to know the appropriate visual it has to' b'be specified by the user. if you disagree with this then your' b'application probably falls into the category of always using the' b'default visual or it is hardware specific and expects some particular' b'visual such as 24bit truecolor with an overlayplane extension (or some' b'such).' b'' b'why? no application runs in isolation. depending on the way a server' b'allocates resources i may not always want your application to run in' b'truecolor mode if it is going to mess up my other applications. i may' b'be very upset if it chooses to run in greyscale instead of psuedocolor' b'or just monochrome.' b'' b'as an example, on a low end color sun server there are many different' b'possible visuals: monochrome, entry colormap, static gray, static' b"color, and a truecolor. the sgi iris's offer all the above" b'plus bit truecolor, bit truecolor, an overlay plane.' b'' b'----------------------------------------------------------------------' b'6. why do only shell widgets have a visual?' b'----------------------------------------------------------------------' b'' b'this is strictly by convention. it makes it possible for an arbitrary' b'widget to know that the visual it uses can be found by looking for the' b'shell widget that is its ancestor and obtaining the visual of that' b'shell.' b'' b'a widget can have its own visual resource. if it does, it must have' b'its own realize method to use the visual when it calls' b'xcreatewindow(). you should also make this a resource that can be' b'obtained with xtgetvalues() so other widgets can find it. a' b'reasonable value is probably xtnvisual.' b'' b'----------------------------------------------------------------------' b'7. which visual, depth and colormap do shells inherit?' b'----------------------------------------------------------------------' b'' b'the default value for these resources are set to copyfromparent. this' b'is interpreted as the defaultcolormapofscreen(), defaultdepthofscreen()' b'and the default visual of the screen if the widget has no parent i.e.' b'it is an applicationshellwidgetclass and the root of your widget tree.' b'' b'if the parent of the widget is not null, then the shell copies' b'colormap and depth from its parent and uses copyfromparent as the' b'visual.' b'' b'----------------------------------------------------------------------' b"8. i've done all the above and i still get a badmatch error. why?" b'----------------------------------------------------------------------' b'' b'some resource converters improperly cache references. this was' b'especially true of x11r3 and earlier versions of motif.' b'' b'----------------------------------------------------------------------' b"9. why doesn't my widget get destroyed when i call xtdestroywidget()?" b'----------------------------------------------------------------------' b'' b'see section of the xt specification.' b'' b'it eventually does get destroyed, just not immediately. the' b'intrinsics destroy a widget in a two-phase process. first it and all' b'of its children have a flag set that indicate it is being destroyed.' b'it is then put on a list of widgets to be destroyed. this way any' b'pending x events or further references to that widget can be cleaned' b'up before the memory is actually freed. the second phase is then' b'performed after all callbacks, event handlers, and actions have' b'completed, before checking for the next x event. at this point the' b"list is traversed and each widget's memory is actually free()'d, among" b'other things.' b'' b'as some further caveats/trivia, the widgets may be destroyed if the' b'intrinsics determine that they have no further references to the' b'widgets on the list. if so, then the phase destruction occurs' b'immediately. also, if nested event loops are used, widgets placed on' b'the destroy list before entering the inner event loop are not' b'destroyed until returning to the outer event loop.' b'' b'----------------------------------------------------------------------' b'10. how do i exit but still execute the destroycallbacks?' b'----------------------------------------------------------------------' b'' b'the problem is if a simple and entirely reasonable approach to exiting' b'an application is used, such as calling exit() directly, then a widget' b'may not have a chance to clean up any external state such as open' b'sockets, temporary files, allocated x resources, etc. (this code for' b'simplicity reasons assumes only a single toplevel widget):' b'' b'' b'widget' b'toplevelget (gw)' b'widget\t\tgw;\t\t/* widget to find toplevel b'{' b'widget\t\ttop;' b'' b'for (top gw; xtparent (top); top xtparent (top))' b'/* empty b'return (top);' b'}' b'' b'void' b'exitcallback (gw, closure, call_data)' b'widget\t\tgw;\t\t/* widget b'xtpointer\tclosure;\t/* data the app specified b'xtpointer\tcall_data;\t/* widget specific data b'{' b'widget\t\ttoplevel;' b'' b'toplevel toplevelget (gw);' b'xtunmapwidget (toplevel);\t/* make it disappear quickly b'xtdestroywidget (toplevel);' b'exit b'}' b'' b"one can see that the above code exit's immediately after destroying" b'the toplevel widget. the trouble is the phase destruction may never' b'occur.' b'' b'this works for most widgets and most applications but will not work' b'for those widgets that have any external state. you might think that' b'since it works now it will always work but remember that part of the' b'reason an object oriented approach is used is so one can be ignorant' b'of the implementation details for each widget. which means that the' b'widget may change and someday require that some external state is' b'cleaned up by the destroy callbacks.' b'' b'one alternative is to modify exitcallback() to set a global flag and' b'then test for that flag in a private event loop. however, private' b'event loops are frowned upon because it tends to encourage sloppy, and' b'difficult to maintain practices.' b'' b'try the following code instead.' b'' b'#include <x11/intrinsic.h' b'' b'extern widget toplevelget b'#if needfunctionprototypes' b'widget\t\tgw' b'#endif' b');' b'' b'extern boolean exitworkproc b'#if needfunctionprototypes' b'xtpointer\tclosure' b'#endif' b');' b'' b'extern void exitcallback b'#if needfunctionprototypes' b'widget\t\tgw,' b'xtpointer\tclosure,' b'xtpointer\tcall_data' b'#endif' b');' b'' b'widget' b'toplevelget (gw)' b'widget\t\tgw;\t\t/* widget to find toplevel b'{' b'widget\t\ttop;' b'' b'for (top gw; xtparent (top); top xtparent (top))' b'/* empty b'return (top);' b'}' b'' b'' b'void' b'exitcallback (gw, closure, call_data)' b'widget\t\tgw;\t\t/* widget b'xtpointer\tclosure;\t/* data the app specified b'xtpointer\tcall_data;\t/* widget specific data b'{' b'widget\t\ttoplevel;' b'' b'toplevel toplevelget (gw);' b'xtunmapwidget (toplevel);\t/* make it disappear quickly b'xtdestroywidget (toplevel);' b'xtappaddworkproc (xtwidgettoapplicationcontext (gw),' b'exitworkproc, (xtpointer) null);' b'}' b'' b'boolean' b'exitworkproc (closure)' b'xtpointer\tclosure;' b'{' b'exit b'/*notreached*/' b'}' b'' b'' b'exitcallback() adds a work procedure that will get called when the' b'application is next idle which happens after all the events are' b'processed and the destroy callbacks are executed.' b'' b'----------------------------------------------------------------------' b'11. how do i resize a shell widget?' b'----------------------------------------------------------------------' b'' b"after it is realized, one doesn't resize a shell widget. the proper" b'thing is to resize the currently managed child of the shell widget' b'using xtsetvalues(). the geometry change is then propagated to the' b'shell which asks the window manager which may or may not allow the' b'request. however, the shell must have the resource' b'xtnallowshellresize set to true otherwise it will not even ask the' b'window manager to grant the request and the shell will not resize.' b'' b'to change the position of a shell, use xtsetvalues() on the shell, not' b'the child, and within the limits of the window manager it should be granted.' b'' b'----------------------------------------------------------------------' b"12. why can't xtappaddinput() handle files?" b'----------------------------------------------------------------------' b'' b'it does, however unix semantics for when i/o is ready for a file does' b"not fit most peoples' intuitive model. in unix terms a file" b'descriptor is ready for reading whenever the read() call would not' b'block, ignoring the setting of optional flags that indicate not to' b'block. this works as expected for terminals, sockets and pipes. for' b'a file the read() will always return but the return indicates an eof' b'-- i.e. no more data. the result is the code in the intrinsics always' b'calls the input handler because it always thinks something is about to' b'be read. the culprit is the select() system call or on sysv based' b"os's it is the poll() system call." b'' b'how to get around this on a unix system? the best approach is to use' b'another process to check for available input on the file. use a pipe' b'to connect the application with this other process and pass the file' b'descriptor from the pipe to xtappaddinput(). a suitable program on' b'bsd systems is "tail -f filename".' b'' b"it's rumored that select() on some systems is not _completely_" b'reliable. in particular:' b'' b'- ibm aix this is one where it would work for a while' b'(several thousand times) and then stop until some other' b'event woke it up. this seemed to be the result of a race' b'condition in the kernel. ibm claims to have a fix for this.' b'' b"- pyramid, doesn't work at all." b'' b'- ultrix (and possibly others where pipes are implemented as' b"sockets), wasn't completely broken, but although the writing" b'side wrote in byte blocks the reading side received it' b'all broken up as if it was being put into the pipe a byte at' b'a time. you can waste a lot of time by reading small blocks' b'(get raound it by detecting the situation and having' b'select() ignore the pipe for mseconds by then it had' b'been given the whole block).' b'' b'' b'note that all the above descriptions used unix terminology such as' b'read(), file descriptor, pipes, etc. this is an os dependent area and' b'may not be identical on all systems. however the intrinsic designers' b'felt it was a common enough operation that it should be included with' b"part of the toolkit. why they didn't also deal with signals at this" b"point i don't know." b'' b'----------------------------------------------------------------------' b'13. what good books and magazines are there on xt?' b'----------------------------------------------------------------------' b'' b'i have a favorite that is the definitive reference. to my perspective' b'it offers a reasonable introduction but also goes into the full' b'details of the intrinsics. when i started using it i was already' b'familiar with xt and the concepts behind it, so newcomers may or may' b"not find it useful. i've always found it accurate and complete, which" b'means its a pages.' b'' b'asente, paul j., and swick, ralph r., "x window system toolkit, the' b'complete programmer\'s guide and specification", digital press,' b'1990, isbn order number ey-e757e-dp; and by' b'prentice-hall, isbn also available through dec' b'direct at 1-800-digital.' b'' b'the other book i commonly recomend to novices is:' b'' b'young, doug. "the x window system: applications and programming with' b'xt (motif version)," prentice hall, (isbn b'(isbn b'' b"and of course o'reilly has an entire series of manuals on x and xt." b"o'reilly ordering is in particular, volume is an xt" b'reference done in manual page style. the 3rd edition is extensively' b"overhauled and goes far beyond the mit manual pages. i'm finding it" b'very useful. in particular, the permutted index and references to' b'other manual pages help a great deal in chasing down related' b'information.' b'' b'i read two periodicals, "the x resource" and the "the x journal".' b'these are the only two dealing specifically with x. "the x resource"' b"is published quarterly, by o'reilly, with one of the issues being the" b'mit x consortium technical conference proceedings. there is no' b"advertising. i've found it informative with pretty good depth. for" b'math.utah.edu in ~ftp/pub/tex/bib in tex form and on ftp.uu.net in' b'~ftp/published/oreilly/xresource in ascii form.' b'' b'' b'"the x journal" is a bimonthly trade rag with lots of advertising.' b'the articles are informative and oriented toward a less technical' b"audience. i read it more to see what's going on then with an" b'expectation of learning a great deal (but remember, i represent a' b'fairly small percentage of people). also, they have a pretty good' b'collection of people on the advisory board and as columnists. call' b'(908) b'' b'----------------------------------------------------------------------' b'14. what widgets are available?' b'----------------------------------------------------------------------' b'' b'there are three popular widget sets:' b'' b'athena\t- the set provided with x11. this is sufficient for most' b'purposes but is on the ugly side. recently, a 3d look is' b'available for ftp on export.lcs.mit.edu:/contrib/xaw3d.tar.z.' b'motif\t- from osf available for a license fee and commonly shipped on' b'many workstation vendors platforms (almost everyone but' b'sun). it looks good and works well but personally i think' b'it is poorly implemented.' b'olit\t- the open look intrinsics toolkit is a set of widgets' b"implementing sun's open look specification. developed by" b"at&t. i've never used it so can't comment on its quality." b"i've heard rumours that it is a pain to actually get." b'' b'in addition the following collection of widgets are also available:' b'' b'xtra\t- a library of widgets for sale from graphical software' b'technology it includes bar graph, stacked' b'bar graph, line graph, pie chart, xy plot, hypertext, help,' b"spreadsheet, and data entry form widgets. i've never seen" b"them so i can't comment." b'fwf\t- the free widget foundation is attempting to collect a set of' b'freely available widgets. included are a pixmap editor,' b'filedialog, and a few others. the current set of widgets' b'can be obtained via anonymous ftp from the machine' b'a.cs.uiuc.edu in the file pub/fwf.shar.z.' b'xcu\t- the cornell university widgets from gene dykes. one of the' b'early widget sets released. provides a nice appearance for' b'buttons and has a mini command language. probably not so' b'widely used.' b'xs\t- the sony widget set. this was around during r3 days but' b'seemed to disappear. it looked like it had promise.' b'xw\t- the hp widgets. the precursor to motif. originally written' b'for r3 there exists diffs to get it to work under r4 r5.' b'again, a pretty good widget set but has more or less died.' b'the precursor to this was the xray toolkit which was' b'originally implemented for x10r4 and apparently provided' b'much experience for the designers of xt.' b"xo\t- a widget set i'm working on. it's still primitive but you" b'can give it a try in archive.cis.ohio-state.edu:pub/xo/*' b'' b'the following specialized widgets are also available:' b'' b'tbl\t- implements a tabular layout of widgets. supports motif' b'widgets as children. part of wcl.' b'plots\t- the athena plotting widgets (not the athena widgets).' b'' b'----------------------------------------------------------------------' b'15. what alternatives to the intrinsics are there?' b'----------------------------------------------------------------------' b'' b'__________________________________________' b'name\t\tlanguage\tvendor' b'__________________________________________' b'xview\t\tc\t\tsun' b'oi\t\tc++\t\tparcplace' b'interviews\tc++\t\tstanford' b'tcl/tk\t\tc\t\tsprite.berkeley.edu' b'__________________________________________' b'' b'' b'however much i like c and admire the skill in both designing and' b'implementing the intrinsics, hopefully some alternative will develop' b'in the next years that uses an object oriented language. keep' b'your eyes open and expect some change about the same time a language' b'other than c _starts_ gaining acceptance.' b'' b'----------------------------------------------------------------------' b'16. how do i pass a float value to xtsetvalues?' b'----------------------------------------------------------------------' b'' b'first, what is going wrong is the structure for an arg is (essentially)' b'typdef struct' b'{' b'string\tname;' b'long\tvalue;' b'} arg;' b'' b'and the code:' b'arg\targ;' b'' b'xtsetarg (arg, "name", b'' b'expands to' b'arg\targ;' b'' b'arg.name "name";' b'arg.value b'' b'you can see that with normal c type conversions, the arg.value' b'gets the integer instead of the floating point value when' b'the value is copied into the widget resource, the bit pattern is' b'wildly different than that required for a floating point value. so,' b'how to get around this?' b'' b'the following macro is from the athena widgets document and i am now' b'recomending it over the previous suggestions.' b'' b'#define xtsetfloatarg(arg, n, d) b'if (sizeof(float) sizeof(xtargval)) b'xtsetarg(arg, n, &(d)); b'} else b'xtargval *ld (xtargval *)&(d); b'xtsetarg(arg, n, *ld); b'}' b'' b'' b'----------------------------------------------------------------------' b'17. how do i write a resource converter?' b'----------------------------------------------------------------------' b'' b'' b'the following discussion of resource converters assumes r4 (or r5)' b'intrinsics. resource converters changed between r3 and r4 to allow' b'for destructors and caching of converted values.' b'' b'there are several main types of resource converters:' b'' b'string to data type' b'data type to string' b'data type to data type' b'' b'i) string to data type' b'usually a string to data type converter has a fixed set of strings' b'that will be converted to data type values. this is most often' b'used to map enumerated names to enumerated values:' b'' b'name\t\tvalue' b'"true"\t\t1' b'"false"\t\t0' b'' b'in this case, the string to data type converter needs to compare' b'the resource value to the list of fixed strings. this is most' b'readily accomplished by the use of the "quark" mechanism of the' b'resource manager. the resource value is turned into a quark,' b'which is a unique representation of the string that fits into a' b'single word. then the resource quark is compared against the' b'quarks for the fixed strings representing the enumerated values.' b'' b'if there are many enumerated strings in the converter (or many' b'converters, each with a small number of enumeration strings), then' b'a global initialization routine might be used to turn all the' b'resource strings into quarks. that way, the first time one of' b'these converters is used, the strings will be turned into quarks' b'and held in static variables for use in the next invocation of one' b'of the converters.' b'' b'ii) data type to string' b'this type of converter is slightly easier than the string to data' b"type converters since the use of quarks isn't necessary. instead," b'the data type value is simply converted to a string value,' b'probably by the use of sprintf.' b'' b'data type to string converters are useful for applications that' b'wish to convert an internal data type value into a string so that' b'they can write out a valid resource specification to a file. this' b'mechanism can be used to provide a "snapshot" of application state' b'into a file. this snapshot can be used to restore the program to' b'a known state via the usual x resource database mechanisms.' b'' b'if you are taking the trouble to write a string to data type' b"converter, it isn't much extra effort to write the data type to" b'string converter. writing both at the same time helps to ensure' b'that they are consistent.' b'' b'iii) data type to data type' b'this type of converter is used to convert an existing data type' b'value to another data type. for instance, an x pixel value can be' b'converted to an rgb data type that contains separate fields for' b'red, green and blue.' b'' b'' b'the type signature for a resource converter is as follows:' b'' b'typedef boolean (*xttypeconverter)(display xrmvalueptr, cardinal b'xrmvalueptr, xrmvalueptr, xtpointer b'display *dpy;' b'xrmvalueptr args;' b'cardinal *num_args;' b'xrmvalueptr fromval;' b'xrmvalueptr toval;' b'xtpointer *converter_data;' b'' b'when the converter is invoked, the "fromval" argument points to the source' b'x resource manager value and the "toval" argument points to the' b'destination x resource manager value. the "converter_data" argument' b'is an opaque pointer to some converter-specific data that is specified' b'when the converter is registered. the "args" and "num_args" arguments' b'allow extra information to be passed to the converter when it is' b'invoked. for instance, the pixel to rgb structure converter discussed' b'above would need colormap and visual arguments in which to lookup the' b'pixel to obtain the rgb values corresponding to that pixel.' b'' b'care must be taken with the "toval" argument. an xrmvalue has the' b'following type definition and specifies a size and location for a' b'converted value:' b'' b'typedef struct b'unsigned int size;' b'caddr_t addr;' b'} xrmvalue, *xrmvalueptr;' b'' b'when the converter is invoked, the address may point to a location of' b'the given size for the converted value or the location can be null.' b'in the former case, the converter should ensure that the size of the' b'destination area is large enough to handle the converted value. if' b'the destination area is not large enough, then the converter should' b'set the size to the amount of space needed and return false. the' b'caller can then ensure that enough space is allocated and reinvoke the' b'converter. if the size is large enough, then the converter can simply' b'copy the converted value into the space given and return true.' b'' b'if the location is null, then the converter can assign the location to' b'the address of a static variable containing the converted value and' b'return true.' b'' b'when writing a group of converters, this code is often repeated and it' b'becomes convenient to define a macro:' b'' b'#define done(var, type) b'if (toval-addr) b'{ b'if (toval-size sizeof(type)) b'{ b'toval-size sizeof(type); b'return false; b'} b'else b'*((type toval-addr) var; b'} b'else b'toval-addr (caddr_t) &var; b'toval-size sizeof(type); b'return true;' b'' b'#define donestr(str) b'if (toval-addr toval-size sizeof(string)) b'{ b'toval-size sizeof(string); b'return false; b'} b'else b'toval-addr (caddr_t) str; b'toval-size sizeof(string); b'return true;' b'' b'inside the converter, it is a good idea to perform a little safety' b'checking on the "num_args" and "args" arguments to ensure that your' b'converter is being called properly.' b'' b'once you have written your converter, you need to register it with the' b'intrinsics. the intrinsics invokes resource converters when creating' b'widgets and fetching their resource values from the resource database.' b'' b'to register a converter with a single application context, use' b'xtappsettypeconverter:' b'' b'void xtappsettypeconverter(context, from, to, converter, args, num_args,' b'cache, destructor)' b'xtappcontext context;' b'string from;' b'string to;' b'xttypeconverter converter;' b'xtconvertarglist args;' b'cardinal num_args;' b'xtcachetype cache;' b'xtdestructor destructor;' b'' b'to register a converter with all application contexts, use' b'xtsettypeconverter:' b'' b'void xtsettypeconverter(from, to, converter, args, num_args,' b'cache, destructor)' b'string from;' b'string to;' b'xttypeconverter converter;' b'xtconvertarglist args;' b'cardinal num_args;' b'xtcachetype cache;' b'xtdestructor destructor;' b'' b'in the r3 intrinsics, there were the routines xtappaddconverter and' b'xtaddconverter; these have been superseded by xtappsettypeconverter' b'and xtsettypeconverter. whenever possible, the newer routines should be' b'used.' b'' b'when a converter is registered with the intrinsics, a "cache" argument' b'specifies how converted resource values are to be cached:' b'' b"xtcachenone\t\tdon't cache any converted values" b'xtcacheall\t\tcache all converted values' b'xtcachebydisplay\tcache converted values on a per display basis' b'' b'caching converted values that require a round-trip to the server is a' b'good idea (for instance string to pixel conversions).' b'' b'the "destructor" argument is a routine that is invoked then the' b'resource is destroyed, either because its cached reference count has' b'been decremented to zero or because the widget owning the value is' b'being destroyed. xtdestructor has the following type definition:' b'' b'typedef void (*xtdestructor)(xtappcontext, xrmvalueptr, xtpointer,' b'xrmvalueptr, cardinal b'xtappcontext context;' b'xrmvalueptr to;' b'xtpointer converter_data;' b'xrmvalueptr args;' b'cardinal *num_args;' b'' b'the destructor is invoked to free any auxiliary storage associated' b'with the "to" argument, but does not actually free the storage pointed' b'to by the "to" argument itself (to-addr). the destructor is passed' b'the extra arguments that were passed to the converter when the' b'conversion was performed (for instance, colormap and visual arguments' b'for the string to pixel converter since the destructor would need to' b'free the allocated pixel from the colormap) as well as the private' b'data passed in when the converter was registered.' b'' b'sample converter code can be found in the following files in the mit' b'r5 distribution:' b'' b'mit/lib/xt/converters.c' b'contrib/lib/pext/converters.c' b'contrib/lib/pext/converters.h' b'' b'----------------------------------------------------------------------' b'18. how do i open multiple displays?' b'----------------------------------------------------------------------' b'' b'see "multi-user application software using xt", the x resource, issue b'(summer by oliver jones for a complete coverage of the issues' b'involved. most of this answer is based on that article. in a' b'nutshell, one uses xtopendisplay() to add each display to a _single_' b'application context and then xtclosedisplay() to shutdown each display' b'and remove it from the application context.' b'' b'the real problems occur when trying to close down a display. this can' b'happen ways:' b'1. user selects a "quit" button on one of the displays,' b'2. user has window manager send a wm_delete_window message,' b'3. server disconnect possibly from a killclient message,' b'server shutdown/crash, or network failure.' b'' b"i'll assume you can deal gracefully with since it is _merely_ a" b'problem of translating a widget to a display and removing that' b'display. if not, then read the oliver jones article.' b'' b'the third one is difficult to handle. the following is based on the' b'oliver jones article and i include it here because it is a difficult' b'problem.' b'' b'the difficulty arises because the xlib design presumed that an i/o' b'error is always unrecoverable and so fatal. this is essentially true' b'for a single display x based application, but not true for a' b'multiple display program or an application that does things other than' b'display information on an x server. when an x i/o error occurs the' b'i/o error handler is called and _if_ it returns then an exit()' b'happens. the only way around this is to use setjmp/longjmp to avoid' b'returning to the i/o error handler. the following code fragment' b'demonstrates this:' b'' b'#include <setjmp.h' b'jmp_buf xiorecover;' b'' b'void' b'xiohandler (dpy)' b'display\t\t*dpy;' b'{' b'destroydisplay (dpy);' b'longjmp (xiorecover, b'}' b'' b'main b'{' b'...' b'if (setjmp (xiorecover) b'xsetioerrorhandler (xiohandler);' b'xtappmainloop (app_context);' b'}' b'' b'the destroydisplay() is something that given a display pointer can go' b'back to the application specific data and perform any necessary' b'cleanup. it should also call xtclosedisplay().' b'' b'for those of you unfamiliar with setjmp/longjmp, when setjmp() is' b"first called it returns a and save's enough information in the" b'jmp_buf that a latter execution of longjmp() can return the program to' b'the same state as if the setjmp() was just executed. the return value' b'of this second setjmp() is the value of the second argument to' b'longjmp(). there are several caveats about using these but for this' b'purpose it is adequate.' b'' b'some other problems you might run into are resource converters that' b'improperly cache resources. the most likely symptoms are xlib errors' b'such as badcolor, badatom, or badfont. there may be problems with the' b'total number of displays you can open since typically only a limited' b'number of file descriptors are available with being a typical' b'value. you may also run into authorization problems when trying to' b'connect to a display.' b'' b'there was much discussion in comp.windows.x about this topic in' b'november of robert scheifler posted an article which basically' b'said this is the way it will be and xlib will not change.' b'' b'----------------------------------------------------------------------' b'19. what changed from r3 to r4 to r5?' b'----------------------------------------------------------------------' b'' b'this addresses only changes in the intrinsics. first, the general' b'changes for each release are described. then a, certainly incomplete,' b'list of new functions added and others that are now deprecated are' b'listed. brevity is a primary goal.' b'' b'much of the following information is retrieved from chapter of the mit' b"xt intrinsics manual and from o'reilly volume 3rd edition." b'' b'from r3 to r4' b'- addition of gadgets (windowless widgets)' b'- new resource type converter interface to handle cacheing and' b'additional data.' b'- variable argument list interface.' b'- #define xtspecificationrelease (added with this release)' b'- wmshellpart, toplevelshellpart transientshellpart changed' b'incompatibly.' b'- core.initialize, core.set_values added arglist and count parameters' b'- event handlers had continue_to_dispatch parameter added' b'- core.set_values_almost specification changed.' b'- core.compress_exposure changed to an enumerated data type from boolean' b'- core.class_inited changed to enumerated data type from boolean' b'- constraint.get_values_hook added to extension record' b'- core.initialize_hook obsolete as info is passed to core.initialize' b'- shell.root_geometry_manager added to extension record' b'- core.set_values_hook obsolete as info is passed to core.set_values' b'- calling xtquerygeometry() must store complete geometry.' b'- added unrealizecallback.' b'- xttranslatecoords() actually works under r4.' b'' b'from r4 to r5:' b'- psuedo resource basetranslation added.' b'- searching for app-default, and other files, made more flexible' b'- customization resource added.' b'- per-screen resource database.' b'- support permanently allocated strings.' b'- permanetly allocated strings required for several class fields.' b'- the args argument to xtappinitialize, xtvaappinitialize,' b'xtopendisplay, xtdisplayinitialize, and xtinitialize were changed' b'from cardinal* to int*' b'- many performance improvements (this is summarized from the article' b'"xt performance improvements in release by gabe beged-dov in "the' b'x resource", issue b'- xrmstringtoquark() augmented with xrmpermstringtoquark() to' b'avoid string copies. several fields in the class record are' b'indicated as needing permanent strings.' b'- using an array of strings for resources' b'- callback lists redesigned to use less memory' b'- translation manager redesigned and rewritten so it takes' b'less memory, translation tables merges are faster, cache of' b'action bindings' b'- keycode to keysyms are cached.' b"- better sharing of gc's with modifiable fields" b'- window to widget translation uses less space and faster' b'- does not malloc space for widget name since quark is available' b'- widget space is allocated to include the constraints' b'- over several example programs, about a reduction in' b'memory usage.' b'' b'functions new with r5:' b'----------------------' b'xtallocategc()\t\t- sharable gc with modifiable fields' b'xtgetactionlist()\t- get the action table of a class' b'xtscreendatabase()\t- return resource database for a screen' b'xtsetlanguageproc()\t- register language procedure called to set locale' b'' b'' b'functions new with r4:' b'----------------------' b'xtappaddactionhook()\t- procedure to call before _every_ action.' b'xtappinitialize()\t- lots of initialization work.' b'xtappreleasecacherefs()\t- decrement cache reference count for converter' b'xtappsetfallbackresources() specify default resources' b'xtappsettypeconverter()\t- register a new style converter' b'xtcallcallbacklist()\t- directly execute a callback list' b'xtcallconverter\t()\t- invoke a new style converter' b'xtcallbackreleasecacheref() release a cached resource value' b'xtcallbackreleasecachereflist() release a list of cached resource values' b'xtconvertandstore()\t- find and call a resource converter' b'xtdirectconvert()\t- invoke old-style converter' b'xtdisplayofobject()\t- return the display' b'xtdisplaystringconversionwarning() issue a warning about conversion' b'xtfindfile()\t\t- find a file' b'xtgetactionkeysym()\t- retrieve keysym modifies for this action' b'xtgetapplicationnameandclass() return name and class' b'xtgetconstraintresourcelist() get constraints for a widget' b'xtgetkeysymtable()\t- return keycode-to-keysym mapping table' b'xtgetmulticlicktime()\t- read the multi-click time' b'xtgetselectionrequest()\t- retrieve the selectionrequest event' b'xtgetselectionvalueincremental() obtain the selection value incrementally' b'xtgetselectionvaluesincremental() obtain the selection value incrementally' b'xtinitializewidgetclass() initialize a widget class manually' b'xtinserteventhanlder()\t- register event handler before/after others' b'xtinsertraweventhandler() register event handler without modify input mask' b'xtisobject()\t\t- test if subclass of object' b'xtisrectobj()\t\t- test if subclass of rectobj' b'xtkeysymtokeycodelist()\t- return list of keycodes' b'xtlasttimestampprocessed() retrieve most recent event time' b'xtmenupopdown\t\t- action for popping down a widget' b'xtmenupopup\t\t- action for popping up a widget' b'xtoffsetof\t\t- macro for structure offsets' b'xtownselectionincremental() make selection data availabe incrementally' b'xtpoupspringloaded()\t- map a spring-loaded popup' b'xtregistergrabaction()\t- indicate action procedure needs a passive grab' b'xtremoveactiohhook()\t- remove function called after every action' b'xtresolvepathname()\t- find a file' b'xtscreenofobject()\t- return screen of object.' b'xtsetmulticlicktime()\t- set the multi-click time' b'xtsetwmcolormapwindows() set wm_colormap_windows for custom colormaps' b'xtungrabbutton()\t- cancel a passive button grab' b'xtungrabkey()\t\t- cancel a passive key grab' b'xtungrabkeybard()\t- release an active keyboard grab' b'xtungrabpointer()\t- release an active pointer grab' b'xtva*()\t\t\t- varags interfaces to a bunch of functions' b'xtwindowofobject()\t- return window of nearest widget ancestor' b'' b'' b'deprecated\t\treplacement\t\t\twhen' b'----------------------------------------------------------------------' b'xtaddactions()\t\txtappaddactions()\t\tr3' b'xtaddconverter()\txtappaddconverter()\t\tr3' b'xtaddinput()\t\txtappaddinput ()\t\tr3' b'xtaddtimeout()\t\txtappaddtimeout()\t\tr3' b'xtaddworkproc()\t\txtappaddworkproc()\t\tr3' b'xtconvert()\t\txtconvertandstore()\t\tr4' b'xtcreateapplicationshell xtappcreateshell()\t\tr3' b'xtdestroygc()\t\txtreleasegc()\t\t\tr3' b'xterror()\t\txtapperror()\t\t\tr3' b'xtgeterrordatabase()\txtappgeterrordatabase\t\tr3' b'xtgeterrordatabasetext() xtappgeterrordatabasetext\tr3' b'xtgetselectiontimeout()\txtappgetselectiontimeout\tr3' b'xtinitialize()\t\txtappinitialize()\t\tr3' b'xtmainloop()\t\txtappmainloop()\t\t\tr3' b'menupopdown(action)\txtmenupopdown(action)\t\tr4' b'menupopup(action)\txtmenupopup(action)\t\tr4' b'xtnextevent()\t\txtappnextevent()\t\tr3' b'xtpeekevent()\t\txtapppeekevent()\t\tr3' b'xtpending()\t\txtapppending()\t\t\tr3' b'xtseterrorhandler()\txtappseterrorhandler()\t\tr3' b'xtseterrormsghandler\txtappseterrormsghandler()\tr3' b'xtsetselectiontimeout()\txtappsetselectiontimeout()\tr3' b'xtsetwarninghandler()\txtappsetwarninghandler()\tr3' b'xtsetwarningmsghandler() xtappsetwarningmsghandler()\tr3' b'xtwarning()\t\txtappwarning()\t\t\tr3' b'xtwarningmsg()\t\txtappwarningmsg()\t\tr3' b'' b'----------------------------------------------------------------------' b'20. where are the resources loaded from?' b'----------------------------------------------------------------------' b'' b'the resources of a widget are filled in from the following places' b'(from highest priority to lowest priority):' b'' b'1. args passed at creation time.' b'2. command line arguments.' b"3. user's per host defaults file" b"4. user's defaults file." b"5. user's per application default file." b'6. system wide per application default file.' b'' b'note that are read only once on application startup. the result' b'of steps is a single resource database used for further queries.' b'' b'the per host defaults file contains customizations for all' b'applications executing on a specific computer. this file is either' b'specified with the xenvironment environment variable or if that is not' b'set then the file $home/.xdefaults-<host is used.' b'' b'the user defaults file is either obtained from the resource_manager' b'property on the root window of the display or if that is not set then' b'the file $home/.xdefaults is used. typically, the program "xrdb" is' b'used to set the resource_manager property. please note that this' b'should be kept relatively small as each client that connects to the' b'display must transfer the property. a size of around 1-3kbyte is' b'reasonable. some toolkits may track changes to the resource_manager' b'but most do not.' b'' b'a user may have many per application default files containing' b'customizations specific to each application. the intrinsics are quite' b'flexible on how this file is found. read the next part that describes' b'the various environment variables and how they effect where this file' b'is found.' b'' b'the system wide per application default files are typically found in' b'/usr/lib/x11/app-defaults. if such a file is not found then the' b'fallback resources are used. the intrinsics are quite flexible on how' b'this file is found. read the next part that describes the various' b'environment variables and how they effect where this file is found.' b'' b'' b'you can use several environment variables to control how resources are' b'loaded for your xt-based programs xfilesearchpath,' b'xuserfilesearchpath, and xapplresdir. these environment variables' b'control where xt looks for application-defaults files as an' b'application is initializing. xt loads at most one app-defaults file' b'from the path defined in xfilesearchpath and another from the path' b'defined in xuserfilesearchpath.' b'' b'set xfilesearchpath if software is installed on your system in such a' b'way that app-defaults files appear in several different directory' b"hierarchies. suppose, for example, that you are running sun's open" b'windows, and you also have some r4 x applications installed in' b'/usr/lib/x11/app-defaults. you could set a value like this for' b'xfilesearchpath, and it would cause xt to look up app-defaults files' b'in both /usr/lib/x11 and /usr/openwin/lib (or wherever your' b'openwinhome is located):' b'' b'setenv xfilesearchpath /usr/lib/x11/%t/%n:$openwinhome/lib/%t/%n' b'' b'the value of this environment variable is a colon-separated list of' b'pathnames. the pathnames contain replacement characters as follows' b'(see xtresolvepathname()):' b'' b'%n\tthe value of the filename parameter, or the' b"application's class name." b'%t\tthe value of the file "type". in this case, the' b'literal string "app-defaults"' b'%c\tcustomization resource (r5 only)' b'%s\tsuffix. none for app-defaults.' b'%l\tlanguage, locale, and codeset (e.g. "ja_jp.euc")' b'%l\tlanguage part of %l (e.g. "ja")' b"%t\tthe territory part of the display's language string" b"%c\tthe codeset part of the display's language string" b'' b"let's take apart the example. suppose the application's class name is" b'"myterm". also, suppose open windows is installed in /usr/openwin.' b'(notice the example omits locale-specific lookup.)' b'' b'/usr/lib/x11/%t/%n means /usr/lib/x11/app-defaults/myterm' b'$openwinhome/lib/%t/%n means /usr/openwin/lib/app-defaults/myterm' b'' b'as the application initializes, xt tries to open both of the above' b'app-defaults files, in the order shown. as soon as it finds one, it' b'reads it and uses it, and stops looking for others. the effect of' b'this path is to search first in /usr/lib/x11, then in /usr/openwin.' b'' b"let's consider another example. this time, let's set" b'xuserfilesearchpath so it looks for the file myterm.ad in the current' b'working directory, then for myterm in the directory ~/app-defaults.' b'' b'setenv xuserfilesearchpath ./%n.ad:$home/app-defaults/%n' b'' b'the first path in the list expands to ./myterm.ad. the second expands' b'to $home/app-defaults/myterm. this is a convenient setting for' b'debugging because it follows the imake convention of naming the' b"app-defaults file myterm.ad in the application's source directory, so" b'you can run the application from the directory in which you are' b'working and still have the resources loaded properly.' b'' b'note: when looking for app-default files with xuserfilesearchpath,' b'for some bizarre reason, neither the type nor file suffix is' b'defined so %t and %s are useless.' b'' b"with r5, there's another twist. you may specify a customization" b'resource value. for example, you might run the "myterm" application' b'like this:' b'' b'myterm -xrm "*customization: -color"' b'' b'if one of your pathname specifications had the value' b'"/usr/lib/x11/app-defaults/%n%c" then the expanded pathname would be' b'"/usr/lib/x11/app-defaults/myterm-color" because the %c substitution' b'character takes on the value of the customization resource.' b'' b'the default xfilesearchpath, compiled into xt, is:' b'' b'/usr/lib/x11/%l/%t/%n%c:\\ (r5)' b'/usr/lib/x11/%l/%t/%n%c:\\ (r5)' b'/usr/lib/x11/%t/%n%c:\\ (r5)' b'/usr/lib/x11/%l/%t/%n:\\' b'/usr/lib/x11/%l/%t/%n:\\' b'/usr/lib/x11/%t/%n' b'' b'(note: some sites replace /usr/lib/x11 with a projectroot in this' b'batch of default settings.)' b'' b'the default xuserfilesearchpath, also compiled into xt, is' b'' b'<root/%l/%n%c:\\ (r5)' b'<root/%l/%n%c:\\ (r5)' b'<root/%n%c:\\ (r5)' b'<root/%l/%n:\\' b'<root/%l/%n:\\' b'<root/%n:' b'' b"<root is either the value of xapplresdir or the user's home directory" b'if xapplresdir is not set. if you set xuserfilesearchpath to some' b'value other than the default, xt ignores xapplresdir altogether.' b'' b'notice that the quick and dirty way of making your application find' b'your app-defaults file in your current working directory is to set' b'xapplresdir to a single dot. in r3, all this machinery worked' b'differently; for r3 compatibilty, many people set their xapplresdir' b'value to a dot followed by a slash.' b'' b'' b'----------------------------------------------------------------------' b'21. what order are callbacks executed in?' b'----------------------------------------------------------------------' b'' b'the intrinsics library do not guarantee an order. this is because' b'both the widget writer and the application writer have the ability to' b'modify the entire contents of the callback list. neither one' b'currently knows what the other is doing and so the intrinsics cannot' b'guarantee the order of execution.' b'' b'the application programmer cannot rely on the widget writer; the' b'widget writer is not required to document when the widget will add and' b'remove callbacks from the list or what effect this will have;' b'therefore the functionality contained in a callback should be' b'independent of the functionality contained in other callbacks on the' b'list.' b'' b'even though the xt standard in the definition of xtaddcallback' b'says:' b'' b'"callback_name: specifies the callback list to which the' b'procedure is to be appended."' b'' b'you may not infer from the word "appended" that the callback routines' b'are called in the same order as they have been added to the callback' b'list.' b'' b'----------------------------------------------------------------------' b'22. how do i know if a widget is visible?' b'----------------------------------------------------------------------' b'' b' i am building a widget needs to know if it is visible. i set the visible' b' interest field in core and if my window is completely obscured, the core' b' visible flag goes false. however, if my window is iconified, the flag' b' stays set to true.' b'' b'right, everything is implemented correctly. this demonstrates a "deficiency"' b'in the x protocol, and the core widget is reflecting the capabilities of the' b'protocol. (the "deficiency" is that the information is available in one way,' b'in this case an inconvenient way.) the xt specification is accurate, in' b'the second and third paragraphs of section so read this section' b'carefully. the visible field will not change in response to iconification.' b'' b'a visibilitynotify event will not be received when the window goes from' b'viewable to unviewable, that is, when the widget or an ancestor is unmapped;' b'that is, when iconification occurs. this is the protocol deficiency.' b'visibility state and viewable state have specific meanings in the x protocol;' b'see the glossary in your xlib and x protocol reference manual.' b'' b' is this a problem with "mwm" or is there something' b' else which needs to be done?' b'' b"you'll see this with any window manager, with no window manager." b'' b' if the problem is "mwm", what is the fastest' b' way to determine if a window is iconified?' b'' b'as an application writer, keep track with a global boolean in an action' b'routine with translations for mapnotify and unmapnotify on the shell widget' b'which contains your custom widget. as the custom widget writer, see the' b'map_state field returned by a call to xgetwindowattributes. these are' b'suggestions.' b'' b'----------------------------------------------------------------------' b'23. how do i reparent a widget in xt, i.e. xtreparentwidget()?' b'----------------------------------------------------------------------' b'' b"you can't." b'' b'----------------------------------------------------------------------' b'24. why use xtmalloc, xtfree, etc?' b'----------------------------------------------------------------------' b'' b'unfortunately, most code that calls malloc(), realloc() or calloc()' b'tends to ignore the possibility of returning null. at best it is' b'handled something like:' b'' b'ptr (type malloc (sizeof (type))' b'if (!ptr)' b'{' b'perror ("malloc in xyzzy()");' b'exit b'}' b'to handle this common case the intrinsics define the functions' b'xtmalloc(), xtcalloc(), xtnew(), xtnewstring() and xtrealloc() which' b'all use the standard c language functions malloc(), calloc() and' b'realloc() but execute xterrormsg() if a null value is returned. xt' b'error handlers are not supposed to return so this effectively exits.' b'' b'in addition, if xtrealloc() is called with a null pointer, it uses' b'xtmalloc() to get the initial space. this allows code like:' b'' b'if (!ptr)' b'ptr (type malloc (sizeof (type));' b'else' b'ptr (type realloc (ptr, sizeof (type) (count b'++count;' b'' b'to be written as:' b'' b'ptr xtrealloc (ptr, sizeof (ptr) ++count);' b'' b"also, xtfree() accepts a null pointer as an argument. generally, i've" b"found the xt functions conveniant to use. however, anytime i'm" b'allocating anything potentially large i use the standard functions so' b'i can fully recover from not enough memory errors.' b'' b'xtnew() and xtnewstring() are conveniant macros for allocating a' b'structure or copying a string:' b'' b'struct abc *xyzzy;' b'char\t *ptr;' b'char\t *str "abcdef";' b'' b'xyzzy xtnew (struct abc);\t/* takes care of type casting b'ptr xtnewstring (str);' b'' b'a strict interpretation of the intrinsics reference manual allow an' b'implementation to provide functions that are not exchangable with' b'malloc() and free(). i.e. code such as:' b'' b'char\t *ptr;' b'' b'ptr xtmalloc b'/* b'free (ptr);' b'' b"may not work. personally, i'd call any implementation that did this" b'broken and complain to the vendor.' b'' b'a common error for motif programmers is to use xtfree() on a string' b'when they should really be using xmstringfree().' b'' b'----------------------------------------------------------------------' b'25. how to debug an xt application?' b'----------------------------------------------------------------------' b'first, i\'d recomend getting "purify" from pure software. this is a' b"great package for tracing memory problems on sun's. it's a bit pricey" b"at but i'd still recomend it. excuse the marketing blurb" b'' b'purify inserts additional checking instructions directly into' b'the object code produced by existing compilers. these' b'instructions check every memory read and write performed by' b'the program under test and detect several types of access' b'errors, such as reading unitialized memory, writing past' b"malloc'd bounds, or writing to freed memory. purify inserts" b'checking logic into all of the code in a program, including' b'third party and vendor object-code libraries, and verifies' b'system call interfaces. in addition, purify tracks memory' b'usage and identifies individual memory leaks using a novel' b"adaption of garbage collection techniques. purify's nearly" b'comprehensive memory access checking slows the target program' b'down typically by a factor of two to five.' b'' b"an alternative package that isn't as pricey for a sun), runs on" b'many unix\'s and has pretty similar features is "the sentinel debugging' b'environment". this replaces malloc() and several other c library' b'for more info)' b'' b"next, if you are getting any sort of xlib error, you'll need to run in" b'synchronous mode, easily accomplished with the "-sync" command line' b'argument or by setting the variable xdebug to with your debugger. then' b'set a break point in exit(). this will let you trace back to the' b"original xlib function being called. if you don't run in synchronous" b'mode, then the actual error may have occured any number of calls to' b'xlib previously since the xlib calls are buffered and replies from the' b'server are asynchronous.' b'' b'next, if you are having trouble with window layout, you can use the' b'undocumented resource "xtidentifywindows" or the class resource' b'"xtdebug" to cause the widget name to be identified with each window.' b'for example:' b'' b"example% xload -xrm '*xtdebug:true' b'example% xwininfo -tree' b'<click in new xload window' b'' b'will give the normal information but the widget name and class of each' b'window is included. this can help for checking the location and size' b'of errant widgets.' b'' b'next, if you are having trouble with geometry managers or you want to' b"test the way a widget manages it's children, you can try" b'export.lcs.mit.edu:contrib/libxtgeo.tar.z. this acts as a filter' b'between any children and a geometry manager and checks the behaviour' b"of both. it's a very clever idea." b'' b'the most unfortunate problem is debugging a callback while the' b'application is executing a grab of the keyboard or mouse (such as from' b"a pulldown menu). the server effectively locks up and you'll need to" b'go to another machine and kill the debugger manually. the server' b'locks up because the application being debugged has said no one else' b'can have access to the keyboard but the application is not stopped' b'waiting because the debugger is waiting for your commands.' b"unfortunately you can't give them because all the input is going to" b'your application which is stopped.' b'' b'the best way to debug this kind of problem is with two machines on' b'your desk, running the program under a debugger (or other environment)' b'on one machine, and running the application on the other, possibly' b'using a command sequence like this:' b'' b'othermachine% xhost +thismachine' b'thismachine% setenv display othermachine:0;' b'thismachine% gdb application\t# your favorite debugger.' b'or this:' b'othermachine% xhost +thismachine' b'thismachine% gdb application' b'(gdb) set environment display othermachine:0' b'(gdb) run b'' b'i believe codecenter, a c interpreter/graphical debugger has a method' b'of dealing with this by explicitely calling the xlib functions to' b'release any grabs during breakpoints.' b'' b'debugging widget problems requires pretty good debugging skills and' b'knowledge of how widgets work. you can go a long way without knowing' b'the internals of a particular widget but not very far without' b'understanding how a widget works. judicious use of conditional' b'breakpoints and adding print statements with the debugger help a great' b'deal.' b'' b'----------------------------------------------------------------------' b"26. why don't xtaddinput(), xtaddtimeout() and xtaddworkproc() work?" b'----------------------------------------------------------------------' b'i have got a delicate problem with the three routines xtaddinput,' b'xtaddtimeout and xtaddworkproc. the problem i have is that when' b'i use them in my application they seem not to be registred properly.' b'i have made a handy little testprogram where everything works' b'perfect, but in my "real" application nothing happens.' b'' b'the introduction in r3 of the xtapp*() functions obsoleted those' b'routines (see q19 for other changes in r3, r4, and r5). what happens is' b'they use a default application context different then the one you may' b'have created. since events and timeouts are distributed on a per' b'application context basis and you are using two application contexts,' b"you won't get those events." b'' b'for example:' b'' b'...' b'cnt b'toplevel xtappinitialize(&app, class,' b'desc, xtnumber (desc),' b'&argc, argv,' b'fallback, args, cnt);' b'' b'xtaddtimeout b'xtaddworkproc b'' b'xtappmainloop (app)' b'' b'would never invoke the timeout.' b'' b'----------------------------------------------------------------------' b'27. what is and how can i implement drag and drop?' b'----------------------------------------------------------------------' b'' b'drag-n-drop is a buzzword for moving data between clients, in an' b"``intuitive'' fashion." b'' b'motif version supports drag-n-drop capabilities, openlook has' b'supported d-n-d all along. the two protocols are not compatable with' b'each other, and so far as i know, they are not published.' b'' b'i wrote a package called rdd which is designed to be a flexible public' b"protocol for doing drag 'n drop operations between clients. my" b'intention was to provide a tool which would make it easy for people to' b'support a "standard" drag-n-drop protocol in the programs they develop' b'and contribute or sell, regardless of what widget set is used (as long' b'as it is based on xt).' b'' b'the implementation is based upon my understanding of the icccm' b'conventions, for more details read the code.' b'' b'i have heard from dozens of people using rdd who like it and feel that' b'it works a whole lot better than motif stuff. also, there seem to' b'be many who think that it is neat but are constrained to use motif' b'anyway.' b'' b'the latest rdd (and some other stuff) is available for ftp from' b'netcom.com, in /pub/rogerr. a (possibly older) version is also' b'available on export.lcs.mit.edu in /contrib.' b'--' b'cis dept, ohio state university\t\t\tw/ b'228 bolz hall, neil ave.\t\t\th/ b'columbus, oh 