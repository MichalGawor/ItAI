b'' b'' b'| most graphics systems i have seen have drawing routines that also specify' b'| a color for drawing, like' b'|' b'| drawpoint(x,y,color) or drawline(x1,y1,x2,y2,color) or' b'| fillrectangle(x1,y1,x2,y2,color)' b'|' b'| with x, i have to do something like' b'| xsetforeground(current_color)' b'| xdrawpoint(d,w,x,y)' b'|' b'| why split this into two functions? why did x designers decide to not associate' b'| the color with the object being drawn, and instead associate it with the' b'| display it is being drawn on?' b'' b'for flexibility. anyway, what you say is not really true. the color information' b'is associated with a graphicscontext, not with a display, and the gc _is_' b'a parameter to the drawing routines.' b'' b'so, if you need to fast switch between green dotted lines and blue ones of' b'width you can make gcs for those cases and then simply do' b'' b'xdrawline(dpy,win,gc_red,x1,y1,x2,y2);' b'xdrawline(dpy,win,gc_blue,x3,y3,x4,y4);' b'' b'for this effect.' b'' b'this is eventually more complicated to do for the programmer, but also much' b'more efficient and flexible. you would not include all the other parameters' b'like line pattern, with, cap and joinstyle, drawmode and so on in every' b'drawing call, so why do it for color btw, stay away from xdrawpoint()' b"if you don't really need it (to draw random points), for image transfers" b'there are image routines.' b'' b'--' b'+-o-+--------------------------------------------------------------+-o-+' b'| o brain inside o b'| o o b'+-o-+--------------------------------------------------------------+-o-+' 