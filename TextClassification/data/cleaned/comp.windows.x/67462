b'' b'[[ i posted this a few weeks back, but all i got back was an error' b'message "pnews: /dev/null: permission denied". yep, /dev/null' b'had a mode of (arrghhh!!) b'' b'with renewed interest in "setting the display variable", etc.. i' b'thought i would post my contribution.' b'' b'this perl script is my solution. it trys to be intelligent about' b'what it\'s doing so that you should be able to type "rx host.domain.etc",' b'and get a xterm running on "host.domain.etc", with all the difficult' b'stuff taken care of.' b'' b'in theory, this program can do *everything* you ever wanted to do' b'when you wanted to run a remote command in the background it' b'doesn\'t even need to be an x program. try a "rx big-machine make"' b'for instance, for a backgrounded make on the remote "big-machine".' b'' b'for more details and a full list of features read the readme file,' b'about lines below... all comments welcome.' b'' b'duncan.' b'' b'' b'' b'#! /bin/sh' b'# this is a shell archive. remove anything before this line, then unpack' b'# it by saving it into a file and typing "sh file". to overwrite existing' b'# files, type "sh file -c". you can also feed this as standard input via' b'# unshar, or by typing "sh <file", e.g.. if this archive is complete, you' b'# will see the following message at the end:' b'#\t\t"end of archive (of b'# contents: readme imakefile manifest makefile rx.man rx.pl' b'path=/bin:/usr/bin:/usr/ucb export path' b'if test -f \'readme\' -a "-c" then' b'echo shar: will not clobber existing file \\"\'readme\'\\"' b'else' b'echo shar: extracting \\"\'readme\'\\" characters\\)' b'sed "s/^x//" \'readme\' <<\'end_of_file\'' b'x' b'x glasgow rx remote execution of x programs. version b'x' b'x' b"xtrivial to install, but there's an imakefile to make it even more trivial." b'x' b'xthe perl script needs some customisation before it is installed, just' b'xedit the "rx.pl" file, and read the comments. once you\'ve done' b'xthis you can "xmkmf", then "make install install.man".' b'x' b'xfeatures:' b'x' b'x*) does the right thing for off-site remote execution. including' b'x setting up $display to include domain names, and passing' b'x magic cookies, or doing the "xhost" stuff.' b'x' b'x*) allow different remote user name. (rx -l user host b'x' b'x*) smart quoting of arguments makes passing wild-cards easy.' b'x' b'x*) custom command execution link it to "remacs" to get a remote' b'x emacs command.' b'x' b'x*) automatic xterm options names the xterm according to hostname,' b'x and turns on "login shell".' b'x' b'x*) default command is xterm.' b'x' b'x*) propagates x-ish env. variables to remote session user may' b'x extend the list of variables to pass.' b'x' b'x*) special handling for bourne shell users.' b'x' b'x*) tries to do remote execution from same directory as local.' b'x that is, it propagates $pwd, in an intelligent manner.' b'x' b'x*) logs errors in a file.' b'x' b'x*) overall intelligence (tm) makes reasoned decisions about what' b'x you are trying to do, and tries to "do the right thing".' b'x' b'x*) written in perl, for portability and hackability.' b'x' b'xfor more info, read the man page or the source.' b'x' b'end_of_file' b"if test -ne `wc -c <'readme'`; then" b'echo shar: \\"\'readme\'\\" unpacked with wrong size!' b'fi' b"# end of 'readme'" b'fi' b'if test -f \'imakefile\' -a "-c" then' b'echo shar: will not clobber existing file \\"\'imakefile\'\\"' b'else' b'echo shar: extracting \\"\'imakefile\'\\" characters\\)' b'sed "s/^x//" \'imakefile\' <<\'end_of_file\'' b'x# glasgow rx imakefile.' b'x' b'x programs rx' b'x' b'xall:: $(programs)' b'x' b'xinstall:: safe' b'x' b'xinstallnamedprog(rx.pl,rx,$(bindir))' b'xinstallmanpage(rx,$(mandir))' b'x' b'xinstall::' b'x\t$(rm) $(bindir)/rxterm' b'x\t$(ln) $(bindir)/rx $(bindir)/rxterm' b'x' b'xsafe:' b'x' b'xshar: safe' b'x\tmakekit -m -p' b'x' b'end_of_file' b"if test -ne `wc -c <'imakefile'`; then" b'echo shar: \\"\'imakefile\'\\" unpacked with wrong size!' b'fi' b"# end of 'imakefile'" b'fi' b'if test -f \'manifest\' -a "-c" then' b'echo shar: will not clobber existing file \\"\'manifest\'\\"' b'else' b'echo shar: extracting \\"\'manifest\'\\" characters\\)' b'sed "s/^x//" \'manifest\' <<\'end_of_file\'' b'x file name\t\tarchive #\tdescription' b'x-----------------------------------------------------------' b'x readme 1\tread me first' b'x imakefile b'x manifest 1\tthis shipping list' b'x makefile b'x rx.man b'x rx.pl b'end_of_file' b"if test -ne `wc -c <'manifest'`; then" b'echo shar: \\"\'manifest\'\\" unpacked with wrong size!' b'fi' b"# end of 'manifest'" b'fi' b'if test -f \'makefile\' -a "-c" then' b'echo shar: will not clobber existing file \\"\'makefile\'\\"' b'else' b'echo shar: extracting \\"\'makefile\'\\" characters\\)' b'sed "s/^x//" \'makefile\' <<\'end_of_file\'' b'x# makefile generated by imake do not edit!' b'x# $xconsortium: imake.c,v rws exp b'x#' b'x# the cpp used on this machine replaces all newlines and multiple tabs and' b'x# spaces in a macro expansion with a single space. imake tries to compensate' b'x# for this, but is not always successful.' b'x#' b'x' b'x# b'x# makefile generated from "imake.tmpl" and </tmp/iif.a04196' b'x# $xconsortium: imake.tmpl,v rws exp b'x#' b'x# platform-specific parameters may be set in the appropriate <vendor.cf' b'x# configuration files. site-specific parameters should be set in the file' b'x# site.def. full rebuilds are recommended if any parameters are changed.' b'x#' b'x# if your c preprocessor does not define any unique symbols, you will need' b'x# to set bootstrapcflags when rebuilding imake (usually when doing' b'x# "make world" the first time).' b'x#' b'x' b'x# b'x# site-specific configuration parameters that need to come before' b'x# the platform-specific parameters edit site.def to change' b'x' b'x# site: $xconsortium: site.def,v rws exp b'x' b'x# b'x# platform-specific configuration parameters edit sun.cf to change' b'x' b'x# platform: $xconsortium: sun.cf,v rws exp b'x' b'x# operating system: sunos b'x' b'x# $xconsortium: sunlib.rules,v rws exp b'x' b'x# b'x# site-specific configuration parameters that go after' b'x# the platform-specific parameters edit site.def to change' b'x' b'x# site: $xconsortium: site.def,v rws exp b'x' b'x shell /bin/sh' b'x' b'x top b'x current_dir b'x' b'x ar ar cq' b'x bootstrapcflags b'x cc gcc -fpcc-struct-return' b'x as as' b'x' b'x compress compress' b'x cpp /lib/cpp $(std_cpp_defines)' b'x preprocesscmd gcc -fpcc-struct-return -e $(std_cpp_defines)' b'x install install' b'x ld ld' b'x lint lint' b'x lintlibflag -c' b'x lintopts -axz' b'x ln ln -s' b'x make make' b'x mv mv' b'x cp cp' b'x' b'x ranlib ranlib' b'x ranlibinstflags b'x' b'x rm rm -f' b'x troff psroff' b'x msmacros -ms' b'x tbl tbl' b'x eqn eqn' b'x std_includes b'x std_cpp_defines b'x std_defines b'x extra_load_flags b'x extra_libraries b'x tags ctags' b'x' b'x sharedcodedef -dsharedcode' b'x shlibdef -dsunshlib' b'x' b'x proto_defines b'x' b'x instpgmflags b'x' b'x instbinflags -m b'x instuidflags -m b'x instlibflags -m b'x instincflags -m b'x instmanflags -m b'x instdatflags -m b'x instkmemflags -g kmem -m b'x' b'x projectroot /usr/x11' b'x' b'x top_includes -i$(incroot)' b'x' b'x cdebugflags -o2' b'x ccoptions b'x' b'x allincludes $(includes) $(extra_includes) $(top_includes) $(std_includes)' b'x alldefines $(allincludes) $(std_defines) $(extra_defines) $(proto_defines) $(defines)' b'x cflags $(cdebugflags) $(ccoptions) $(alldefines)' b'x lintflags $(lintopts) -dlint $(alldefines)' b'x' b'x ldlibs $(sys_libraries) $(extra_libraries)' b'x' b'x ldoptions $(cdebugflags) $(ccoptions) $(local_ldflags) -l$(usrlibdir)' b'x' b'x ldcombineflags -x -r' b'x dependflags b'x' b'x macrofile sun.cf' b'x rm_cmd $(rm) *.ckp *.ln *.bak *.bak *.o core errs *.a .emacs_* tags tags make.log makeout' b'x' b'x imake_defines b'x' b'x irulesrc $(configdir)' b'x imake_cmd $(imake) -duseinstalled -i$(irulesrc) $(imake_defines)' b'x' b'x iconfigfiles $(irulesrc)/imake.tmpl $(irulesrc)/imake.rules b'x\t\t\t$(irulesrc)/project.tmpl $(irulesrc)/site.def b'x\t\t\t$(irulesrc)/$(macrofile) $(extra_iconfigfiles)' b'x' b'x# b'x# x window system build parameters' b'x# $xconsortium: project.tmpl,v rws exp b'x' b'x# b'x# x window system make variables; this need to be coordinated with rules' b'x' b'x pathsep b'x usrlibdir /usr/x11/lib' b'x bindir /usr/x11/local/bin' b'x incroot /usr/x11/include' b'x buildincroot $(top)' b'x buildincdir $(buildincroot)/x11' b'x buildinctop b'x incdir $(incroot)/x11' b'x admdir /usr/adm' b'x libdir $(usrlibdir)/x11' b'x configdir $(libdir)/config' b'x lintlibdir $(usrlibdir)/lint' b'x' b'x fontdir $(libdir)/fonts' b'x xinitdir $(libdir)/xinit' b'x xdmdir $(libdir)/xdm' b'x twmdir $(libdir)/twm' b'x manpath /usr/x11/man' b'x mansourcepath $(manpath)/man' b'x mansuffix n' b'x libmansuffix b'x mandir $(mansourcepath)$(mansuffix)' b'x libmandir $(mansourcepath)$(libmansuffix)' b'x nlsdir $(libdir)/nls' b'x pexapidir $(libdir)/pex' b'x xapploaddir $(libdir)/app-defaults' b'x fontcflags -t' b'x' b'x instappflags $(instdatflags)' b'x' b'x imake imake' b'x depend makedepend' b'x rgb rgb' b'x' b'x fontc bdftopcf' b'x' b'x mkfontdir mkfontdir' b'x mkdirhier /bin/sh $(bindir)/mkdirhier' b'x' b'x configsrc $(top)/config' b'x docutilsrc $(top)/doc/util' b'x clientsrc $(top)/clients' b'x demosrc $(top)/demos' b'x libsrc $(top)/lib' b'x fontsrc $(top)/fonts' b'x includesrc $(top)/x11' b'x serversrc $(top)/server' b'x utilsrc $(top)/util' b'x scriptsrc $(utilsrc)/scripts' b'x examplesrc $(top)/examples' b'x contribsrc $(top)/../contrib' b'x docsrc $(top)/doc' b'x rgbsrc $(top)/rgb' b'x dependsrc $(utilsrc)/makedepend' b'x imakesrc $(configsrc)' b'x xauthsrc $(libsrc)/xau' b'x xlibsrc $(libsrc)/x' b'x xmusrc $(libsrc)/xmu' b'x toolkitsrc $(libsrc)/xt' b'x awidgetsrc $(libsrc)/xaw' b'x oldxlibsrc $(libsrc)/oldx' b'x xdmcplibsrc $(libsrc)/xdmcp' b'x bdftosnfsrc $(fontsrc)/bdftosnf' b'x bdftosnfsrc $(fontsrc)/clients/bdftosnf' b'x bdftopcfsrc $(fontsrc)/clients/bdftopcf' b'x mkfontdirsrc $(fontsrc)/clients/mkfontdir' b'x fslibsrc $(fontsrc)/lib/fs' b'x fontserversrc $(fontsrc)/server' b'x extensionsrc $(top)/extensions' b'x xilibsrc $(extensionsrc)/lib/xinput' b'x pexlibsrc $(extensionsrc)/lib/pexlib' b'x phigslibsrc $(extensionsrc)/lib/pex' b'x' b'x# $xconsortium: sunlib.tmpl,v rws exp b'x' b'xshlibldflags -assert pure-text' b'xpicflags -fpic' b'x' b'x depextensionlib b'x extensionlib -lxext' b'x' b'x depxlib $(depextensionlib)' b'x xlib $(extensionlib) -lx11' b'x' b'x depxmulib $(usrlibdir)/libxmu.sa.$(soxmurev)' b'x xmulibonly -lxmu' b'x xmulib -lxmu' b'x' b'x depoldxlib b'x oldxlib -loldx' b'x' b'x depxtoollib $(usrlibdir)/libxt.sa.$(soxtrev)' b'x xtoollib -lxt' b'x' b'x depxawlib $(usrlibdir)/libxaw.sa.$(soxawrev)' b'x xawlib -lxaw' b'x' b'x depxilib b'x xilib -lxi' b'x' b'x deppexlib b'x pexlib -lpex5' b'x' b'x soxlibrev b'x soxtrev b'x soxawrev b'x sooldxrev b'x soxmurev b'x soxextrev b'x soxinputrev b'x sopexrev b'x' b'x depxauthlib $(usrlibdir)/libxau.a' b'x xauthlib -lxau' b'x depxdmcplib $(usrlibdir)/libxdmcp.a' b'x xdmcplib -lxdmcp' b'x' b'x depphigslib $(usrlibdir)/libphigs.a' b'x phigslib -lphigs' b'x' b'x depxbsdlib $(usrlibdir)/libxbsd.a' b'x xbsdlib -lxbsd' b'x' b'x lintextensionlib $(lintlibdir)/llib-lxext.ln' b'x lintxlib $(lintlibdir)/llib-lx11.ln' b'x lintxmu $(lintlibdir)/llib-lxmu.ln' b'x lintxtool $(lintlibdir)/llib-lxt.ln' b'x lintxaw $(lintlibdir)/llib-lxaw.ln' b'x lintxi $(lintlibdir)/llib-lxi.ln' b'x lintpex $(lintlibdir)/llib-lpex5.ln' b'x lintphigs $(lintlibdir)/llib-lphigs.ln' b'x' b'x deplibs $(depxawlib) $(depxmulib) $(depxtoollib) $(depxlib)' b'x' b'x deplibs1 $(deplibs)' b'x deplibs2 $(deplibs)' b'x deplibs3 $(deplibs)' b'x' b'x# b'x# imake rules for building libraries, programs, scripts, and data files' b'x# rules: $xconsortium: imake.rules,v rws exp b'x' b'x# b'x# start of imakefile' b'x' b'x# glasgow rx imakefile.' b'x' b'x programs rx' b'x' b'xall:: $(programs)' b'x' b'xinstall:: safe' b'x' b'xinstall:: rx.pl' b'x\telse (set -x; $(mkdirhier) $(destdir)$(bindir)); fi' b'x\t$(install) -c $(instbinflags) rx.pl $(destdir)$(bindir)/rx' b'x' b'xinstall.man:: rx.man' b'x\telse (set -x; $(mkdirhier) $(destdir)$(mandir)); fi' b'x\t$(install) -c $(instmanflags) rx.man $(destdir)$(mandir)/rx.$(mansuffix)' b'x' b'xinstall::' b'x\t$(rm) $(bindir)/rxterm' b'x\t$(ln) $(bindir)/rx $(bindir)/rxterm' b'x' b'xsafe:' b'x' b'xshar: safe' b'x\tmakekit -m -p' b'x' b'x# b'x# common rules for all makefiles do not edit' b'x' b'xemptyrule::' b'x' b'xclean::' b'x\t$(rm_cmd) b'x' b'xmakefile::' b'x\t$(rm) makefile.bak; $(mv) makefile makefile.bak; b'x\telse exit fi' b'x\t$(imake_cmd) -dtopdir=$(top) -dcurdir=$(current_dir)' b'x' b'xtags::' b'x\t$(tags) -w *.[ch]' b'x\t$(tags) -xw *.[ch] tags' b'x' b'xsaber:' b'x\t# load $(alldefines) $(srcs)' b'x' b'xosaber:' b'x\t# load $(alldefines) $(objs)' b'x' b'x# b'x# empty rules for directories that do not have subdirs do not edit' b'x' b'xinstall::' b'x' b'xinstall.man::' b'x' b'xmakefiles::' b'x' b'xincludes::' b'x' b'x# b'x# dependencies generated by makedepend' b'x' b'end_of_file' b"if test -ne `wc -c <'makefile'`; then" b'echo shar: \\"\'makefile\'\\" unpacked with wrong size!' b'fi' b"# end of 'makefile'" b'fi' b'if test -f \'rx.man\' -a "-c" then' b'echo shar: will not clobber existing file \\"\'rx.man\'\\"' b'else' b'echo shar: extracting \\"\'rx.man\'\\" characters\\)' b'sed "s/^x//" \'rx.man\' <<\'end_of_file\'' b'x.th rx march "x version b'x.sh name' b'xrx,rxterm,r* remote command, xterm, anything execution' b'x.sh synopsis' b'x.b rx' b'x[' b'x.b \\-l' b'x.i username' b'x]' b'x.i host' b'x[' b'x.i command' b'x]' b'x.br' b'x.b rxterm' b'x[' b'x.b \\-l' b'x.i username' b'x]' b'x.i host' b'x[' b'x.ir args b'x]' b'x.sh description' b'xthe' b'x.b rx' b'xprogram connect to the specified' b'x.i host' b'xand executes the specified' b'x.i command' b'xin the background, returning immediately. to allow the execution' b'xof x programs, it copies a number of environmental variables to' b'xthe remote session. if you omit' b'x.ir command b'xthen rx will start an xterm on the remote host. the' b'x.b rxterm' b'xvarient starts a remote xterm on a host, and also passes' b'x.i args' b'xto the remote xterm as arguments.' b'x.pp' b'xshell metacharacters which are not quoted are interpreted on the local' b'xmachine, while quoted metacharacters are interpreted on the remote' b'xmachine.' b'x.pp' b'xif the name of the file from which' b'x.b rx' b"xis executed is anything other than ``rx,''" b'x.b rx' b"xtakes this name, stripped on a leading ``r'' as the command" b'xto run on the remote host, using any' b'x.i command' b'xparameters as arguments for the remote command.' b'x.pp' b'xif' b'x.b rx' b'xthinks you are using' b'x.b xauth' b'xbased x authorisation, and you are calling to a off-site host, or' b'xto a different username, it will attempt to copy an authorization' b'xkey to the remote account. otherwise it will try to use' b'x.b xhost(1)' b'xto grant access to the remote host.' b'x.sh options' b'x.tp' b'x.bi \\-l username"' b'xuse' b'x.i username' b'xas the remote username instead of your local username. in the absence' b'xof this option, the remote username is the same as your local username.' b'x' b'x.sh environment' b'xif set, the values of path, display, xenvironment, xapplresdir,' b'xxfilesearchpath, xuserfilesearchpath, openwinhome, ld_library_path,' b'xand xauthority are exported to the remote program, unless the' b'xremote username is different, or the remote host is off-site, in which' b'xcase only display is exported, with in all cases any variables named in the' b'xvariable rxenv.' b'x.pp' b'xthe display variable is tweaked as appropriate, to contain as qualified' b'xa hostname as is needed.' b'x.sh diagnostics' b'x.tp' b'x.ib command don\'t recognise my name."' b'x.b rx' b'xcannot decode the name it has been called under. in this case' b'xit prints a warning message, and continues, as normal.' b'x.tp' b'x.b "rx: usage: rx [-l username] hostname [args...]"' b'xthis means it could not decode the arguments given to it.' b'x.sh author' b'x.br' b'xoriginally based on a program with the same name from the' b'x.b gwm' b'xdistribution. to distinguish this "rx" from other programs' b'xwith similar names, you should refer to this program as the' b'x.b glasgow' b'x.br rx b'x.sh "see also"' b'xx(1), rsh(1), xterm(1), xauth(1), xhost(1), gwm(1)' b'x.sh bugs' b'x.b rx' b'xmakes a number of assumptions about the relationship between the' b'xlocal user, and the remote one, depending on whether the remote' b'xhost is onsite or not, and whether an alternative username was used' b'xor not.' b'x.pp' b'xin particular, if either the locally used shell, or the remotely' b'xused shell is the standard bourne shell,' b'x.b sh(1)' b'xthen strange things are more likely to happen. especially when' b"xit's only one of them." b'x.pp' b'xsometimes quoting can get messed up.' b'x.pp' b"xit's too easy to fool the smarts in" b'x.b rx' b'xto make it believe something that is not true, and fail because of it.' b'x.pp' b'xwhen' b'x.b rx' b'xuses' b'x.b xhost' b'xto grant access, the' b'x.b xhost' b'xcommand may fail silently.' b'x.pp' b'xif' b'x.b rx' b'xtries to send to large a command to the remote machine, it will' b'xlikely fail with a parse error from csh. if this happens, you' b'xwill probably have to reduce the size of the exported environment.' b'end_of_file' b"if test -ne `wc -c <'rx.man'`; then" b'echo shar: \\"\'rx.man\'\\" unpacked with wrong size!' b'fi' b"# end of 'rx.man'" b'fi' b'if test -f \'rx.pl\' -a "-c" then' b'echo shar: will not clobber existing file \\"\'rx.pl\'\\"' b'else' b'echo shar: extracting \\"\'rx.pl\'\\" characters\\)' b'sed "s/^x//" \'rx.pl\' <<\'end_of_file\'' b'x#! /usr/local/bin/perl' b'x# config: change the line above to point to your copy of perl.' b'x##############################################################################' b'x# glasgow rx version b'x#' b'x#' b'x# last modified: early april b'x#' b'x# distribution limited, as per the usual mit copyright.' b'x##############################################################################' b'x# remote execution of x programs. based on a script in an old version of gwm.' b'x#' b'x# to install, put rx in your bin and make rxterm a link to it.' b'x# some configuration will be necessary, see "config" comments...' b'x#' b'x# more and more this is less and less like the original....' b'x#' b'x# major hacked to work for our(my) set up, and also partly' b'x# re-written to work with sh, rather than ksh.' b'x#' b"x# maybe i'll turn this into our first zsh script!" b'x#' b'x# looks like it turned into a perl script at some point big improvement.' b'x##############################################################################' b'x# this code tries to be intelligent in the way it works. this means there' b'x# are tons of implicit assumptions about the environment it is run in.' b'x# these assumptions are all valid on the machines i use, and in my' b'x# environment. at the same time, i try to make as few assumptions as possible' b"x# about the remote machine. here's a list of all the more tricky ones..." b'x# that the remote machine has csh. (linux?)' b'x# that $rshell /bin/(k)?sh remote shell /bin/(k)?sh. (make same.)' b'x# if remote shell sh, that $path is compatible. (use csh, etc..)' b'x# i pass a cookie to the remote machine if need be, but does it' b'x# know what to do with a cookie. (eat it?)' b'x# there must be others...' b'x##############################################################################' b"x# why am i using csh to run the remote commands? simply because it doesn't" b'x# interact badly with rsh, and hang waiting for a file descriptor to' b"x# be closed. i'd rather use zsh, or bash, or even perl, but they are not" b'x# as universal as csh.' b'x##############################################################################' b'x#' b'xrequire "stat.pl";' b'x#' b'x# what we called?' b'x#' b'x$argv0 b'x$argv0 s:.*/:: b'x#' b'x# config:' b'x# change these variables to be your domain name, and a pattern that' b'x# will match all variations on your domain name. you must include' b'x# those leading dots!!! if your hostname includes your domain, see' b'x# the code further down, marked "xxx"' b'x#' b'x$dom ".dcs.gla.ac.uk" b'x$dompat "\\.dcs(\\.gla(sgow)?(\\.ac\\.uk)?)?" b'x#' b'x# config:' b'x# change this to your value of bindir, or set the variable to if' b'x# you think your users are smarter than that.' b'x#' b'x$xpaths "/usr/x11/bin" b'x#' b'x# config:' b'x# make this the name of your "remote shell" command.' b'x#' b'x$rsh "rsh" b'x#' b'x# end of config' b'x#' b"x# some variables we'll no doubt use sometime..." b'x#' b'x$usage "$argv0: usage: $argv0 [-l username] hostname [args...]\\n" b'x$rshell (getpwuid($<))[8] "/bin/sh" b'x$home $env{"home"} (getpwuid($<))[7] b'x$xauth $env{"xauthority"} $home "/.xauthority" b'x$logf "~/.rx.log" b'x$debug b'x#' b'x# before anything else, close stdin. this might stop rx hanging' b'x# due to rsh weirdness.' b'x#' b'xclose(stdin);' b'x#' b'x# do a "-l" flag...' b'x#' b'xif ($argv[0] eq "-l") b'x shift b'x $user $argv[0] die $usage b'x shift b'x}' b'x#' b'x# pick a host, any host...' b'x#' b'x$mach $argv[0] die $usage b'xshift b'x#' b'x# things to think about for the remote machine.' b'x#' b'x$mach s/$dompat// b'x$offsite $mach b'x#' b"x# where am i? seems we can't trust the dumb user to set hostname right!" b'x#' b'x#$hostname=$env{hostname} `hostname` ;\t\t# current host' b'x$hostname=`hostname` ;\t\t\t\t\t# current host' b'x$hostname s/\\n// b'x#' b'x# if all your hostnames include your domain, comment out the next line.' b'x#' b'xif $offsite $hostname $hostname $dom }\t# xxx' b'x#' b'x# now we know where we are, and they are, are they different?' b'x#' b'x$diff $hostname ne $mach b'x#' b'x# what is the display going to be?' b'x# danger heavy regular expressions follow...' b'x# this needs to be re-written to be modular and can so be extended to' b'x# support resetting host:* to unix:*, as required.' b'x#' b'x$display $env{"display"} b'x$display s/$dompat// b'x$display s/^(unix)?(:\\d(\\.\\d)?)$/$hostname$2/ if ($diff) b'x$display s/^([^.]*)(:\\d(\\.\\d)?)$/$1$dom$2/ if ($offsite) b'x$env{"display"} $display b'x#' b'x# here comes the hard bit in sh. quote our args.' b'x# also have to quote quotes. to cope with csh braindamage,' b"x# quotes are quoted thus; b'x# so for an arg "foo\'bar", we get "\'foo\'\\\'\'bar\'".' b'x#' b"x s#\\'#\\'\\\\\\'\\'#g b"x s#(.*)#\\'$1\\'# b'x}' b'x#' b'x# so what we doing?' b'x#' b'xprog: b'x if ($argv0 eq "rx") last prog b'x if ($argv0 eq "rxterm") b'x last prog b'x b'x warn "$argv0: don\'t recognise my name." b'x}' b'x#' b'x# if nothing else, become an rxterm.' b'x#' b'x}' b'x#' b'x# some special considerations if we are not ourselves on the other side.' b'x#' b'xif ($offsite $user) b'x b'x we want to pass a cookie here.' b'x b'x if (-e $xauth) b'x b'x this is going to be unsecure, as the cookie will appear in a number' b"x of command line args. but at least it'll work." b'x this will need enhanced if we ever fix the code above to' b'x set display to when we return to the server.' b'x b'x $cookie `path=\\$path:$xpaths xauth list $display` b'x chop($cookie) b'x else b'x b'x yuk. what a crock. i hate doing this.' b'x b'x system("xhost +$mach /dev/null 2/dev/null") if ($diff) b'x b'x b'x we really only want to pass a value for $display.' b'x b'x} else b'x b'x some variables we wish to export' b'x b'x "display",' b'x "xenvironment",' b'x "xfilesearchpath",' b'x "xuserfilesearchpath",' b'x "xapplresdir",' b'x "openwinhome",' b'x "ld_library_path",' b'x "manpath",\t\t# for "rxman", and bourne shell users.' b'x "xauthority",' b'x split(\' \',$env{"rxenv"}),' b'x b'x b'x braindead bourne shell, needs to be given a $path...' b'x we would rather not pass the current $path, because it might not work' b"x on the destination machine. i'd rather it was set by the user's" b'x remote shell during the rsh.' b'x fortunately, all *my* x programs are in an arch independant place, and' b"x so it shouldn't cos a problem, locally." b'x we check against $rshell, because they might be running another shell,' b"x differant from their login shell. i know, sounds weird, but it's too" b'x common round here.' b"x i've also included ksh in the brain-damage, cos i can't see an easy way" b'x to pass throught $env{"env"} without it being too late. (we only have' b'x one person who has ksh as a login shell anyway...)' b"x oh, yeah.. we are assuming that if it's bourne shell here, then it's" b'x bourne shell there. much more important than this is that it it isnt' b'x bourne shell here, it better not be bourne shell there.' b'x b'x}' b'x#' b'x# validate $pwd routine...' b'x#' b'xsub validate_pwd b'x local($pwd) b'x' b'x unless (defined($pwd)) return undef; b'x if (($pwdstats[$st_dev] $dotstats[$st_dev]) b'x ($pwdstats[$st_ino] $dotstats[$st_ino])) return undef; b'x $pwd;' b'x}' b'x#' b'x# try and find a nice, valid, pwd.' b'x#' b'xpresent: b'x if ($pwd $env{"pwd"}) b'x $foopwd $pwd b'x $foopwd s#(/tmp_mnt|/export)?/(.*)#/$2# b'x $pwd &validate_pwd($foopwd) &validate_pwd($pwd) b'x b'x unless ($pwd) b'x chop($pwd `pwd`) b'x $foopwd $pwd b'x $foopwd s#(/tmp_mnt|/export)?/(.*)#/$2# b'x $pwd &validate_pwd($foopwd) &validate_pwd($pwd) $home;' b'x b'x}' b"x$pwd s#(.*)#\\'$1\\'# b'x#' b'x# try to find somewhere nice to live on the other side.' b'x#' b'xunless ($offsite) b'x}' b'x#' b'x# start building the full command.' b'x#' b'x ($val $env{$var}) b'x}' b'x#' b'x# some commands to do on the other side...' b'x#' b'x#' b'x# build the remote command.' b'x#' b'x$remote s#\\"#\\\\\\"#g b'x$remote $remote b'x#' b'x# build the arg list for the exec.' b'x#' b'x#' b'x# do it!' b'x#' b'xif ($debug) b'x} else b'x}' b'x#' b"x# rsh doesn't return any indication of how it went over" b"x# on the other side, but that's ok, cos we aint going to" b'x# wait around to see what happened.' b'x#' b'xexit b'x#' b'x# the end' b'end_of_file' b"if test -ne `wc -c <'rx.pl'`; then" b'echo shar: \\"\'rx.pl\'\\" unpacked with wrong size!' b'fi' b"chmod +x 'rx.pl'" b"# end of 'rx.pl'" b'fi' b'echo shar: end of archive \\(of b'cp /dev/null ark1isdone' b'missing=""' b'for i in do' b'if test -f ark${i}isdone then' b'missing="${missing} ${i}"' b'fi' b'done' b'if test "${missing}" then' b'echo you have the archive.' b'rm -f ark[1-9]isdone' b'else' b'echo you still need to unpack the following archives:' b'echo ${missing}' b'fi' b'## end of shell archive.' b'exit b'' b'' b'--' b'--- would the *real* unix operating system please stand up. 