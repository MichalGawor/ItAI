b'' b'may i suggest that any any proposed cipher system' b"having less entropy than the user's key and message can have" b'an embedded subliminal channel as big as the' b'difference in entropies between the entropy of the user' b'input (message) and the entropy of the output?' b'' b'for example, take plain des. the unsuspecting' b'user inputs a string "plaintext" to be enciphered.' b'' b'he cranks the algorithm which has been hacked' b'by george quisling and comes out with j*3h4902d.' b'' b'nine char in and nine chars out. right?' b'' b'the unsepecting user ships the ciphertext' b'to be decrpyted and the message "plaintext"' b'is produced. everything fine, right? nope.' b'' b'' b'imagine the algorithm did a lz compression' b'on plaintext before desing. (compressing is' b'down to four characters with more entropy:' b'' b'9#wj' b'' b'the opponent now pads the message with his' b'own message, also compressed' b'' b'' b'before applying des to the concatenated' b'compressed pairs. when decrpyted, the' b'first compressed message is stripped off' b'and declared sent. unbeknowst to the' b'receiver, the opponents accomplice collects' b'the remaining message in the bit bucket and' b'uncompresses to kill now.' b'' b'and to prevent all such subliminal or covert' b'storage channels you would need to have' b'maximal entropy all the time which is' b'a priori impossible because (for example)' b'a stereotypical message might be' b'replaced by one bit in the output reserving' b'the rest of the output bits for the long' b'covert message.' b'' b'in other words, if you opponent get to muck' b'with the algorithm you either have got to' b'muck with it last or concede his possible' b'embedding of covert channels.' b'' b'in other words, if you present a message' b'to an opponet with less than maximal entropy' b'then you have given him free bits of storage.' b'' b'--' b'' 