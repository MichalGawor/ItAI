b'' b'' b"i'm using int15h to read my joystick, and it is hideously slow. something" b'like of my cpu time is being spent reading the joystick, and this' b'is in a program that does nothing but printf() and joyread().' b'' b'if you only do read/print then there is no reason for the joystick stuff' b'not to take of the time even if it is efficient.' b'' b'the problem is that a lot of programs trap int15h like smartdrv and' b'so it is a slow as hell interface. can i read the joystick port in' b"a reasonably safe fashion via polling? and that isn't platform or" b'clockspeed specific?' b'' b'the truth is that int 15h joystick reading is slow. i read it directly' b'from the hardware port. note that doing so exposes you to intermittent' b'disturbance from interrupts, so you may want to read (say) twice in a' b"row and keep the lower results. don't just turn interrupts off, it may" b'prove detrimental to the health of any high speed comms and other' b'devices.' b'' b'here is an example of how to do this:' b'' b'/* joy.c b'' b'/* an example of how to read pc joystick port by polling the hardware port' b'* directly.' b'* uses inp()/outp() for byte port access.' b"* will timeout when 'int count=0' counts up to zero." b'* this sample reads one port (a is presented and b is in the comments).' b'* you can read both at once by merging the two, but it will time out' b'* when either joystick is not connected.' b'*' b'* there is no need to optimize this routine since it runs for as long as' b'* the joystick circuitry needs.' b'*' b'*/' b'' b'#include <stdio.h' b'#include <stdlib.h' b'#include <conio.h' b'' b'extern int readjoy (int *x, int *y, int *b1, int *b2);' b'' b'#define joyport\t0x201' b'' b'#define\txjoy\t0x01\t/* for joystick b use 0x04 b'#define\tyjoy\t0x02\t/* for joystick b use 0x08 b'#define xymask\t(xjoy|yjoy)' b'#define\tbut1\t0x10\t/* for joystick b use 0x40 b'#define\tbut2\t0x20\t/* for joystick b use 0x80 b'' b'int\t\t\t\t\t/* returns if ok b'readjoy (int *x, int *y, int *b1, int *b2)' b'{' b'register int\tcount;' b'register char\ttemp, joy;' b'' b'temp (char)xymask;' b'count b'outp (joyport, 0);\t\t/* set trigger b'do b'temp (joy (char)inp (joyport));' b'if (temp xjoy)' b'*x count;' b'if (temp yjoy)' b'*y count;' b'} while (++count ((temp joy) xymask));' b'*b1 !(joy but1);' b'*b2 !(joy but2);' b'' b'return (!count);' b'}' b'' b'/* this main() is for demonstration.' b'*/' b'' b'int' b'main b'{' b'int\trc, x, y, b1, b2;' b'' b'printf ("hit any key to exit\\n");' b'while (!kbhit b'rc readjoy (&x, &y, &b1, &b2);' b'printf ("\\r%d %3d %3d %d %d", rc, x, y, b1, b2);' b'}' b'}' 