b'' b'' b'backupable, if restored to the same machine (depends on the' b"programmer... don't use a disk drive characteristic!) if the user did" b'an upgrade to the machine, he/she should reinstall all programs any way.' b' no document look-up, no disk wear-and-tear! b'' b' this is not a good idea.. i upgraded my motherboard last fall. i would' b'have been quite pissed at any software that would have forced me to' b'reinstall simply because i changed motherboards. b'' b'opinion is understandable. i assume you have a tape drive? not all' b'of us have about floppies around for backup, you know.' b'' b' any info in the bios is too volatile to use as a checksum. are you' b'going to require that a user re-install all their software if they add' b"4mb of ram to their computer? i did that a couple of weeks ago. it's in" b'the bios, and if software had told me "this isn\'t the machine you' b'installed me on" i would never have used that software again. really bad' b'idea.' b'' b"ram is something you add all the time, so no. it's more like bios" b'manufacturer and/or processor type (386/486/etc). data cannot be used,' b'esp with these new flash rom bios machines with updates on a diskette.' b'' b'on the other hand, to make this less intrusive it could be disguised as' b'"please insert original disk #xx as i need file yyyyyy for update". b'it would be perfectly reasonable... sort of.' b'' b' i did not say that the originals would allow only one install. the' b"user's conscience should do that." b'' b" this is silly. it's much easier to loan disks to a friend and let" b'them do an install than to backup your copy already on disk, and then' b"give them that. your scheme isn't going to stop anyone." b'' b'of course it is easier. are you saying then the originals should allow' b'only one install? what is your point?' b'' b' you know how many bytes you need to change in x-wing to disable b"the quiz? two! yes, two! (and don't ask me which ones they are.)" b'' b' do you know any assembly language at all? all anyone needs to do if' b'find the part of the code that does the quiz, and insert a jmp' b'instruction to just completely skip it. not that difficult, really! and' b'there is very little that commpanies can do to stop this type of thing.' b'using pklite or some similar utility would help, but only if the' b'resulting compressed .exe were tagged as uncompressable.' b'' b'i know x86 and 680x0 assembly quite well, thank you. i know exactly which' b'two bytes need to be changed, i have the code to do them too. i just said' b'"don\'t ask me which ones." i didn\'t say i don\'t know what that means.' b'' b'such hacking can be easily discouraged by adding anti-patching code which' b'does a self-check upon execution and refuse to load if crc does not match' b'value stored (encrypted, of course) in the program. it could be claimed' b'as a part of anti-virus code, and it would not be far from the truth.' b'' b' what i believe the companies should do is implement the above plus b'a special patch once the user registers that loudly exclaims upon bootup' b' "registered to xxxxx address, city, state zip" and disables the' b'above.' b'' b' this is by far the best idea you presented in your post. making it' b'plainly obvious who registered is going to stop casual pirates. but, the' b'determined ones are just going to answer "joe blow" to the question of' b'"what\'s your name" so this won\'t stop them in the long run.' b'' b'did anyone read what i wrote? that is not what i wrote! (or meant!)' b'' b'what i said was the program should have certain restriction (such as the' b'restrict-to-one-machine) until the program is registered with the' b'manufacturer. the manufacturer will then supply the' b'then-proven-legitimate-user with a patch that will disable the restriction' b'and proudly proclaim the legal copy with the "registered to xxx" screen.' b'' b' pirates are always going to win this fight. they simply have more' b'time to work on the software and figure out the protection scheme.' b'' b'of course they will, but that was not my point. the purpose of copy' b'protection is to discourage casual pirates ("oh, can i have a copy of' b'that?"/"sure, here.") and the less sophisticated pirates ("let\'s look for' b'all those calls to int13h...") any one determined enough to break copy' b'protection can and will succeed. they can always backtrace the entire' b'load-sequence of the program. the point of copy protection is to make' b'such attempts take as long as possible while not intruding upon the uses' b'(or to minimize such intrusion) of legitimate use. pirates who see copy' b'protection as a challenge love breaking them, and no amount of copy' b'protection will stop them, but the rest of us will be stopped. how many' b'of these hardcore pirates are there compared to rest of us? not that many.' b'' b'--kasey chang' 