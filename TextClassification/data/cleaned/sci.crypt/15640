b'' b'' b'' b' :thousands? tens of thousands? do some arithmetic, please... skipjack' b' :has possible keys.' b'' b" we don't yet know if all bits count." b'' b"that doesn't worry me at all; they're not going to cheat at something" b'they can get caught at. and key size is one of the things that can be' b'verified externally. feed lots of random key/input pairs into the' b'chip, then try flipping random key bits, and see what happens to the' b'output. we already know what *should* happen about half the output' b'bits should vary, on average, from a 1-bit key change or input change.' b'' b'if they were out to build a weak cryptosystem, it might be the case that' b'some of the bits are much less powerful than others, in the sense that' b'they only enter into the encryption very late in the game. by contrast,' b'des was designed to use each key bit as early as possible; the output' b"change rate appears as early as round again, though, i don't think" b"nsa is going to cheat that crudely; they're likely to get caught." b'' b'consider a cryptosytem that starts out by xoring bits and and' b'not using either of these bits except through this xor. this system' b'makes early use of every bit. but an exhaustive key search would now' b'only have keys to search. your test by varying single key bits' b"wouldn't turn up anything interesting." b'' b"remember that they've promised to let a committee of outside experts see" b'the cryptosystem design. if you assume something des-like, a biased' b'subkey generation schedule will stick out like a sore thumb.' b'' b'the algorithm i suggest above would stick out like a sore thumb, but' b"i'm sure i could design a system with a more subtle key redundancy" b'which was well-hidden, but would still make an exhaustive key search' b"take far less than encryptions. i don't believe your claim that" b'the real keysize can be verified externally.' b'' b'andy latto' 