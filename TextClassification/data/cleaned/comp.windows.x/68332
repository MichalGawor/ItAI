b'' b'hi, all:' b'i am studying the book "unix desktop guide to open look".' b'there is an example winprop.c that demonstrate how to program' b'wm_protocols property in chapter it can run, but only show the' b'static text messages, no notice pop_up. what is the problem?' b'thanks in advance for help!!1\t iop' b'/*-------------------------------------------------------------*/' b'/* file: winprop.c' b'*' b'* shows how to set properties on a window.' b'*' b'*/' b'#include <x11/xatom.h\t/* for definition of xa_atom b'#include <x11/intrinsic.h' b'#include <x11/stringdefs.h' b'#include <xol/openlook.h' b'#include <xol/statictext.h' b'#include <xol/oblongbutt.h' b'#include <xol/notice.h' b'/* this file defines the atoms with _ol_ prefix b'/* id of the top-level and noticeshell widget b'static widget top_level, notice_shell;' b'static widget make_notice();' b'static char message[] "clients use properties to communicate b'with the window manager. this example illustrates how an open b'look application requests notification from the window manager b'when certain events occur. the communication is in the form of b'a clientmessage event that the application processes in an b'event-handler.";' b'/* atoms used for inter-client communication b'atom atom_wm_protocols, atom_wm_delete_window,' b'atom_wm_save_yourself;' b'static void handle_wm_messages();' b'static void save_and_exit();' b'static void save_yourself();' b'static void pop_notice();' b'static void do_exit();' b'/* string to hold comand line (for use in responding to' b'* the wm_save_yourself protocol message.' b'*/' b'char saved_cmdline[128];' b'/*-------------------------------------------------------------*/' b'void main(argc, argv)' b'int argc;' b'char **argv;' b'{' b'widget w;' b'int i;' b'/* save the command-line for use in responding to the' b'* wm_save_yourself protocol message.' b'*/' b'sprintf(saved_cmdline, "%s argv[0]);' b'if(argc b'for(i i argc; i++)' b'{' b'strcat(saved_cmdline, argv[i]);' b'strcat(saved_cmdline, b'}' b'/* create and initialize the top-level widget b'top_level olinitialize(argv[0], "ol_main", null,' b'0, &argc, argv);' b'/* create a statictext widget b'w xtvacreatemanagedwidget("stext",' b'statictextwidgetclass, top_level,' b'xtnstring, message,' b'xtnwidth, b'null);' b'/* create a noticeshell widget for later use b'make_notice(top_level);' b'/* intern the atoms b'atom_wm_protocols xinternatom(xtdisplay(w),' b'"wm_protocols", false);' b'atom_wm_delete_window xinternatom(xtdisplay(w),' b'"wm_delete_window", false);' b'atom_wm_save_yourself xinternatom(xtdisplay(w),' b'"wm_save_yourself", false);' b'/* add an event-handler to process clientmessage events sent' b'* by the window manager' b'*/' b'xtaddeventhandler(top_level, noeventmask, true,' b'handle_wm_messages, null);' b'/* realize the widgets and start processing events b'xtrealizewidget(top_level);' b'/* append the properties wm_delete_window and wm_save_yourself' b'* to the definition of the wm_protocols property. this step' b'* requires the window id of the top-level widget. the window' b'* id is valid only after the widget is realized.' b'*/' b'xchangeproperty(xtdisplay(top_level), xtwindow(top_level),' b'atom_wm_protocols, xa_atom, b'propmodeappend,' b'&atom_wm_delete_window, b'xchangeproperty(xtdisplay(top_level), xtwindow(top_level),' b'atom_wm_protocols, xa_atom, b'propmodeappend,' b'&atom_wm_save_yourself, b'xtmainloop();' b'}' b'/*-------------------------------------------------------------*/' b'static void handle_wm_messages(w, client_data, p_event)' b'widget\t w;' b'xtpointer client_data;' b'xevent\t *p_event;' b'{' b'if(p_event-type clientmessage b'p_event-xclient.message_type atom_wm_protocols)' b'{' b'if(p_event-xclient.data.l[0] atom_wm_delete_window)' b'{' b'save_and_exit();' b'}' b'if(p_event-xclient.data.l[0] atom_wm_save_yourself)' b'{' b'save_yourself();' b'}' b'}' b'}' b'/*-------------------------------------------------------------*/' b'static void save_and_exit()' b'{' b'/* display a notice giving the user a chance to respond b'pop_notice(top_level, notice_shell);' b'}' b'/*-------------------------------------------------------------*/' b'static void save_yourself()' b'{' b'/* set the wm_command property to the saved command-line. b'xchangeproperty(xtdisplay(top_level), xtwindow(top_level),' b'xa_wm_command, xa_string, b'propmodereplace, saved_cmdline,' b'strlen(saved_cmdline) b'}' b'/*-------------------------------------------------------------*/' b'static widget make_notice(parent)' b'widget parent;' b'{' b'widget w, n_text, n_control, n_exit, n_cancel;' b'/* create a button and provide a callback to pop up a notice b'w xtvacreatemanagedwidget("quitbutton",' b'oblongbuttonwidgetclass, parent,' b'xtnlabel, "exit...",' b'null);' b'xtaddcallback(w, xtnselect, pop_notice, null);' b'/* create the noticeshell widget. note that you have to use' b'* xtvacreatepopupshell instead of the usual' b'* xtvacreatemanagedwidget.' b'*/' b'notice_shell xtvacreatepopupshell("quitnotice",' b'noticeshellwidgetclass, w,' b'null);' b'/* get the id of the text and control area widgets of the' b'* noticeshell.' b'*/' b'xtvagetvalues(notice_shell,' b'xtntextarea,\t &n_text,' b'xtncontrolarea, &n_control,' b'null);' b'/* place a message in the text area of the noticeshell b'xtvasetvalues(n_text,' b'xtnstring, "please confirm exit from program.",' b'null);' b'/* add buttons to the control area of the noticeshell.' b'* each button has an appropriate callback.' b'*/' b'n_exit xtvacreatemanagedwidget("noticeexit",' b'oblongbuttonwidgetclass, n_control,' b'xtnlabel, "exit",' b'null);' b'xtaddcallback(n_exit, xtnselect, do_exit, null);' b'n_cancel xtvacreatemanagedwidget("noticecancel",' b'oblongbuttonwidgetclass, n_control,' b'xtnlabel, "cancel",' b'xtndefault, true,' b'null);' b'return w;' b'}' b'/*-------------------------------------------------------------*/' b'static void pop_notice(w_emanate, w_notice)' b'widget\t w_emanate, w_notice;' b'{' b'xtvasetvalues(w_notice, xtnemanatewidget, w_emanate, null);' b'/* pop up the noticeshell widget. the noticeshell widget makes' b'* sure that the aplication waits until the user selects from' b"* one of the buttons in the noticeshell's control area." b'*/' b'xtpopup(w_notice, xtgrabexclusive);' b'}' b'/*-------------------------------------------------------------*/' b'static void do_exit(w, call_data, client_data)' b'widget\t w;' b'xtpointer call_data, client_data;' b'{' b'xclosedisplay(xtdisplay(w));' b'exit(0);' b'}' 