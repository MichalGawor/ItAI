b'' b'' b'' b'thousands? tens of thousands? do some arithmetic, please... skipjack' b"has possible keys. let's assume a brute-force engine like that" b"hypothesized for des: microsecond per trial, million chips. that's" b'10^12 trials per second, or about years for trials. well,' b'maybe they can get chips running at one trial per nanosecond, and build' b'a machine with million chips. sure only years for each solution.' b'' b'but there is a much more pernicious problem with the scheme as' b'proposed. building a brute force machine to test possible keys' b'if you have the other half from one escrow agent is easy. (one chip,' b'one test per microsecond gives you one break every two weeks, and that' b'break gives you all messages involving that phone.)' b'' b'the xor scheme so that the files from one escrow agent gives you' b'nothing is an improvement, but notice that xoring with (truely random)' b'bit strings allows for an arbitrary number of escrow agents. using b'for xor, sk for the escrowed key, and a and b for two random bit' b'strings, hand sk+a+b, sk+a, and sk+b to three escrow agents. it is' b'possible to come with an encoding scheme to match any escrow pattern,' b'for example of such that fewer cooperating escrow agents gives' b'the cracking agency no benefit.' b'' b'--' b'' b'robert i. eachus' b'' b'with standard_disclaimer;' b'use standard_disclaimer;' b'function message (text: in clever_ideas) return better_ideas is...' 