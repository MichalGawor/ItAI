b'' b'/*' b'' b"this program doesn't detect edges with compass operators and a laplacian" b'operator. it should output raw grey-scale images with edges. the output' b"doesn't look like edges at all." b'' b'in novicee terms, how do i correct the errors? any improvements are welcome.' b"(i'll even accept your corrected code.)" b'' b'(if i convolve the input.image with a digital gaussian by to remove' b'noise, will i get an improvement with the laplacian.)' b'' b'--------------------------2 types of edge detection-------------------------*/' b'#include <stdio.h' b'#include <math.h' b'' b'#define imagewidth b'#define imageheight b'' b'unsigned char input_image [imageheight][imagewidth];' b'' b'unsigned char angles_wanted [imageheight][imagewidth];' b'unsigned char magnitude_image [imageheight][imagewidth];' b'' b'int laplace_op1 b'' b'int compass_op1 b'int compass_op2 b'int compass_op3 b'int compass_op4 b'int compass_op5 b'int compass_op6 b'int compass_op7 b'int compass_op8 b'' b'void compass (row,col)' b'int row,col;' b'{' b'int value;' b'int op_rows, op_cols;' b'int compass1,compass2,compass3,compass4;' b'int compass5,compass6,compass7,compass8;' b'' b'compass1 compass2 compass3 compass4 b'compass5 compass6 compass7 compass8 b'' b'for (op_rows op_rows op_rows++)' b'for (op_cols op_cols op_cols++)' b'{' b'if (((row op_rows) ((col op_cols) b'{' b'' b'compass1 ((int) input_image [row op_rows][col op_cols]) b'compass_op1 [op_rows 1][op_cols b'compass2 ((int) input_image [row op_rows][col op_cols]) b'compass_op2 [op_rows 1][op_cols b'compass3 ((int) input_image [row op_rows][col op_cols]) b'compass_op3 [op_rows 1][op_cols b'compass4 ((int) input_image [row op_rows][col op_cols]) b'compass_op4 [op_rows 1][op_cols b'compass5 ((int) input_image [row op_rows][col op_cols]) b'compass_op5 [op_rows 1][op_cols b'compass6 ((int) input_image [row op_rows][col op_cols]) b'compass_op6 [op_rows 1][op_cols b'compass7 ((int) input_image [row op_rows][col op_cols]) b'compass_op7 [op_rows 1][op_cols b'compass8 ((int) input_image [row op_rows][col op_cols]) b'compass_op8 [op_rows 1][op_cols b'' b'}' b'}' b'if (compass1 compass2)' b'value compass2;' b'else' b'value compass1;' b'if (value compass3)' b'value compass3;' b'if (value compass4)' b'value compass4;' b'if (value compass5)' b'value compass5;' b'if (value compass6)' b'value compass6;' b'if (value compass7)' b'value compass7;' b'if (value compass8)' b'value compass8;' b'' b'magnitude_image [row][col] (char) value;' b'}' b'' b'void laplace1 (row,col)' b'int row,col;' b'{' b'int op_rows, op_cols;' b'' b'magnitude_image [row][col] b'for (op_rows op_rows op_rows++)' b'for (op_cols op_cols op_cols++)' b'if (((row op_rows) ((col op_cols) b'magnitude_image [row][col] b'(char) ((int)magnitude_image [row][col] b'((int) input_image [row op_rows][col op_cols] b'laplace_op1 [op_rows 1][op_cols b'}' b'' b'main b'{' b'file *original_image_fp;' b'file *laplace1_mag_fp,*laplace2_mag_fp,*laplace3_mag_fp;' b'file *compass_mag_fp;' b'' b'int row, col, algo_count;' b'' b'original_image_fp fopen ("input.image","rb");' b'' b'laplace1_mag_fp fopen ("laplace1_magnitude","wb");' b'compass_mag_fp fopen ("compass_magnitude","wb");' b'' b'fread ((unsigned char input_image,sizeof(unsigned char),imageheight imagewidth,original_image_fp);' b'for (algo_count algo_count 2;algo_count b'{' b'for (row row imageheight; row++)' b'for (col col imagewidth; col++)' b'if (!algo_count)' b'laplace1 (row,col);' b'else' b'compass (row,col);' b'' b'if (!algo_count)' b'fwrite(magnitude_image,sizeof(char),imageheight imagewidth,laplace1_mag_fp);' b'else' b'fwrite(magnitude_image,sizeof(char),imageheight imagewidth,compass_mag_fp);' b'}' b'}' b'' b'' b'--' b'| ###|for a lot of .au music: ftp sounds.sdsu.edu' b'| ###|then cat file.au /dev/audio' b'| |ub library catalog:telnet bison.acsu.buffalo.edu' b'|_ _|(when in doubt ask: xarchie, xgopher, or xwais.)' 