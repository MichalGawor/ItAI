b'' b'[stuff deleted]' b'did i once hear that in order for the date to advance, something, like a' b'clock, *has* to make a get date system call? apparently, the clock' b"hardware interrupt and bios don't do this (date advance) automatically. the" b'get date call notices that a "midnight reset" flag has been set, and then' b'then advances the date.' b'' b'anybody with more info?' b'' b"there are two 'problems':" b'(1) the bios tod routine which updates the bios clock uses only bit' b'for day increment, so a second wrapping of the clock past midnight' b'will get lost if no one calls the bios to read the clock in the' b'meantime, and' b"(2) the bios resets the day wrap indicator on the first 'get date'" b'call from anybody (after the wrap indicator has been set). so' b"unless the first bios 'get date' call after midnight is done by" b"the dos 'kernel' (which is the only part of dos which knows how to" b'increment the date, the day wrap indication is normally lost.' b"my guess is that kevin's 'menu' system uses bios calls to read the" b'clock (in order to display the time), and is hence the entity which' b"causes the day wrap indication to get lost. even if the 'menu' system" b"'notices' the day 'wrap' (which i think is indicated by a non-zero" b"value in al), there really isn't any particularly good way to tell dos" b"about it, so that dos can update the day. the menu system 'should' use" b"dos calls to get the time, which would cause the dos 'kernel' to do" b'the bios call, and the wrap indicator would hence be processed' b"properly. possibly, though, the 'menu' system can't easily use dos" b'calls for time, because dos is not reentrant, and perhaps time' b"incrementing ofters occur while the 'menu' system is 'inside' some" b'other dos call.' b'' b'wally bass' 