b'' b' nick kisseberth) looks interesting, but i need someone to point me to some' b' documentation. is this method likely to give better results than server-' b" resident pixmaps? i'd also be interested in looking at the xview code" b' mentioned above...' b'' b"there's documentation on how to use the shared memory extension in the" b'x11r5 distribution.' b'' b'actually, i just finished writing a motif animation program...' b'(take-lots-of-image-data-and-display-it-pretty-darn-fast). when using' b'on-server pixmaps or shared memory, i had to insert a delay loop to keep' b'it from going too quickly testing both methods side by side, they' b'were just about equal.' b'' b"the advantage of shm is that your x server doesn't grow to ridiculous" b'sizes; but pixmaps can work over a network and *are* removed if your' b'application dies (one tends to use ipcrm manually quite a bit when' b'debugging shm apps).' b'' b'shared memory also has the problem that some operating systems (e.g.' b'ultrix) seem to allow only a small number of segments to be' b'attached to a process at once; consequently, a redraw becomes' b"xshmattach();xshmputimage();xshmdetach(); on dec systems. and dec's b"bit displays (like the ones i tend to use most often) don't seem to" b'support the extension (maybe someone compiled them wrong?), and using' b'pixmaps causes the x server to crash (failed mallocs), so one *has* to' b"use the local unix domain socket (which really isn't that bad; one" b'copies the info three times per redraw instead of one).' b'' b'in short: allowing all three forms of display, within the program is a' b'good thing (minus shm if running over a network), and let the user pick' b'whatever feels fastest.' b'' b'(i just use an ximagehandler class and forget about it b'' b')rob' 