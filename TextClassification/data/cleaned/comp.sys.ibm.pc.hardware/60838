b'' b':' b': \ti am interrested in the extrodinarily simple concept of the null modem' b": cable. (actually i have no idea, so don't count that last statement.) what i'm" b": asking is what pins does it use (or what are it's specifications?) i just want" b": to solder one myself instead of buying one. i don't even know what port is" b': used.' b':' b':' b': kevin' b':' b": p.s. i'm intending to use the cable for pc-to-pc transfers (via lap-link or" b': telix. ideas and info gladly accepted.)' b'' b'i do not have specific knowledge of lap-link or telix, but my recommendation' b"for any package is to follow each one's instructions for making the null-" b"modem cable. the reason is that each one may be different since there isn't" b'really a standard for pc to pc communications. the following is a tutorial' b'i wrote up that will give you an understanding about rs-232 and null modems,' b'but you should still check your software!' b'' b'i will eplain a couple of details of rs-232. rs-232 is' b'a commumications specification for communicating between a computer and a' b'modem. actually it can be between any end system and any communications' b'hardware. the terminology used is data terminal equipment (dte) and data' b'communications equipment (dce). rs-232 spells out the voltage levels, the' b'connector type, the pinouts, and the signal protocols. the connector is' b'a "db-25" but ibm has set an alternative "standard" of db-9. the primary' b'signals are transmit data (td), recieve data (rd), and signal ground (sg).' b'there are other signals that provide control between the dte and the dce.' b'for example, the dte announces that it is powered up and ready to participate' b'in communications via the data terminal ready (dtr) signal. dtr is an' b'output on the dte and an input on the dce. similarly, the dce announces that' b'it is ready to participate in communications via the data set ready (dsr)' b"signal. dsr is an input on the dte and an output on the dce. ok that's" b'five signals; there are only four more of interest. the request to send (rts)' b'signal is an output from the dte (and an input to the dce) that is used' b'to ask the dce permission to send data. if the dce agrees, it sends an ok' b'via the clear to send (cts) signal. (for completeness, the cts is an input' b'to the dte and an output from the dce). the other two signals (of interest)' b'are ring indicator (ri) and data carrier detect (dcd). these are both inputs' b'to the dte and outputs from the dce. ri is just what you would expect b'a signal to the dte saying that someone is attempting to establish a connection' b'to the dce. this is rather specific to the modem telephone line setup.' b'dcd is a way for the dce to announce that the "connection" has been established' b"i.e. the local dce is talking to some remote dce. there that's it. oh" b'there are many other rs-232 signals defined, but they are obsolete. i have' b'explained the nine signals that are on a pc. the pinouts are as follows:' b'' b'name db-9 db-25' b'sg b'td b'rd b'dtr b'dsr b'dcd b'rts b'cts b'ri b'' b'now to address your problem at hand. when you connect a pc to a pc (a dte' b'to a dte), there is no dce pair in the middle and therefore the rs-232' b"signal definitions don't work out quite right. there is no dce to assert" b'the cts, dsr, dcd, or ri. so the common thing to do is to not use these' b'signals at all and also forget about the dtr and rts outputs as well. if' b'this is done you simply make a null modem (a cable) that passes through sg,' b'and crosses td and rd (i.e. pin of one end connects to pin at the other' b'end, etc). the problem with this solution is that a pc that wants to send' b'data has no way of knowing if the other pc is ready. it would have to just' b'send the data and hope it got through. therefore a better null modem would' b'include the dtr/dsr pair crossed. a particular point a confusion is in the' b'software area. just because you run the wires does not mean that the soft-' b'ware will use them. if you are using the built-in bios to control the' b'serial port, then the bios dictates what wires you need and how they are to' b'be used. but if you have a comm. package such as brooklyn bridge, or lap-' b'link or telix, then those packages dictate the cabling requirements. the' b'only thing you can guess reliably is the sg, td, and rd. the dtr/dsr is also' b'fairly common. there is one more issue that needs to be addressed here. and' b"that is flow control. in the rs-232 scenerio, the dce's are responsible for" b"flow control and it is assumed that the dce couldn't possible over-run the" b'dte. by this i mean that as long as the dte has its dtr line asserted, the' b'dce will send data without requesting permission first. note the contrast' b'to the other direction of data flow: the dte must request permission by' b'asserting the rts line and it must wait for the cts signal before it can' b'send. and now in the dte to dte scenerio, the question is do you need flow' b'control? the answser is usually. but how? for non-binary communications,' b'one common technique is xon xoff which is implemented in software no' b'wires are dedicated to flow control; the td and rd carry the xon and xoff' b'commands. this type of flow control can be used in addition to hardware' b"flow control, but the problem is that you can't send binary data because" b'your data might include the xon or xoff codes and cause erroneous conrol' b'signals. (a work around is to have the software insert and extract "escape"' b'codes, but the hardware flow control is prefered). the problem with hard-' b'ware flow control is that there is no standard. there are lots of ways to' b'do it and i bet they have all been tried. one cornerstone of all the methods' b'is to use the rts/cts for one direction. but beyond that anything is fair' b'game. again, you must look to you comm package for cabling requirements.' b"but i bet you'll find that one cable (if wired properly) could work with" b'all of the packages as long as they are of the same vintage. by the way,' b'i am familiar with one package that uses rts/cts and dtr/dsr for flow control' b'the rts is request to send and the dtr is ready to recieve, the cts is the' b'clear to send and the dsr is the request to recieve. this does not mean a' b'differnt cable it is just software. the clincher to all of this cabling' b'stuff is that it is common to have the uart directly controlled by the cts' b'signal which means that the cts must be present even if you are not support-' b'ing it in software. for these cases you will find cables that short the' b'rts to the cts at the same end (or perhaps the dtr to the cts). other' b'possible shorting might be done just because the software expects certain' b"signals that you don't have (or don't feel like providing because it would" b'mean additional wires). specifically i am talking about the dsr. shorting' b'the dtr to the dsr is not a good idea in general but you may find cables like' b'this. it is a bad idea because it defeats the whole purpose. one more' b'"gotcha" signal is the dcd. some software (including the pc bios) expects to' b'see the dcd before it will work. this signal sometimes gets shorted with the' b'dtr. but my favorite null modem has the rts and cts shorted at each end, but' b'the rts is also connected through to the other end and connected to dcd. and' b'of course the dtr/dsr are crossed as are the td/rd and of course the sg must' b'pass through. this null modem works with most software. the flow control,' b'if any, can use the rts/dcd with the dtr/dsr. if your comm. package does not' b'specify the cable required for pc to pc connection, then i suggest you use' b'this one.' b'' b'td rd' b'rd td' b'dtr dsr' b'dsr dtr' b'dcd rts-\\' b'/-rts dcd b'\\-cts cts-/' b'' b'' b'gordon lang' b'' 