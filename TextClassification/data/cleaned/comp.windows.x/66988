b'' b'contents:problems with table widgets in r5' b'' b'the following part of a program (an user interface for a simulation' b'system) did work in r4, but refused to in r5. of cause, the r4-version' b'did not know about the xptablewidgetclass (we used tablewidgetclass \t\t\tinstead caught from the net in times of r3) and xptablechildposition \t\t\t(formerly xttblposition).' b'since compiling with r5, the program causes a zero width or height error' b'(on sparc-stations). the trouble-shooter is the (re)computation of the' b'model_init_table table widget: though its childs (label and asciitext' b'widgets) exist, xtquerygeometry returns a prefered width and height of \t\t\tzero.' b'thus the following asignment cannot perform anything else but set the \t\t\twidth and height of the newly created widget to zero. no wonder xtpopup \t\tor xtmanage- child create zero width or height errors (dependent on \t\t\twhether width and height of the shell widget are set in the resource \t\t\tfile or not).' b'' b'question: does anyone know, why xtquerygeometry returns so low prefered' b'values when working on table widgets or perhaps what' b'to do about?' b'' b"i'll be happy, if someone is able to help me." b'germans are requested to answer in german.' b'' b'siegfried kaiser' b'' b'' b'the part of interest:' b'' b'' b'/* graphischer neuaufbau des model-init-formulars b'/* storing the old width and height of the viewport-\t*/' b'/* widget, which is the parent of the troubling table\t*/' b'/* widget, before the viewport widget is destroyed\t*/' b'/* the destroying of widgets before resizing them is a\t*/' b'/* relict from r3-age\t\t\t\t\t*/' b'' b'if (model_init_popped_up)' b'xtunmapwidget(model_init_form_view);' b'xtdestroywidget(model_init_form_view);' b'' b'/* creating the subtree within the shell, of which the\t*/' b'/* root is the viewport widget\t\t\t\t*/' b'' b'n b'xtsetarg(args[n],xtnfromvert,model_init_title); n++;' b'xtsetarg(args[n],xtnfromhoriz,model_init_button_view); n++;' b'xtsetarg(args[n],xtnallowvert,true); n++;' b'xtsetarg(args[n],xtnforcebars,true); n++;' b'model_init_form_view xtcreatewidget("form_view",viewportwidgetclass,' b'model_init_form,args,n);' b'' b'n b'model_init_table xtcreatewidget("table",xptablewidgetclass,' b'model_init_form_view,args,n);' b'' b'/* create_form_widget does create and position table\t*/' b"/* widget's childs. to position them it uses xptable-\t*/" b'/* childposition in r5 and xttblposition in r4\t\t*/' b'' b'create_form_widget(ptr_model_init_obj,model_init_table);' b'' b'/* \t\t\t\t\t\t\t*/' b'/* the crucial function call:\t\t\t\t*/' b'/* intended to return the maximum height possible: if\t*/' b"/* there isn't sufficient space to show the whole table\t*/" b'/* widget, then the viewport shall grow as large as \t*/' b'/* possible, but not beyond the border of screen.\t*/' b'/* if there is enough space, the window is intended to\t*/' b'/* shrienk to the smallest possible height.\t\t*/' b'/*\t\t\t\t\t\t\t*/' b'' b'xtquerygeometry(model_init_table,null,&pref);' b'' b'/* according to the algorithms idea, the new value of\t*/' b"/* viewport widget's height is selected. unfortunately\t*/" b'/* pref.height leads to new_height 0.\t\t*/' b'' b'if (form_view_height pref.height) new_height pref.height;' b'else new_height form_view_height;' b'' b'/* setting the new values to viewport widgets ancestors\t*/' b'' b'w xtnametowidget(model_init_form,"form_view");' b'xtresizewidget(w,width,new_height,pref.border_width);' b'xtresizewidget(model_init_form_view,width,new_height,' b'pref.border_width);' b'' b'if (model_init_popped_up)' b'{' b'/* in case the shell, which contains model_init_form_-\t*/' b'/* view and model_init_table, allready exists, is has\t*/' b'/* to be resized, too.\t\t\t\t\t*/' b'' b'n b'xtsetarg(args[n],xtnwidth,&shell_width); n++;' b'xtsetarg(args[n],xtnheight,&shell_height); n++;' b'xtsetarg(args[n],xtnborderwidth,&shell_bw); n++;' b'xtgetvalues(model_init_shell,args,n);' b'xtresizewidget(model_init_shell,shell_width,' b'shell_height height new_height,shell_bw);' b'}; end of if b'' b'n b'xtsetarg(args[n],xtnwidth,&width); n++;' b'xtsetarg(args[n],xtnborderwidth,&bw); n++;' b'xtgetvalues(model_init_button_view,args,n);' b'xtresizewidget(model_init_button_view,width,new_height,bw);' b'' b'xtresizewidget(vert_bar,sbar_width,1,sbar_bw);' b'' b'resize_inits();' b'' b"/* if there is the shell's height set within the \t*/" b'/* resource file, the program terminates within the\t*/' b'/* first xtmanagechild on its second pass through the\t*/' b'/* observed function. the first pass succeeds.\t\t*/' b'' b'xtmanagechild(model_init_form_view);' b'xtmanagechild(model_init_table);' b'' b'' b'if (!model_init_popped_up)' b'{' b"/* in case the shell isn't popped up it has to be done.\t*/" b"/* if there is no value set to the shell's height within*/" b'/* the resource file, the program terminates here.\t*/' b'' b'xtpopup(model_init_shell,xtgrabnone);' b'model_init_pop_flag true;' b'set_model_init_attributes();' b'}; end of if b'' b'get_actual_init(&ptr_actual);' b'load_form(ptr_actual);' b'' b'' b'' b'/*\t\t\t\t\t\t\t\t*/' b"/* if someone suspects the creation of table widget's contents\t*/" b'/* causes all the trouble, there are the sources of create_form b'/*\t\t\t\t\t\t\t\t*/' b'' b'' b'create_form_widget(ptr,table)' b't_obj *ptr;' b'widget table;' b'' b'/* ptr is a linear list containing attributes and para-\t*/' b'/* meters of the model and additionally the correspon-\t*/' b'/* ding widgets\t\t\t\t\t\t*/' b'' b'{' b'arg args[10];' b'int n,' b'row,' b'col;' b't_obj *ptr_obj;' b't_ident *ptr_ident;' b'' b'/* initialization of the local variables\t\t*/' b'' b'ptr_obj ptr;' b'col b'row b'' b'/* schleife ueber die objekte bzw. das pseudo-objekt (fuer die \t\t\t\tparameter) b'/* loop through the list of objects and pseudo-objects:\t*/' b'/* every object occuring in the model has zero or more\t*/' b'/* attributes and some parameters, which can be shared\t*/' b'/* by several objects. \t\t\t\t\t*/' b'/* because of locality the attributes of one object are\t*/' b'/* listed in a second linear list (of type t_ident),\t*/' b'/* whereas the parameters, which can belong to any ob-\t*/' b'/* ject are put together in a pseudo-object \t\t*/' b'/* thus the program loops through the list of objects\t*/' b'/* and pseudo-objects and for each object through the\t*/' b'/* list of its attributes resp. parameters.\t\t*/' b'' b'while (ptr_obj (t_obj*)null)' b'{' b'/* each object and pseudo-object is represented in a\t*/' b'/* label widget\t\t\t\t\t\t*/' b'' b'n b'xtsetarg(args[n],xtnlabel,ptr_obj-name); n++;' b'ptr_obj-label_w xtcreatemanagedwidget("object",labelwidgetclass,' b'table,args,n);' b'xptablechildposition(ptr_obj-label_w,col,row);' b'col++;' b'row++;' b'ptr_ident ptr_obj-ident;' b'' b'/* schleife ueber die objekt-attribute bzw. parameter b'while (ptr_ident (t_ident*)null)' b'{' b'/* each attribute and parameter is represented in a\t*/' b'/* label and has a corresponding asciitext widget, in \t*/' b'/* which it is to be initialized.\t\t\t*/' b'' b'n b'xtsetarg(args[n],xtnlabel,ptr_ident-name); n++;' b'ptr_ident-label_w xtcreatemanagedwidget("ident",labelwidgetclass,' b'table,args,n);' b'xptablechildposition(ptr_ident-label_w,col,row);' b'col++;' b'' b'n b'xtsetarg(args[n],xtnlength,row_length); n++;' b'xtsetarg(args[n],xtnstring,ptr_ident-text); n++;' b'xtsetarg(args[n],xtnedittype,xawtextedit); n++;' b'xtsetarg(args[n],xtnwrap,xawtextwrapword); n++;' b'xtsetarg(args[n],xtnresize,xawtextresizeheight); n++;' b'xtsetarg(args[n],xtnusestringinplace,true); n++;' b'ptr_ident-text_w xtcreatemanagedwidget("text",' b'asciitextwidgetclass,' b'table,args,n);' b'xptablechildposition(ptr_ident-text_w,col,row);' b'col--;' b'row++;' b'get_next_ident(&ptr_ident);' b'}; end of while b'col--;' b'get_next_obj(&ptr_obj);' b'}; end of while b'} end of create_form_widget b'' b'' b'' b'' b'so far the problem in detail.' b'' 