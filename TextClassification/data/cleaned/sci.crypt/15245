b'' b'archive-name: cryptography-faq/part08' b'last-modified: b'' b'' b'faq for sci.crypt, part technical miscellany' b'' b'this is the eighth of ten parts of the sci.crypt faq. the parts are' b'mostly independent, but you should read the first part before the rest.' b"we don't have the time to send out missing parts by mail, so don't ask." b"notes such as ``[kah67]'' refer to the reference list in the last part." b'' b'the sections of this faq are available via anonymous ftp to rtfm.mit.edu' b'as /pub/usenet/news.answers/cryptography-faq/part[xx]. the cryptography' b'faq is posted to the newsgroups sci.crypt, sci.answers, and news.answers' b'every days.' b'' b'' b'contents' b'' b'* how do i recover from lost passwords in wordperfect?' b'* how do i break a vigenere (repeated-key) cipher?' b'* how do i send encrypted mail under unix? [pgp, ripem, pem, b'* is the unix crypt command secure?' b'* how do i use compression with encryption?' b'* is there an unbreakable cipher?' b"* what does ``random'' mean in cryptography?" b'* what is the unicity point (a.k.a. unicity distance)?' b'* what is key management and why is it important?' b'* can i use pseudo-random or chaotic numbers as a key stream?' b'* what is the correct frequency list for english letters?' b'* what is the enigma?' b'* how do i shuffle cards?' b'* can i foil s/w pirates by encrypting my cd-rom?' b'* can you do automatic cryptanalysis of simple ciphers?' b'* what is the coding system used by vcr+?' b'' b'' b'* how do i recover from lost passwords in wordperfect?' b'' b'wordperfect encryption has been shown to be very easy to break.' b'the method uses xor with two repeating key streams: a typed password' b'and a byte-wide counter initialized to 1+<the password length. full' b'descriptions are given in bennett [ben87] and bergen and caelli' b'[ber91].' b'' b'chris galas writes: ``someone awhile back was looking for a way to' b'decrypt wordperfect document files and i think i have a solution.' b'there is a software company named: accessdata east south,' b'orem, ut that has a software package that will' b'decrypt any wordperfect, lotus quatro-pro, ms excel and paradox' b'files. the cost of the package is steep prices, but if you' b'think your pw key is less than characters, (or char) give them a' b'call and ask for the free demo disk. the demo disk will decrypt files' b"that have a char or less pw key.''" b'' b'* how do i break a vigenere (repeated-key) cipher?' b'' b'a repeated-key cipher, where the ciphertext is something like the' b'plaintext xor keykeykeykey (and so on), is called a vigenere cipher.' b'if the key is not too long and the plaintext is in english, do the' b'following:' b'' b'1. discover the length of the key by counting coincidences.' b'(see gaines [gai44], sinkov [sin66].) trying each displacement of' b'the ciphertext against itself, count those bytes which are equal.' b'if the two ciphertext portions have used the same key, something' b'over of the bytes will be equal. if they have used different' b'key, then less than will be equal (assuming random 8-bit bytes' b'of key covering normal ascii text). the smallest displacement which' b'indicates an equal key is the length of the repeated key.' b'' b'2. shift the text by that length and xor it with itself. this' b'removes the key and leaves you with text xored with itself. since' b'english has about bit of real information per byte, streams of' b'text xored together has bits of info per 8-bit byte, providing' b'plenty of redundancy for choosing a unique decryption. (and in fact' b'one stream of text xored with itself has just bit per byte.)' b'' b'if the key is short, it might be even easier to treat this as a' b'standard polyalphabetic substitution. all the old cryptanalysis' b"texts show how to break those. it's possible with those methods, in" b"the hands of an expert, if there's only ten times as much text as key." b'see, for example, gaines [gai44], sinkov [sin66].' b'' b'* how do i send encrypted mail under unix? [pgp, ripem, pem, b'' b"here's one popular method, using the des command:" b'' b'cat file compress des private_key uuencode mail' b'' b'meanwhile, there is a de jure internet standard in the works called' b'pem (privacy enhanced mail). it is described in rfcs through' b'there is a beta version of pem being tested at the time of this' b'writing.' b'' b'there are also two programs available in the public domain for encrypting' b'mail: pgp and ripem. both are available by ftp. each has its own' b'newsgroup: alt.security.pgp and alt.security.ripem. each has its own faq' b'as well.' b'' b'pgp is most commonly used outside the usa since it uses the rsa algorithm' b"without a license and rsa's patent is valid only (or at least primarily)" b'in the usa.' b'' b'ripem is most commonly used inside the usa since it uses the rsaref which' b'is freely available within the usa but not available for shipment outside' b'the usa.' b'' b'since both programs use a secret key algorithm for encrypting the body of' b'the message (pgp used idea; ripem uses des) and rsa for encrypting the' b'message key, they should be able to interoperate freely. although there' b"have been repeated calls for each to understand the other's formats and" b'algorithm choices, no interoperation is available at this time (as far as' b'we know).' b'' b'* is the unix crypt command secure?' b'' b'no. see [ree84]. there is a program available called cbw (crypt' b"breaker's workbench) which can be used to do ciphertext-only attacks" b'on files encrypted with crypt. one source for cbw is [ftpcb].' b'' b'* how do i use compression with encryption?' b'' b'a number of people have proposed doing perfect compression followed by' b'some simple encryption method (e.g., xor with a repeated key).' b'' b'unfortunately, you can only compress perfectly if you know the exact' b"distribution of possible inputs. for all practical purposes it's" b"impossible to describe ``the typical english text'' beyond coarse" b'characteristics such as single-letter frequencies. you can build up' b'more and more sophisticated models of your inputs, but if the enemy' b"has a slightly more accurate model, he'll be able to find some" b'redundancy in your compressed output.' b'' b'note that nearly all practical compression schemes, unless they' b'have been designed with cryptography in mind, produce output that' b'actually starts off with high redundancy. for example, the output of' b"unix compress begins with a well-known three-byte ``magic number''" b'that can serve as an entering wedge for cryptanalysis.' b'' b'this is not to say that compression before encryption is inherently a' b'bad idea; it just has to be done very, very carefully, and by no means' b'removes the need for strong encryption.' b'' b'compression after encryption is silly.' b'' b'* is there an unbreakable cipher?' b'' b'yes. the one-time pad is unbreakable; see part unfortunately the' b'one-time pad requires secure distribution of as much key material as' b'plaintext.' b'' b'of course, a cryptosystem need not be utterly unbreakable to be' b'useful. rather, it needs to be strong enough to resist attacks by' b'likely enemies for whatever length of time the data it protects is' b'expected to remain valid.' b'' b"* what does ``random'' mean in cryptography?" b'' b'cryptographic applications demand much more out of a pseudorandom' b'number generator than most applications. for a source of bits to be' b'cryptographically random, it must be computationally impossible to' b'predict what the nth random bit will be given complete knowledge of' b'the algorithm or hardware generating the stream and the sequence of' b'0th through n-1st bits, for all n up to the lifetime of the source.' b'' b'a software generator (also known as pseudo-random) has the function' b'of expanding a truly random seed to a longer string of apparently' b'random bits. this seed must be large enough not to be guessed by' b'the opponent. ideally, it should also be truly random (perhaps' b'generated by a hardware random number source).' b'' b'those who have sparcstation workstations could, for example,' b'generate random numbers using the audio input device as a source of' b'entropy, by not connecting anything to it. for example,' b'' b'cat /dev/audio compress foo' b'' b'gives a file of high entropy (not random but with much randomness in' b'it). one can then encrypt that file using part of itself as a key,' b'for example, to convert that seed entropy into a pseudo-random' b'string.' b'' b'when looking for hardware devices to provide this entropy, it is' b'important really to measure the entropy rather than just assume that' b'because it looks complicated to a human, it must be "random". for' b'example, disk operation completion times sound like they might be' b'unpredictable (to many people) but a spinning disk is much like a' b'clock and its output completion times are relatively low in entropy.' b'' b'* what is the unicity point (a.k.a. unicity distance)?' b'' b'see [sha49]. the unicity distance is an approximation to that amount' b'of ciphertext such that the sum of the real information (entropy) in' b'the corresponding source text and encryption key equals the number' b'of ciphertext bits used. ciphertexts significantly longer than this' b'can be shown probably to have a unique decipherment. this is used to' b'back up a claim of the validity of a ciphertext-only cryptanalysis.' b'ciphertexts significantly shorter than this are likely to have' b'multiple, equally valid decryptions and therefore to gain security' b"from the opponent's difficulty choosing the correct one." b'' b'unicity distance, like all statistical or information-theoretic' b'measures, does not make deterministic predictions but rather gives' b'probabilistic results: namely, the minimum amount of ciphertext' b'for which it is likely that there is only a single intelligible' b'plaintext corresponding to the ciphertext, when all possible keys' b"are tried for the decryption. working cryptologists don't normally" b'deal with unicity distance as such. instead they directly determine' b'the likelihood of events of interest.' b'' b'let the unicity distance of a cipher be d characters. if fewer than' b'd ciphertext characters have been intercepted, then there is not' b'enough information to distinguish the real key from a set of' b'possible keys. des has a unicity distance of characters,' b'which is less than ciphertext blocks (each block corresponds to' b'8 ascii characters). this may seem alarmingly low at first, but' b'the unicity distance gives no indication of the computational work' b'required to find the key after approximately d characters have been' b'intercepted.' b'' b'in fact, actual cryptanalysis seldom proceeds along the lines used' b'in discussing unicity distance. (like other measures such as key' b'size, unicity distance is something that guarantees insecurity if' b"it's too small, but doesn't guarantee security if it's high.) few" b'practical cryptosystems are absolutely impervious to analysis; all' b"manner of characteristics might serve as entering ``wedges'' to crack" b'some cipher messages. however, similar information-theoretic' b'considerations are occasionally useful, for example, to determine a' b'recommended key change interval for a particular cryptosystem.' b'cryptanalysts also employ a variety of statistical and' b'information-theoretic tests to help guide the analysis in the most' b'promising directions.' b'' b'unfortunately, most literature on the application of information' b'statistics to cryptanalysis remains classified, even the seminal' b'1940 work of alan turing (see [koz84]). for some insight into the' b'possibilities, see [kul68] and [goo83].' b'' b'* what is key management and why is it important?' b'' b'one of the fundamental axioms of cryptography is that the enemy is in' b'full possession of the details of the general cryptographic system,' b'and lacks only the specific key data employed in the encryption. (of' b'course, one would assume that the cia does not make a habit of telling' b'mossad about its cryptosystems, but mossad probably finds out anyway.)' b'repeated use of a finite amount of key provides redundancy that can' b'eventually facilitate cryptanalytic progress. thus, especially in' b'modern communication systems where vast amounts of information are' b'transferred, both parties must have not only a sound cryptosystem but' b'also enough key material to cover the traffic.' b'' b'key management refers to the distribution, authentication, and' b'handling of keys.' b'' b'a publicly accessible example of modern key management technology' b'is the stu iii secure telephone unit, which for classified use' b"employs individual coded ``crypto ignition keys'' and a central key" b'management center operated by nsa. there is a hierarchy in that' b'certain ciks are used by authorized cryptographic control' b'personnel to validate the issuance of individual traffic keys and' b'to perform installation/maintenance functions, such as the' b'reporting of lost ciks.' b'' b'this should give an inkling of the extent of the key management' b'problem. for public-key systems, there are several related issues,' b"many having to do with ``whom do you trust?''" b'' b'* can i use pseudo-random or chaotic numbers as a key stream?' b'' b'chaotic equations and fractals produce an apparent randomness from' b'relatively compact generators. perhaps the simplest example is a' b'linear congruential sequence, one of the most popular types of random' b'number generators, where there is no obvious dependence between seeds' b'and outputs. unfortunately the graph of any such sequence will, in a' b'high enough dimension, show up as a regular lattice. mathematically' b'this lattice corresponds to structure which is notoriously easy for' b'cryptanalysts to exploit. more complicated generators have more' b'complicated structure, which is why they make interesting pictures---' b'but a cryptographically strong sequence will have no computable' b'structure at all.' b'' b'see [knu81], exercise [ree77]; and [boy89].' b'' b'* what is the correct frequency list for english letters?' b'' b'there are three answers to this question, each slightly deeper than' b'the one before. you can find the first answer in various books:' b'namely, a frequency list computed directly from a certain sample of' b"english text. of course any such list will be ``correctly'' computed," b'but exactly which list you get depends on which sample was taken.' b'' b"the second answer is that the question doesn't make sense. what do" b"you mean by ``english letters''? the ``english language'' is not a" b'fixed, finite, closed object that can be exactly characterized. it' b'has changed over time; it is different between different authors.' b'any particular message will have different statistics from those of' b'the language as a whole.' b'' b'the third answer is that yes, no particular message is going to have' b'exactly the same characteristics as english in general, but for all' b"reasonable statistical uses these slight discrepancies won't matter." b"in fact there's an entire field called ``bayesian statistics'' (other" b"buzzwords are ``maximum entropy methods'' and ``maximum likelihood" b"estimation'') which studies questions like ``what's the chance that a" b"text with these letter frequencies is in english?'' and comes up with" b'reasonably robust answers.' b'' b'so make your own list from your own samples of english text. it will' b'be good enough for practical work, if you use it properly.' b'' b'* what is the enigma?' b'' b'``for a project in data security we are looking for sources of' b'information about the german enigma code and how it was broken by' b"the british during wwii.''" b'' b'see [wel82], [dea85], [koz84], [hod83], [kah91].' b'' b'* how do i shuffle cards?' b'' b'card shuffling is a special case of the permutation of an array of' b'values, using a random or pseudo-random function. all possible output' b'permutations of this process should be equally likely. to do this, you' b'need a random function (modran(x)) which will produce a uniformly' b'distributed random integer in the interval [0..x-1]. given that' b'function, you can shuffle with the following [c] code: (assuming arrlth' b'is the length of array arr[] and swap() interchanges values at the two' b'addresses given)' b'' b'for n arrlth-1; n n-- swap( &arr[modran( n+1 &arr[n] b'' b'modran(x) can not be achieved exactly with a simple (ranno() x) since' b"ranno()'s interval may not be divisible by x, although in most cases the" b"error will be very small. to cover this case, one can take ranno()'s" b'modulus mod x, call that number y, and if ranno() returns a value less' b'than y, go back and get another ranno() value.' b'' b'' b'* can i foil s/w pirates by encrypting my cd-rom?' b'' b'someone will frequently express the desire to publish a cd-rom with' b'possibly multiple pieces of software, perhaps with each encrypted' b'separately, and will want to use different keys for each user (perhaps' b'even good for only a limited period of time) in order to avoid piracy.' b'' b'as far as we know, this is impossible, since there is nothing in standard' b'pc or workstation hardware which uniquely identifies the user at the' b'keyboard. if there were such an identification, then the cd-rom could be' b'encrypted with a key based in part on the one sold to the user and in' b'part on the unique identifier. however, in this case the cd-rom is one' b'of a kind and that defeats the intended purpose.' b'' b'if the cd-rom is to be encrypted once and then mass produced, there must' b'be a key (or set of keys) for that encryption produced at some stage in' b"the process. that key is useable with any copy of the cd-rom's data." b'the pirate needs only to isolate that key and sell it along with the' b'illegal copy.' b'' b'' b'* can you do automatic cryptanalysis of simple ciphers?' b'' b'utah sells products that break the password scheme of a number of' b'popular macintosh and pc software packages. their telephone number' b'is b'' b'no pd software has been cited but there are many papers on the' b'subject....' b'' b'peleg, s. and rosenfeld, a. "breaking substitution ciphers using a' b'relaxation algorithm" comm. acm vol. pp (nov. b'' b'lucks, michael, "a constraint satisfaction algorithm for the' b'automated decryption of simple substitution ciphers", advances in' b"cryptology crypto springer lecture notes in computer" b'science, vol. (the paper also contains references to earlier' b'work on the subject.)' b'' b'john carrol and steve martin, "the automated cryptanalysis of' b'substitution ciphers", cryptologia, vol x number oct p193-209.' b'' b'john carrol and lynda robbins, "automated cryptanalysis of' b'polyalphabetic ciphers", cryptologia, vol xi number oct b'p193-205' b'' b'martin kochanski, "a survey of data insecurity packages",' b'cryptologia, vol xi number jan p1-15' b'' b'martin kochanski, "another data insecurity package", cryptologia,' b'vol xii number july p165-177.' b'' b'cryptologia vol xiii number pp b'' b'king and bahler, "probabilistic relaxation in the cryptanalysis of' b'simple substitution ciphers" cryptologia b'' b'king and bahler, "an algorithmic solution of sequential homophonic' b'ciphers". cryptologia, april (in press).' b'' b'r. spillman et.al., "use of genetic algorithms in cryptanalysis of' b'simple substitution ciphers", cryptologia, vol xvii number jan b'p31-44.' b'' b'' b'* what is the coding system used by vcr+?' b'' b'one very frequently asked question in sci.crypt is about how the vcr+ codes' b'work. the following article attempts to describe it.' b'' b'k. shirriff, c. welch, a. kinsman, "decoding a vcr controller code,"' b'cryptologia, july pp b'' 