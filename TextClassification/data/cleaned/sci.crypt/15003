b'' b'' b'(tim cuffel) writes:' b'' b'this suggests a new pc security product design approach first fill the hard' b'drive with random files and files encrypted under a number of known' b'keys. then whenever a new secret file is created, you delete a random file and' b'replace it with real encrypted data. new non-secret files are encrypted under' b'a known key.' b'' b'better yet, instead of thrashing around on the dos file system, take' b'it a step further. write yourself a minimal "file system" program that' b'is used to create/delete files, en/decrypt them to ramdisk, list a' b'directory. put the util, password protected, on a floppy.' b'' b'the catch is that the storage space used by this util is not part' b'of the dos file system. instead, defrag your disk, thus packing all' b'allocated clusters into clusters 0-n. then use the back end of the' b"partition to hold your 'stealth' file system. or, leave a small 2nd" b'partition on the disk that is not assigned to dos. another approach' b'might be to use a directory that contains a set of invariant files (dos' b'system files, for instance). due to dos allocating a minimum storage' b'unit of a "cluster" there is unused physical space on the disk between' b'the tail end of each file and the end of its associated cluster. these' b'dead spaces could be concatenated and used to hold your stealth file' b'system.' b'' b'now you have a situation where no encrypted data "appears" on your' b'disk at all b'--' 