b'' b'' b"i posted this a while ago and didn't receive one reply, and now we" b'have another bug report on the same subject. can anybody help me out?' b'' b'the problem is that motif uses xgrabkey to implement menu accelerators,' b'and these grabs are specific about which modifiers apply. unfortunately,' b"the specification for xgrabkey doesn't allow anymodifier to be combined" b'with other modifiers, which is exactly what would be desired in this case:' b'"ctrl any<keyq".' b'' b'in ora vol. in the section on accelerators it says "for information' b'on how to specify translation tables see vol. this is so you' b'know what to put for the xmnaccelerator resource. if you go to' b'vol. it says, "likewise, if a modifier is specified, there is' b'nothing to prohibit other modifiers from being present as well. for' b'example, the translation:' b'\tshift<keyq:\tquit()' b'will take effect even if the ctrl key is held down at the same time as' b'the shift key (and the q key).' b'' b'this is true for accelerators and mnemonics, which are implemented using' b"event handlers instead of grabs; it's not true for menu accelerators. if" b"you're a motif implementor, i'd suggest lobbying to get the xlib semantics" b'changed to support the feature i described above. otherwise, change the' b"documentation for menu accelerators to properly set the user's" b'expectations, because menu accelerators are not the same thing as' b'translations.' b'' b'is it possible to supply accelerator for a menu entry?' b'' b'if you mean "menu accelerator", no it\'s not possible. that\'s according to' b'the definition of the xmnaccelerator resource in the xmlabel manual page.' b'' b'keep in mind when answering this question that when using motif you' b"can't use xtinstallaccelerators()." b'' b"i can't think of a reason why not." b'' b'how can you ensure that accelerators work the same independent of' b'case? what i want is ctrl+o and ctrl+o to both be accelerators on one' b'menu entry.' b'' b'there is a workaround for motif users. in addition to the normal menu' b'accelerator you install on the xmpushbutton[gadget], set an xtnaccelerators' b"resource on the shell (toplevel or application). install the shell's" b'accelerators on itself and all of its descendants with' b'xtinstallallaccelerators (shell, shell).' b'' b'for example,' b'' b'applicationshell mainwindow menubar filecascade' b'-- filepulldown openpushbutton' b'- exitpushbutton' b'' b'*openpushbutton.accelerator ctrl<keyo' b'*openpushbutton.acceleratortext ctrl+o' b'*exitpushbutton.accelerator ctrl<keyq' b'*exitpushbutton.acceleratortext ctrl+q' b'' b'*applicationshell.accelerators #override\\n\\' b'ctrl<keyo: performaction(*openpushbutton, armandactivate)\\n\\' b'ctrl<keyq: performaction(*exitpushbutton, armandactivate)' b'' b'you have to write and add the application action performaction, which you' b'can implement by using xtnametowidget on the first argument and then' b'xtcallactionproc with the rest of the arguments.' b'' b'i tested out something similar to this. to shorten development time, i' b"used teleuse's tuninstallaccelerators resource to install the accelerators" b'on the shell, and i directly invoked the open and quit d actions instead' b'of asking the pushbuttons to do it for me, but the more general approach i' b'described above should work.' b'' 