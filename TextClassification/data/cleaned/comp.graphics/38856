b'' b"i'm asking for help on a sticky problem involving unreasonably low" b"apparent precision in z-buffering, that i've encountered in different" b"pex implementations. i can't find any discussion of this problem in any" b"resources i can lay hands on (e.g. the comp.windows.x.pex faq, gaskins's" b"_pexlib_programming_manual_, vendors' documentation)." b'' b"i'm posting this article by itself on comp.graphics, and virtually the" b'same article with a test program demonstrating the problem on' b'comp.windows.x.pex. the problem is hard to describe without pictures,' b'hence this article is longish. if you can run pexlib 5.x programs and' b'are interested, i encourage you to build and run the test program in' b'comp.windows.x.pex to see the effect yourself and play with my approach' b'to dealing with it. (it depends on the utility code from the above' b'gaskins book; instructions for fetching it via anonymous ftp are given.)' b'' b'the problem to be solved is to eliminate or minimize "stitching"' b'artifacts resulting from the use of z-buffering with polylines that are' b'coplanar with filled areas. the interpolated z values along a line will' b'differ slightly, due to roundoff error, from the interpolated z values' b'across an area, even when the endpoints of the line are coincident with' b"vertices of the area. because of this, it's a tossup whether the" b'z-buffer will allow the line pixels or the area pixels to be displayed.' b'visually, the result tends to be a dashed-line effect even though the' b'line is supposed to be solid.' b'' b'using the pexlib api, my approach to a solution is to use two slightly' b'different pex view mapping transforms, in two view table entries, one' b'for the areas and one for the lines. the pex structures or immediate-' b'mode output must be organized so that one view table index is always in' b'effect for areas, and the other is always in effect for lines. the' b'result is a slight shift in npc z coordinates for the lines, so as to' b'attempt to bias the tossup situations in favor of the lines.' b'' b'this shift is effected by moving the front and back clipping planes used' b'in the pexlib view table entry for lines just a hair "backwards" (i.e.' b'smaller vrc z coordinates), compared to their positions in the view' b'table entry used for areas. this means that when a point is transformed' b'to npc, its z value will be slightly bigger if it comes from a line than' b'if it comes from an area, thus accomplishing the desired bias.' b'' b'i would expect the z roundoff errors which cause the problem to amount' b'to a few units at most, out of the entire dynamic range of the z-buffer,' b'typically from to if not (i.e. or bit z-buffers).' b'therefore, it seems that a tiny fraction of the range of z in vrc' b'between the front and back clip planes ought to suffice to reliably fix' b'the stitching.' b'' b'but in fact, experience shows that the shift has to be as much as b"to of the range. (empirically, it's worst when the npc z" b'component of the slope of the surface is high, i.e. when it appears more' b"or less edge-on to the viewer.) it's as if only or bits of the" b'z-buffer have any dependable meaning! this amount is so great that one' b'problem is replaced by another: sometimes the polylines "show through"' b'areas which they are supposed to lie behind.' b'' b"i've observed the problem on both hewlett-packard and digital" b'workstation pex servers, to approximately the same degree. the test' b'program demonstrates the problem on an mit pexlib 5.x implementation;' b'this version is known to compile and run on an hp-ux system with pex' b'5.1.' b'' b'open questions:' b'(1) why does this happen?' b'-- am i configuring the pex view table wrongly?' b'-- is there a systematic difference in z interpolation for lines' b'as opposed to areas (e.g. pixel centers versus corners) which' b'could be corrected for?' b'-- are pex implementors wantonly discarding z precision in their' b'interpolators?' b'-- something else?' b'(2) what to do about it?' b'-- can i fix my use of the view table to allow better precision' b'in z-buffered hlhsr?' b'-- is there another approach i can take to remove the stitching' b'artifacts?' b'-- am i just out of luck?' b'' b'any help would be immensely appreciated!' b'' b'--' b'===============================================================================' b'ann arbor, michigan (usa) uucp: ...!uunet!sharkey!applga!gorgen' 