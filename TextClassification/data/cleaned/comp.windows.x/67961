b'' b'archive-name: x-faq/speedups' b'last-modified: b'' b'- b'how to maximize the performance of x monthly posting' b'- b'' b"more ram, faster cpu's, more disk space, faster ethernet... these" b'are the standard responses you hear when you ask how to improve the' b'performance of your workstation.' b'' b"well, more hardware isn't always an option, and i wonder if more" b'hardware is always even a necessity.' b'' b'this "faq" list is a collection of suggestions and ideas from different' b'people on the net on how you can the best possible performance from x' b'windows on your workstation, without purchasing more hardware.' b'' b'performance is a highly subjective issue. the individual user must' b"balance `speed' versus `features' in order to come to a personal" b'decision. therefore this document can be be expected to contain many' b'subjective opinions in and amongst the objective facts.' b'' b'this document is specifically concerned with x. there are of course' b'many other factors that can affect the performance of a workstation.' b'however, they are outside the scope of this document.' b'' b'[ people seriously interested in the whole area of system' b"performance, might want to look at the o'reilly nutshell handbook" b'"system performance tuning" by mike loukides. imho, it contains a' b"well-written, comprehensive treatment of system performance. i'm" b'unaware of any other similar books. --ed.]' b'' b'-----------------' b'table of contents' b'-----------------' b'0. introduction administrivia' b'1. what about the "other x faq"?' b'2. window managers' b'3. the x server' b'which server?' b'locking the server into ram?' b'starting your server' b'fonts' b'about the resources file' b'define your display properly' b'4. clients' b'a better clock for x' b'a better terminal emulator for x' b'tuning your client' b'5. miscellaneous suggestions' b'pretty pictures' b'a quicker mouse' b'programming thoughts' b'say what!?' b'6. other sources of information' b'7. author notes' b'' b'! changed since last issue.' b'* new since last issue.' b'' b'-----------------------------' b'introduction administrivia' b'-----------------------------' b'' b'this document is posted each month, on or around the 15th, to the' b'usenet news groups comp.windows.x, news.answers, and comp.answers.' b'if you are reading a copy of this faq which is more than a few' b'months old (see the "last-modified" date above) you should probably' b'locate the latest edition, since the information may be outdated.' b'' b'if you do not know how to get those newsgroups and/or your site does' b'not receive them and/or this article has already expired, you can' b'retrieve this faq from an archive site.' b'' b'there exist several usenet faq archive sites. to find out more about' b'them and how to access them, please see the "introduction to the' b'news.answers newsgroup" posting in news.answers.' b'' b'the main faq archive is at rtfm.mit.edu this document' b'can be found there in /pub/usenet/news.answers/x-faq/speedups. if' b'you do not have access to anonymous ftp, you can retrieve it by' b'command "send usenet/news.answers/x-faq/speedups" in the message body.' b'' b'-----------------------------' b'what about the "other x faq"?' b'-----------------------------' b'' b'well written "comp.windows.x frequently asked questions" document.' b'its focus is on general x information, while this faq concentrates' b'on performance.' b'' b'the comp.windows.x faq does address the issue of speed, but only with' b'regards to the x server. the gist of that topic seems to be:' b'"use x11r5, it is faster than r4".' b'(please see the x faq for complete details).' b'' b'---------------' b'window managers' b'---------------' b'' b'there are a lot of window managers out there, with lots of different' b'features and abilities. the choice of which to use is by necessity a' b'balancing act between performance and useful features. at this' b'point, most respondents have agreed upon "twm" as the best candidate' b'for a speedy window manager.' b'' b'a couple of generic tricks you can try to soup up your window manger,' b'is turning off unnecessary things like "zooming" and "opaque move".' b'also, if you lay out your windows in a tiled manner, you reduce the' b'amount of cpu power spent in raising and lowering overlapping' b'' b"i've found that a good font for tiling is 7x13 (aka:" b'-misc-fixed-medium-r-normal--13-100-100-100-c-70-iso8859-1 it is' b'the biggest font i know of that i can use on my sun (1152x900 screen)' b'and still get two column terminal windows side-by-side on the' b'display with no overlap. other font suggestions will be accepted.' b'' b'------------' b'the x server' b'------------' b'' b'which server?' b'- b'make sure that your server is a proper match for your hardware.' b'if you have a monochrome monitor, use a monochrome x11 server.' b'' b"on my monochrome sun, i haven't noticed much difference between" b'the xsun (colour) server and xsunmono, however it was pointed out to' b'me that xsunmono is about 800k smaller and therefore should contribute' b'to less paging.' b'' b'how your server was compiled can also make a difference. jeff law' b'compiled with gcc (version or with the unbundled sun compiler.' b'you can expect to get "*very* large speedups in the server" by not' b'using the bundled sunos compiler. i assume that similar results' b'would occur if you used one of the other high-quality commercial' b'compilers on the market.' b'' b'locking the server into ram?' b'- b'has anyone tried hacking the x server so that it is locked into ram and' b'does not get paged? eg: via a call to plock(). does this help' b"performance at all? i've had one inquiry on this topic, and a few" b'pointers to the plock() function call, but no hard evidence from someone' b"who's tried it. i am not in a position to give it a try." b'starting your server' b'- b'if you start up a lot of clients in your .xsession or whatever, sleep' b'for a second or two after launching each one. after i changed my' b'.xclients script to do this, logging in actually took *less* time...' b'we have a heavily loaded system without much core, though.' b'' b'this sounds crazy, but i have confirmed that it works!' b'' b'why this works, which i have summarized here:' b'' b'when you start up an x server it takes a huge amount of time to' b'start accepting connections. a lot of initialization is done by' b'the server when it starts. this process touches a large number of' b'pages. any other process running at the same time would fight the' b'server for use of the cpu, and more importantly, memory. if you' b'put a sleep in there, you give the server a chance to get itself' b'sorted out before the clients start up.' b'' b'similarly, there is also a lot of initialization whenever an x' b'client program starts: toolkits registering widgets, resources' b'being fetched, programs initializing state and "databases" and so' b'forth. all this activity is typically memory intensive. once this' b'initialization is done ("the process has reached a steady state"),' b'the memory usage typically settles down to using only a few pages.' b'by using sleeps to stagger the launching of your clients in your' b'.xinitrc you avoid them fighting each other for your' b"workstation's limited resources" b'' b'this is most definitely a "your mileage may vary" situation, as there' b'are so many variables to be considered: available ram, local swap' b'space, load average, number of users on your system, which clients' b'you are starting, etc.' b'' b'currently in my .xinitrc i have a situation like:' b'(sleep exec xclock b'(sleep exec xbiff b'(sleep exec xterm b'(sleep exec xterm b'' b"i've experimented with:" b'(sleep exec xclock b'(sleep exec xbiff b'(sleep exec xterm b'(sleep exec xterm b'' b"i've even tried:" b'(sleep exec start_x_clients_script b'and then in start_x_clients_script i had:' b'(sleep exec xclock b'(sleep exec xbiff b'(sleep exec xterm b'(sleep exec xterm b'' b'[ the idea with this last one was to make sure that xinit had' b'completely finished processing my .xinitrc, and had settled down' b'into a "steady state" before the sleep expired and all my clients' b'were launched. b'' b'all of these yielded fairly comparable results, and so i just stuck with' b'my current setup, for its simplicity. you will probably have to' b'experiment a bit to find a setup which suits you.' b'' b'fonts' b'- b'loading fonts takes time and ram. if you minimize the number of fonts' b"your applications use, you'll get speed increases in load-up time." b'' b'one simple strategy is to choose a small number of fonts (one small, one' b'large, one roman, whatever suits you) and configure all your clients or' b'at least all your heavily used clients to use only those few fonts.' b'client programs should start up quicker if their font is already loaded' b'into the server. this will also conserve server resources, since fewer' b'fonts will be loaded by the server.' b'' b'eg: my main xterm font is 7x13, so i also have twm set up to use 7x13' b"in all it's menus and icons etc. twm's default font is 8x13. since" b"i don't normally use 8x13, i've eliminated one font from my server." b'' b'keep fonts local to the workstation, rather than loading them over nfs.' b'if you will make extensive use of r5 scalable fonts, use a font server.' b'' b'about the resources file' b'- b'' b'keep your .xresources .xdefaults file small. saves ram and saves' b'' b'one suggestion:' b'' b'in your .xdefaults (.xresources) file, try putting only the minimum' b'number of resources that you want to have available to all of your' b'applications. for example: *reversevideo: true' b'' b'then, separate your resources into individual client-specific' b'resource files. for example: $home/lib/app-defaults. in your' b'.login file set the environment variable xuserfilesearchpath:' b'' b'setenv xuserfilesearchpath $home/lib/app-defaults/%n' b'' b'[ the "comp.windows.x frequently asked questions" faq contains' b'an excellent explanation of how these environment variables work.' b'--ed.]' b'' b'so, when xterm launches, it loads its resources from' b'.../app-defaults/xterm. xdvi finds them in .../app-defaults/xdvi,' b'and so on and so forth. note that not all clients follow the same' b'xxxxx resource-file naming pattern. you can check in your system' b'app-defaults directory (often: /usr/x11r5/lib/x11/app-defaults/) to' b'find the proper name, and then name your personal resource files' b'with the same name.' b'' b'this is all documented in the xt specification (pg b'kevin is willing mail his setup files to inquirers.]' b'' b'this method of organizing your personal resources has the following' b'benefits:' b'' b'- easier to maintain more usable.' b'' b'- fewer resources are stored in the x server in the resource_manager' b'property. as a side benefit your server may start fractionally' b'quicker, since it doesn`t have to load all your resources.' b'' b'- applications only process their own resources, never have to sort' b'through all of your resources to find the ones that affect them.' b'' b'it also has drawbacks:' b'' b'- the application that you are interested in has to load an' b"additional file every time it starts up. this doesn't seem to" b'make that much of a performance difference, and you might' b'consider this a huge boon to usability. if you are modifying an' b"application's resource database, you just need to re-run the" b'application without having to "xrdb" again.' b'' b'- xrdb will by default run your .xdefaults file through cpp. when' b'your resources are split out into multiple resource files and' b'then loaded by the individual client programs, they will not.' b'watch out for this!!' b'' b'i had c style comments in my .xdefaults file, which cpp stripped' b'out. when i switched to this method of distributed resource' b'files i spent several frustrating days trying to figure out why' b'my clients were not finding their resources. xt did *not*' b'provide any error message when it encountered the c style' b'comments in the resource files, it simply, silently, aborted' b'processing the resource file.' b'' b'the loss of preprocessing (which can be very handy, e.g. ``#ifdef' b"color'' is enough to cause some people to dismiss this" b'method of resource management.' b'' b'- you may also run into some clients which break the rules. for' b'example, neither emacs nor xvt will find their' b'resources if they are anywhere other than in .xdefaults.' b'' b'- when starting up a client on a machine that does not share files' b'with the machine where your resources are stored, your client' b'will not find its resources. loading all your resources into the' b'server will guarantee that all of your clients will always find' b'' b'a possible compromise suggestion that i have (and am planning on trying)' b'is to put resources for all my heavily used clients (eg: xterm) into my' b'.xdefaults file, and to use the "separate resources files" method for' b'clients that i seldom use.' b'' b'define your display properly' b'- b'' b'client programs are often executed on the same machine as the server. in' b'that situation, rather than setting your display environment variable to' b'"<hostname:0.0", where <hostname is the name of your workstation, you' b'should set your display variable to "unix:0.0" or by doing this' b'you access optimized routines that know that the server is on the same' b'machine and use a shared memory method of transferring requests.' b'' b'see the _display names_ section of the x(1) man page for further' b'explanation of how to properly set your display name.' b'' b'"i don\'t think it\'s stock mit, but (at least) data general and hp have' b'libraries that are smart enough to use local communication even when' b'the display isn\'t set specially."' b'' b'stock r5 to use local communication even if display is not properly set.' b"i don't want to get in the business of distributing or trying to juggle" b'non-mit patches and so have elected not to include it here. hopefully mit' b'will apply this minor lines) patch themselves. in the meantime, if' b'you want to try it yourself, email jody. --ed.]' b'' b'-------' b'clients' b'-------' b'' b'if you only have a few megabytes of ram then you should think' b'carefully about the number of programs you are running. think also' b'about the _kind_ of programs you are running. for example: is there' b'a smaller clock program than xclock?' b'' b"unfortunately, i haven't really noticed that programs advertise how large" b'they are, so the onus is on us to do the research and spread the word.' b'' b'[ suggestions on better alternatives to the some of the standard clients' b'(eg: xclock, xterm, xbiff) are welcome. --ed.]' b'' b"i've received some contradictory advice from people, on the subject" b'of x client programs. some advocate the use of programs that are' b'strictly xlib based, since xt, xaw and other toolkits are rather' b'large. others warn us that other applications which you are using' b'may have already loaded up one or more of these shared libraries. in' b'this case, using a non-xt (for example) client program may actually' b'_increase_ the amount of ram consumed.' b'' b"the upshot of all this seems to be: don't mix toolkits. that is, try" b'and use just athena clients, or just xview clients (or just motif' b"clients, etc). if you use more than one, then you're dragging in" b'more than one toolkit library.' b'' b'know your environment, and think carefully about which client' b'programs would work best together in that environment.' b'' b'' b'a better clock for x' b'- b'' b'1) xcuckoo' b'available: on export.lcs.mit.edu' b'' b'xcuckoo displays a clock in the title bar of *another* program.' b'saves screen real estate.' b'' b'2) mclock' b'available: larry.mcrcim.mcgill.edu in /x/mclock.shar' b'' b'non xt-based. extensively configurable. it can be made to look' b'very much like mit oclock, or mostly like xclock purely by changing' b'resources.' b'' b'of course, the ultimate clock one that consumes no resources, and' b'takes up no screen real estate is the one that hangs on your wall.' b':-)' b'' b'a better terminal emulator for x' b'- b'' b'from the readme file distributed with xterm:' b'' b'+-----' b'|\t\t abandon all hope, ye who enter here' b'|' b'| this is undoubtedly the most ugly program in the distribution.' b'| b'+-----' b'' b"ugly maybe, but at my site it's still the most used. i suspect that" b'xterm is one of the most used clients at many, if not most sites.' b"laziness? isn't there a better terminal emulator available? see below." b'' b'if you must use xterm, you can try reducing the number of savelines' b'' b'1) xvt' b'available: export.lcs.mit.edu in /contrib/xvt-1.0.tar.z' b'' b'"...if you don\'t need all the esoteric features of xterm, then get' b'hold of xvt it was written here just to save swap space as' b'xterm is rather a hog! b'' b"this was written as a partial 'clone' of xterm. you don't have to" b"rename your resources, as xvt pretends to be xterm. in it's current" b"version, you cannot bind keys as you can in xterm. i've heard that" b"there are versions of xvt with this feature, but i've not found any" b'yet.' b'' b'update (march i recently had a few email conversations with' b'questions whether xvt really is at all faster than xterm. for' b'instance, xvt may initialize slightly faster, but compare scrolling' b'speed (try this quickie benchmark: /bin/time dd if=/etc/termcap' b'bs=40) and see which program can scroll faster. also, while xterm' b"may be slightly larger in ram requirements (we don't have any hard" b'numbers here, does anyone else?) shared libraries and shared text' b"segments mean that xterm's paging requirements are not that major." b'' b'as an experiment, he ripped out all the tek stuff from xterm, but it' b'made little difference, since if you never use it, it never gets' b'brought into memory.' b'' b'so here we stand with some conflicting reports on the validity of' b'xvt over xterm. in summary? caveat emptor, your mileage may vary.' b"if you can provide some hard data, i'd like to see it." b'specifically: how much ram each occupies, how much swap each needs,' b'relative speed of each' b'' b'2) mterm' b'available: larry.mcrcim.mcgill.edu in' b'/x/mterm.src/mterm.ball-o-wax.' b'' b'"i also have my own terminal emulator. its major lack is' b'scrollback, but some people like it anyway."' b'' b'' b'tuning your client' b'- b'' b'suggestions on how you can tune your client programs to work faster.' b'' b'text field widgets:' b'' b'i noticed that during data entry into motif text field widgets, i' b'was getting a slight lag in response to some keystrokes,' b'particularly the initial one in the field. examining the what was' b'going on with xscope i found it. it seems that when the resource' b'xmnblinkrate is non-zero and the focus is on a text field widget' b'(or even just a text widget) the i-beam cursor will blink.' b'every time the cursor appears or disappears in those widgets, the' b'widget code is making a request to the server (copyarea). the user' b'can stop this by setting the resource xmnblinkrate to it is not' b'noticeable on a 40mhz sparc, but it does make a little difference' b'on a [slower system].' b'' b'this specific suggestion can probably be applied in general to lots' b'of areas. consider your heavily used clients, are there any minor' b'embellishments that can be turned off and thereby save on server' b'requests?' b'' b'-------------------------' b'miscellaneous suggestions' b'-------------------------' b'' b'pretty pictures' b'- b"don't use large bitmaps (gif's, etc) as root window backgrounds." b'' b'- the more complicated your root window bitmap, the slower the server' b'is at redrawing your screen when you reposition windows (or redraw, etc)' b'' b"- these take up ram, and cpu power. i work on a sun sparc and i'm" b"conscious of performance issues, i can't comprehend it when i see" b'people with a 4mb sun running xphoon as their root window.' b'' b"i'll let someone else figure out how much ram would be occupied by" b'having a full screen root image on a colour workstation.' b'' b"- if you're anything like me, you need all the screen real estate" b'that you can get for clients, and so rarely see the root window anyway.' b'' b'for reminding me of this one. --ed.]' b'' b'a quicker mouse' b'- b'using xset, you can adjust how fast your pointer moves on the screen' b'when you move your mouse. i use "xset m in my .xinitrc file,' b'which lets me send my pointer across the screen with just a flick of' b'the wrist. see the xset man page for further ideas and information.' b'' b'hint: sometimes you may want to *slow down* your mouse tracking for' b'fine work. to cover my options, i have placed a number of different' b'mouse setting commands into a menu in my window manager.' b'' b'e.g. (for twm) b'menu "mouse settings" b'"mouse settings:"\t\t\tf.title' b'" very fast"\t\t\t\t! "xset m b'" normal (fast)"\t\t\t! "xset m b'" system default (un-accelerated)"\t! "xset m default b'" glacial"\t\t\t\t! "xset m b'}' b'' b'programming thoughts' b'- b"to speed up applications that you're developing, there are tons of" b'things you can do. some that stick out:' b'' b"- for motif programs, don't set xmfontlist resources for individual" b'buttons, labels, lists, et. al.; use the defaultfontlist or' b'labelfontlist or whatever resource of the highest-level manager' b'widget. again, stick to as few fonts as possible.' b'' b"- better yet, don't use motif at all. it's an absolute pig." b'' b"- don't create and destroy widgets on the fly. try to reuse them." b'(this will avoid many problems with buggy toolkits, too.)' b'' b'- use a line width of in gcs. on some servers this makes a huge' b'difference.' b'' b'- compress and collapse multiple expose events. this can make the' b'difference between a fast application and a completely unusable' b'one.' b'' b'just a small remark: i once heard that using a better malloc' b'function would greatly increase performance of xt based' b'applications since they use malloc heavily. they suggested trying' b"out the gnuy malloc, but i didn't find the time yet. i did some" b'tests on small programs just doing malloc and free, and the' b'differences were indeed very noticeable somewhat times faster)' b'' b'[ any confirmation on this from anyone? --ed.]' b'' b'' b'- unnecessary noexpose events.' b'' b'most people use xcopyarea/xcopyplane as fastest blit routines, but' b'they forget to reset graphics_exposures in the gc used for the' b'blits. this will cause a noexpose event every blit, that, in most' b'cases, only puts load onto the connection and forces the client to' b"run through it's event-loop again and again." b'' b'- thousands of xchangegc requests.' b'' b'this "gfx context switching" is also seen in most handcoded x-apps,' b'where only one or few gcs are created and then heavily changed' b'again and again. xt uses a definitely better mechanism, by caching' b'and sharing a lot of gcs with all needed parameters. this will' b'remove the load of subsequent xchangegc requests from the' b'connection (by moving it toward the client startup phase).' b'' b'say what!?' b'- b'some contributors proposed ideas that seem right off the wall at first:' b'' b'how about this: swap displays with someone else. run all your programs' b'on the other machine and display locally; the other user runs off your' b'machine onto the other display. goal: reduce context switches in the' b'same operation between client and server.' b'' b"i'm not in a situation where i can easily try this, but i have received" b'the following confirmation...' b'' b'i regularly run programs on other machines and i notice a big' b'difference. i try to run on a machine where i will reduce net usage' b'and usually with nice to reduce the impact of my intrusion. this' b'helps a lot on my poor little ss1+ with only mb, it was' b'essential when i only had mb.' b'' b'[the x11 server and the client are] competing for the same cpu as' b'your server when you run it on the same machine. not really a' b'major problem, except that the x11 client and the server are in' b'absolute synchronicity and are context thrashing.' b'' b"firstly it relies on the fact that most cpu's are mostly idle, x's" b'cpu usage is bursty. so the chances of you and your teammate' b'doing something cpu-intensive at the same time is small. if they' b'are not then you get twice the cpu+memory available for your' b'action.' b'' b'the second factor is that context switches are expensive, using b"cpu's halves them, you pay a price due to the overhead of going" b'over the network, but this is offset in most cases by the improved' b'buffering of a network (typically 20k vs 4k for a pipe), allowing' b'even fewer context switches.' b'' b'----------------------------' b'other sources of information' b'----------------------------' b'' b"volume in o'reilly's x window system series, ``x window system" b"administrator's guide'' is a book all x administrator's should read." b'' b'a lot more tips on performance are in the paper "improving x' b'application performance" by chris d. peterson and sharon chang, in' b'issue of the x resource.' b'' b'an earlier version of this paper appeared in the xhibition b'conference proceedings.' b'' b'this paper is absolutely essential reading for x programmers.' b'' b'--------------' b'author notes' b'--------------' b'' b'suggestions, corrections, or submission for inclusion in this list' b'are gladly accepted. layout suggestions and comments (spelling' b"mistak's too! are also welcome." b'' b'currently i have listed all contributors of the various comments and' b'suggestions. if you do not want to be credited, please tell me.' b'' b'speedup-x-faq is copyright (c) by arthur e. mulder' b'' b"you may copy this document in whole or in part as long as you don't" b'try to make money off it, or pretend that you wrote it.' b'' b'- b'--' b'department of computing science but be transformed by the renewal' b'university of alberta, edmonton, canada of your mind, romans 