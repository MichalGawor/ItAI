b'' b'' b'' b'brad banko writes:' b'while running the ms quick c compiler in a dos window under windows b'this evening, i got a "program has violated system integrity... close all' b'applications, exit windows and restart your computer" error.' b'' b'gawd, i love windows b'' b'1) is there an easy way to restore everything to working order?' b'what might be some better approaches?' b'' b"you'll probably want to delete any damaged executables and reload them" b'fresh. data files should be examined and repaired.' b'' b'2) what might have caused this? does the smartdrv cache make me more' b"vulnerable? (i'm suspicious of hard drive caches especially when they" b'cache data writing.)' b'' b"you're not stupid. smartdrive caches things, and windows also runs a" b'swap file which may contain data also. all of this is pretty risky' b'stuff in a pc environment.' b'' b'the straightforward approach would be to run chkdsk with the /f option to' b'fix the disk and then it looks like i would probably have to reinstall windows' b'and a few other things.' b'' b'a reasonably accurate prediction...' b'' b'' b"here's a brief description of how dos stores files:" b'' b'there are three pieces to a file. the directory entry, the fat chain,' b'and the data area. you can think of these as a sheet of lined' b'notebook paper, a sheet of graph paper, and a stack of 3x5 cards.' b'' b'the directory entry (notebook paper) holds the file name, actual size,' b"and first cluster number. it also holds some other information that's not" b'important right now.' b'' b'the file allocation table (fat) chain (graph paper) tells where to find' b'the actual data. each square of graph paper holds a number. if the' b'number is zero, the cluster associated with this box is available. if it' b'holds a "magic" number, it is either the last piece of a file or a bad' b'(unuseable) spot on the disk. any other number tells which cluster' b'contains the next section of the file.' b'' b'the data area (3x5 cards) is where the actual information is stored.' b'the data area is organized as clusters of a fixed size; storage is' b'doled out in "chunks" of one cluster each. (in your case, one cluster' b'is bytes.) as a cluster is filled, another is allocated.' b'' b'to read a file, you first look at the directory entry to get the' b'starting cluster number. now you read the data from that cluster.' b'next, look at the fat entry for the cluster you just read. this will' b'tell you the cluster number for the next chunk of the file.' b'naturally, these numbers are usually sequential, but they can jump' b'around and even go backwards. continue reading, one cluster at a' b'time, as you walk this chain through the fat, until you hit the marker' b"which says it's the last cluster in the file." b'' b'chkdsk is the dos utility that checks the sanity and coherence of' b'the directories and the fat and can bludgeon most flaws into' b"submission. it doesn't have any intelligence, so you have to" b'double-check anything it "fixes".' b'' b"now let's do a bit of a post-mortem:" b'' b'c:\\gfx\\vpic46\\cvpic.exe' b'c:\\gfx\\vpic46\\vpic.txt' b'c:\\gfx\\vpic46\\video7.cfg' b'c:\\gfx\\vpic46\\orcpro2.cfg' b'c:\\gfx\\vpic46\\vga.cfg' b'c:\\game\\goose\\bird2.x' b'c:\\winmisc\\adv21\\winadv.exe' b' allocation error, size adjusted' b'' b"all of these files have sizes (according to the fat) which don't match" b'the size reported in their directory entries. chkdsk /f will alter' b'the directory entries to match the fat size. (in other words, the' b'directory entry for cvpic.exe may say the file is bytes long.' b'but chkdsk found a fat chain of clusters attached to it. (my numbers,' b'obviously, are made up.))' b'' b' lost allocation units found in chains.' b' bytes disk space would be freed' b'' b'disk space was found which is allocated in the fat, but is not attached' b'to any directory entry. chkdsk /f gives you the option of converting these' b'"lost chains" to files. you can then examine the files (file0000.chk' b'through file0223.chk) and rename or discard them. or, if you tell' b'chkdsk _not_ to convert them to files, then those clusters will simply' b'be marked "available" in the fat.' b'' b'' b'c:\\gfx\\vpic46\\cvpic.exe' b' is cross linked on allocation unit b'' b'...' b'' b'c:\\386spart.par' b' is cross linked on allocation unit b'' b'these files are both referencing the _same_ data cluster. obviously,' b"one of them (at least) must be wrong. it's interesting to note that" b'c:\\386spart.par is your windows swap file...' b'' b'to fix this, you should copy each cross-linked file to a new name.' b'this will "fix" the cross-link by giving the files unique data spaces.' b'now delete the cross-linked files. examine the copies and try to' b'assemble them properly. good luck. (hint: "missing pieces" are' b'likely to be found in those "lost chains" at the top...)' b'' b' bytes total disk space' b' bytes in hidden files' b' bytes in directories' b' bytes in user files' b' bytes available on disk' b'' b'your disk is pretty close to full. this may be the actual cause of' b'the problem; perhaps windows needed to expand its swapfile by an' b'amount which exceeded available disk space...' b'' b'in any case, the short summary is that something trashed your fat.' b'there are utilities that can mirror your fat and help repair damage' b'after something like this, but you have to run them _before_ the' b'problem occurs. sorry.' b'' b'' b'--' b'----------------------------------------------------' b'vote straight ticket procrastination party dec. 3rd!' b'--' b'----------------------------------------------------' b'vote straight ticket procrastination party dec. 3rd!' 